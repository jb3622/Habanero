Using System
Using System.Text

Using Disney.SRR

DclNameSpace Disney.SRR

BegClass SRRsmooth Access(*Public)

	/Region Declare DataBase
	DclDB Name(SRR) DBName("TDST")
	
	DclDiskFile Name(DSSRSMF) Type(*Input) Org(*Arrival) +
		DB(SRR) File('*Libl/DSSRSMF') ImpOpen(*No)
		
	DclDiskFile Name(DSSRSMF1) Type(*Update) Org(*indexed) +
		DB(SRR) File('*Libl/DSSRSMF1') AddRec(*Yes) ImpOpen(*No) +
		RnmFmt(RDSSRSMF, UDSSRSMF)
		
	DclMemoryFile Name(Mem) DBdesc(SRR) Filedesc('*Libl/DSSRSMF') +
		RnmFmt(RDSSRSMF, MDSSRSMF) ImpOpen(*No)
	/EndRegion
	
	DclFld MemberName Type(*Char)  Len(10)
	DclFld Department Type(*Zoned) Len(3,0)
	DclFld memRecords Type(*Integer4)
	DclFld UserProfile Type(*Char) Len(10)
	DclFld TimeStamp   Type(*TimeStamp) TimFmt(*ISO)

	DclFld _Smooth Type(*Zoned) Len(5,2)
	DclFld _Below  Type(*Boolean)
	DclFld _Found  Type(*Boolean)
	DclFld _Changed Type(*Boolean)
		
	/Region Constructor & Destructor
	BegConstructor Access(*Public)
		DclSrParm SRR        Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm MemberName Type(*Char)  Len(10)
		DclSrParm Department Type(*Zoned) Len(3,0)
		DclSrParm UserProfile Type(*Char) Len(10)
		DclSrParm TimeStamp   Type(*TimeStamp) TimFmt(*ISO)

		*this.SRR = SRR
		*this.MemberName = MemberName
		*this.Department = Department
		*this.UserProfile = UserProfile
		*this.TimeStamp = TimeStamp
		
		If DSSRSMF.IsOpen
			Close DSSRSMF
		EndIf
		
		DSSRSMF.MemberName = MemberName.Trim()
		Open DSSRSMF
		
		If Not Mem.IsOpen
			Open Mem
		EndIf
		
		// Create the dataset from the iSeries file
		memRecords = *Zero
		SetLL DSSRSMF Key(*Start)
		DoUntil DSSRSMF.IsEof
			Read DSSRSMF
			If (Not DSSRSMF.IsEof) And SFWFLG = ' ' And SFkey > 4 And SFkey < 13
				memRecords += 1
				Write Mem
			EndIf
		EndDo
		
		Close DSSRSMF
	EndConstructor
	/EndRegion

	/Region Properties
	BegProp NoOfRecords Type(*Integer4) Access(*Public)
		BegGet
			LeaveSR memRecords
		EndGet
	EndProp
	
	BegProp ExceptionsBelow Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _Below
		EndGet
	EndProp
	
	BegProp Value Type(*Zoned) Len(5,2) Access(*Public)
		BegGet
			LeaveSR _Smooth
		EndGet
	EndProp
	
	BegProp IsFound Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _Found
		EndGet
	EndProp
	
	BegProp IsChanged Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _Changed
		EndGet
	EndProp
	/EndRegion
	
	/Region Methods
	// Dept
	BegSr GetSmooth Access(*Public)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey < 12 And SFkey > 4 And SFWFLG = *Blanks
				_Below = *True
			EndIf
				
			If SFKEY = 12 And SFWFLG = *Blanks
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
			EndIf
			
			If _Found And _Below
				Leave
			EndIf
		EndDo
	EndSr
	
	// Dept Market
	BegSr GetSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If (SFkey < 11 And SFkey > 4 And SFkey <> 8) +
					 And SFMKT = Market And SFWFLG = *Blank
				_Below = *True
			EndIf
				
			If SFKEY = 11 And SFMKT = Market And SFWFLG = *Blank
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
			EndIf
			
			If _Found And _Below
				Leave
			EndIf
		EndDo
	EndSr
	
	// Dept Market Grade
	BegSr GetSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Grade Type(*Char) Len(3)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If (SFKey = 9 Or SFkey = 6 Or SFkey = 5) + 
					And SFMKT = Market And SFGRD = Grade And SFWFLG = *Blank
				_Below = *True
			EndIf
				
			If SFKEY = 10 And SFMKT = Market And SFGRD = Grade And SFWFLG = *Blank
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
			EndIf
			
			If _Found And _Below
				Leave
			EndIf
		EndDo
	EndSr
	
	// Dept Market Grade Store
	BegSr GetSmooth Access(*Public)
		DclSrParm Market Type(*Char)  Len(2)
		DclSrParm Grade  Type(*Char)  Len(3)
		DclSrParm Store  Type(*Zoned) Len(3,0)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 5 And SFMKT = Market And SFGRD = Grade +
					And SFSTR = Store And SFWFLG = *Blank
				_Below = *True
			EndIf
				
			If SFKEY = 9 And SFMKT = Market And SFGRD = Grade And SFSTR = Store +
				And SFWFLG = *Blank
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
			EndIf
			
			If _Found And _Below
				Leave
			EndIf
		EndDo
	EndSr
	
	// Class
	BegSr GetSmooth Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey < 8 And SFkey > 4 And SFCLS = Class And SFWFLG = *Blanks
				_Below = *True
			EndIf
				
			If SFKEY = 8 And SFCLS = Class And SFWFLG = *Blanks
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
			EndIf
			
			If _Found And _Below
				Leave
			EndIf
		EndDo
	EndSr

	// Class Market
	BegSr GetSmooth Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey < 7 And SFkey > 4 And SFCLS = Class And SFMKT = Market +
					 And SFWFLG = *Blanks
				_Below = *True
			EndIf
				
			If SFKEY = 7 And SFCLS = Class And SFMKT = Market And SFWFLG = *Blanks
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
			EndIf
			
			If _Found And _Below
				Leave
			EndIf
		EndDo
	EndSr
	
	// Class Market Grade
	BegSr GetSmooth Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)
		DclSrParm Grade  Type(*Char)  Len(3)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 5 And SFCLS = Class And SFMKT = Market +
					 And SFgrd = Grade And SFWFLG = *Blanks
				_Below = *True
			EndIf
				
			If SFKEY = 6 And SFCLS = Class And SFMKT = Market And SFgrd = Grade + 
					And SFWFLG = *Blanks
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
			EndIf
			
			If _Found And _Below
				Leave
			EndIf
		EndDo
	EndSr
	
	// Class Market Grade Store
	BegSr GetSmooth Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)
		DclSrParm Grade  Type(*Char)  Len(3)
		DclSrParm Store  Type(*Zoned) Len(3,0)
				
		_Below  = *False
		_Smooth = *Zero
		_Found  = *False
		_Changed = *False
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
				
			If SFKEY = 5 And SFCLS = Class And SFMKT = Market And SFgrd = Grade + 
					And SFstr = Store And SFWFLG = *Blanks
				_Smooth = SFSFCT
				_Found  = *True
				
				If SFCHGD = TimeStamp
					_Changed = *On
				EndIf
				
				Leave
			EndIf
		EndDo
	EndSr


	//------------------------------------------------------------------------------
	// Update Dept level (12)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 12 And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp

				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 12
		SFDEPT = Department
		SFSFCT = Smooth
		SFKYVL = Department.ToString('000')
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr
	
	// Update Dept Market level (11)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 11 And SFmkt = Market And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 11
		SFDEPT = Department
		SFMKT  = Market
		SFSFCT = Smooth
		SFKYVL = Market
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr
	
	// Update Dept Market Grade level (10)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Grade Type(*Char) Len(3)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 10 And SFmkt = Market And SFGRD = Grade And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 10
		SFDEPT = Department
		SFMKT  = Market
		SFGRD  = Grade
		SFSFCT = Smooth
		SFGRD  = Grade
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr

	// Update Dept Market Grade Store level (9)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Grade  Type(*Char) Len(3)
		DclSrParm Store  Type(*Zoned) Len(3,0)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 9 And SFmkt = Market And SFGRD = Grade +
					And SFSTR = Store And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 9
		SFDEPT = Department
		SFMKT  = Market
		SFGRD  = Grade
		SFSTR  = Store
		SFSFCT = Smooth
		SFKYVL = Store.ToString('000')
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr
	
	// Update Class level (8)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 8 And SFcls = Class And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 8
		SFDEPT = Department
		SFCLS  = Class
		SFSFCT = Smooth
		SFKYVL = Class.ToString('0000')
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr
	
	// Update Class Market level (7)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 7 And SFcls = Class And SFmkt = Market And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 7
		SFDEPT = Department
		SFCLS  = Class
		SFMKT  = Market
		SFSFCT = Smooth
		SFKYVL = Market
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr
	
	// Update Class Market Grade level (6)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Grade  Type(*Char) Len(3)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 6 And SFcls = Class And SFmkt = Market And SFgrd = Grade And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 6
		SFDEPT = Department
		SFCLS  = Class
		SFMKT  = Market
		SFGRD  = Grade
		SFSFCT = Smooth
		SFKYVL = Grade
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr
	
	// Update Class Market Grade level (5)
	BegSR UpdateSmooth Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)
		DclSrParm Grade  Type(*Char)  Len(3)
		DclSrParm Store  Type(*Zoned) Len(3,0)
		DclSrParm Smooth Type(*Zoned) Len(5,2)
				
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFKey = 5 And SFcls = Class And SFmkt = Market And SFgrd = Grade And SFstr = Store +
					 And SFWFLG = *Blank
				SFSFCT = Smooth
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
		
		Clear MDSSRSMF
		
		SFKEY  = 5
		SFDEPT = Department
		SFCLS  = Class
		SFMKT  = Market
		SFGRD  = Grade
		SFSTR  = Store
		SFSFCT = Smooth
		SFKYVL = Store.ToString('000')
		SFCHGU = UserProfile
		SFCHGD = TimeStamp
		
		memRecords += 1
		Write MDSSRSMF
	EndSr
	
	
	//------------------------------------------------------------------------------
	// Get Default for Dept level
	BegFunc GetDftSmooth Type(*Zoned) Len(5,2) Access(*Public)
				
		GetSmooth()
		LeaveSR _Smooth
		
	EndFunc
	
	// Get Default for Dept Market
	BegFunc GetDftSmooth Type(*Zoned) Len(5,2) Access(*Public)
		DclSrParm Market Type(*Char) Len(2)

		GetSmooth(Market)
		If _Found
			LeaveSR _Smooth
		Else
			// Dept level default
			GetSmooth()
			LeaveSR _Smooth
		EndIf
		
	EndFunc

	// Get Default for Dept Market Grade
	BegFunc GetDftSmooth Type(*Zoned) Len(5,2) Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm DeptGrade Type(*Char) Len(3)

		GetSmooth(Market, DeptGrade)
		If _Found
			LeaveSR _Smooth
		Else
			GetSmooth(Market)
			If _Found
				LeaveSR _Smooth
			Else
				GetSmooth()
				LeaveSR _Smooth
			EndIf
		EndIf
		
	EndFunc

	// Get Default for Class Market
	BegFunc GetDftSmooth Type(*Zoned) Len(5,2) Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)

		GetSmooth(Class)		// Class
		If _Found
			LeaveSR _Smooth
		Else
			GetSmooth(Market)	// Dept Market
			If _Found
				LeaveSR _Smooth
			Else
				GetSmooth()		// Dept
				LeaveSR _Smooth
			EndIf
		EndIf
	EndFunc

	// Get Default for Class Market Grade
	BegFunc GetDftSmooth Type(*Zoned) Len(5,2) Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)
		DclSrParm Grade  Type(*Char)  Len(3)

		GetSmooth(Class, Market)				// Class Market
		If _Found
			LeaveSR _Smooth
		Else
			GetSmooth(Class)					// Class
			If _Found
				LeaveSR _Smooth
			Else
				GetSmooth(Market, Grade)		// Dept Market Grade
				If _Found
					LeaveSR _Smooth
				Else
					GetSmooth(Market)			// Dept Market
					If _Found
						LeaveSR _Smooth
					Else
						GetSmooth()				// Dept
						LeaveSR _Smooth
					EndIf
				EndIf
			EndIf
		EndIf
	EndFunc
	
	// Get Default for Class Market Grade Store
	BegFunc GetDftSmooth Type(*Zoned) Len(5,2) Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)
		DclSrParm Grade  Type(*Char)  Len(3)
		DclSrParm Store  Type(*Zoned) Len(3,0)

		GetSmooth(Class, Market, Grade)				// Class Market Grade
		If _Found
			LeaveSR _Smooth
		Else
			GetSmooth(Class, Market)				// Class Market
			If _Found
				LeaveSR _Smooth
			Else
				GetSmooth(Class)					// Class
				If _Found
					LeaveSR _Smooth
				Else
					GetSmooth(Market, Grade, Store)	// Dept Market Grade Store
					If _Found
						LeaveSR _Smooth
					Else
						GetSmooth(Market, Grade)	// Dept Market Grade
						If _Found
							LeaveSR _Smooth
						Else
							GetSmooth(Market)		// Dept Market
							If _Found
								LeaveSR _Smooth
							Else
								GetSmooth()			// Dept
								LeaveSR _Smooth
							EndIf
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf
		
	EndFunc
	
	
	//------------------------------------------------------------------------------
	// Delete Dept Market (11)
	BegSr DeleteSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
	
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFkey = 11 And SFmkt = Market And SFWFLG = *Blank
				SFWFLG = 'D'
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
	EndSr
	
	// Delete Dept Market and Grade (10)
	BegSr DeleteSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Grade Type(*Char) Len(3)
	
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFkey = 10 And SFmkt = Market And SFGRD = Grade And SFWFLG = *Blank
				SFWFLG = 'D'
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
	EndSr
	
	// Delete Dept Market Grade and Store (9)
	BegSr DeleteSmooth Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Grade  Type(*Char) Len(3)
		DclSrParm Store  Type(*Zoned) Len(3,0)
	
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFkey = 9 And SFmkt = Market And SFGRD = Grade And SFSTR = Store +
					 And SFWFLG = *Blank
				SFWFLG = 'D'
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
	EndSr

	// Delete Class (8)
	BegSr DeleteSmooth Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
	
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFkey = 8 And SFcls = Class And SFWFLG = *Blank
				SFWFLG = 'D'
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
	EndSr

	// Delete Class Market (7)
	BegSr DeleteSmooth Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char) Len(2)
	
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFkey = 7 And SFcls = Class And SFmkt = Market And SFWFLG = *Blank
				SFWFLG = 'D'
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
	EndSr

	// Delete Class Market Grade (6)
	BegSr DeleteSmooth Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char) Len(2)
		DclSrParm Grade  Type(*Char) Len(3)
	
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFkey = 6 And SFcls = Class And SFmkt = Market And SFgrd = Grade +
					 And SFWFLG = *Blank
				SFWFLG = 'D'
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
	EndSr
	
	// Delete Class Market Grade Store (5)
	BegSr DeleteSmooth Access(*Public)
		DclSrParm Class  Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char)  Len(2)
		DclSrParm Grade  Type(*Char)  Len(3)
		DclSrParm Store  Type(*Zoned) Len(3,0)
	
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SFkey = 5 And SFcls = Class And SFmkt = Market And SFgrd = Grade +
					 And SFstr = Store And SFWFLG = *Blank
				SFWFLG = 'D'
				SFCHGU = UserProfile
				SFCHGD = TimeStamp
				
				Update MDSSRSMF
				LeaveSR
			EndIf
		EndDo
	EndSr
	
	
	//------------------------------------------------------------------------------
	BegSr Save_WorkingModel Access(*Public)
		DclSrParm SaveToMember Type(*Char) Len(10)
		
		If DSSRSMF1.IsOpen
			Close DSSRSMF1
		EndIf
	
		DSSRSMF1.MemberName = SaveToMember.Trim()
		Open DSSRSMF1
		
		DeleteRange DSSRSMF1 FirstKey(1) LastKey(12)
		
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			If SFWFLG = *Blank
				Write UDSSRSMF
			EndIf
		EndDo
		
		Close DSSRSMF1
	EndSr
	
	BegSr Save_BaseModel Access(*Public)
		DclSrParm SaveToMember Type(*Char) Len(10)
		
		If DSSRSMF1.IsOpen
			Close DSSRSMF1
		EndIf
	
		DSSRSMF1.MemberName = SaveToMember.Trim()
		Open DSSRSMF1
		
		DeleteRange DSSRSMF1 FirstKey(12, Department)
		DeleteRange DSSRSMF1 FirstKey(11, Department)
		DeleteRange DSSRSMF1 FirstKey(10, Department)
		DeleteRange DSSRSMF1 FirstKey(9,  Department)
		DeleteRange DSSRSMF1 FirstKey(8,  Department)
		DeleteRange DSSRSMF1 FirstKey(7,  Department)
		DeleteRange DSSRSMF1 FirstKey(6,  Department)
		DeleteRange DSSRSMF1 FirstKey(5,  Department)

		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			If SFWFLG = *Blank
				Write UDSSRSMF
			EndIf
		EndDo
		
		Close DSSRSMF1
	EndSr
	
	BegSr Rmv_Item_Rec Access(*Public)
		DclSrParm Member Type(*Char) Len(10)
		
		If DSSRSMF1.IsOpen
			Close DSSRSMF1
		EndIf
		
		DSSRSMF1.MemberName = Member.Trim()
		Open DSSRSMF1
		
		Do FromVal(1) ToVal(4) Index(KeyValue) Type(*Zoned) Len(2,0)
			DeleteRange DSSRSMF1 FirstKey(KeyValue)
		EndDo
		
		Close DSSRSMF1
	EndSr
	/EndRegion
EndClass