Using System
Using System.Text
Using System.Collections
Using System.Data

DclNameSpace Disney.Menu

BegClass Users Access(*Public)
	
	DclFld   Name(XmlName)         Type(String)   Access(*Private)
	DclFld   Name(XmlUserId)       Type(String)   Access(*Private)
	DclFld   Name(XmlIPinitials)   Type(String)   Access(*Private)
	DclFld   Name(XmlTimeOut)      Type(String)   Access(*Private)
	DclFld   Name(XmlEmailAddress) Type(String)   Access(*Private)
	DclFld   Name(XmlEnabled)      Type(Boolean)  Access(*Private)
	DclArray Name(XmlApplications) Type(String)   Rank(1) New(20) Access(*Private)
	DclArray Name(XmlMenuOption)   Type(String)   Rank(1) New(20) Access(*Private)
	DclFld   Name(XmlDepartments)  Type(DataTable) Access(*Private)
	DclArray Name(XmlEnvironments) Type(String)   Rank(1) New(20) Access(*Private)
	DclArray Name(XmlMarkets)      Type(String)   Rank(1) New(20) Access(*Private)
	
	DclFld Name(AppIndex)     Type(Int16) Inz(-1) Access(*Private)
	DclFld Name(OptionIndex)  Type(Int16) Inz(-1) Access(*Private)
	DclFld Name(EnvironIndex) Type(Int16) Inz(-1) Access(*Private)
	DclFld Name(MarketIndex)  Type(Int16) Inz(-1) Access(*Private)
	
	BegConstructor Access(*Public)
	EndConstructor
	
	BegProp UserID Type(String) Access(*Public)
		BegGet
			LeaveSR XmlUserID
		EndGet
	EndProp
	
	BegProp UserName Type(String) Access(*Public)
		BegGet
			LeaveSR XmlName
		EndGet
	EndProp
	
	BegProp IPinitials Type(String) Access(*Public)
		BegGet
			LeaveSR XmlIPinitials
		EndGet
	EndProp
	
	BegProp UserTimeOut Type(String) Access(*Public)
		BegGet
			LeaveSR XmlTimeOut
		EndGet
	EndProp
	
	BegProp AuthorisedApplications Type(String) Rank(1) Access(*Public)
		BegGet
			LeaveSR XmlApplications
		EndGet
	EndProp
	
	BegProp UserEnabled Type(Boolean) Access(*Public)
		BegGet
			LeaveSR XmlEnabled
		EndGet
	EndProp
	
	BegProp AuthorisedDepartments Type(DataTable) Access(*Public)
		BegGet
			LeaveSR XmlDepartments
		EndGet
	EndProp
	
	BegProp AuthorisedEnvironments Type(String) Rank(1) Access(*Public)
		BegGet
			LeaveSR XmlEnvironments
		EndGet
	EndProp
	
	BegProp AuthorisedMarkets Type(String) Rank(1) Access(*Public)
		BegGet
			LeaveSR XmlMarkets
		EndGet
	EndProp
	
	BegFunc GetUserDetails Type(Boolean) Access(*Public)
		DclSrParm User Type(String)
		
		DclFld XmlReader Type(System.Xml.XmlTextReader)
		DclFld UserID    Type(String)
		DclFld dr        Type(DataRow)
				
		XmlReader = *New System.Xml.XmlTextReader(System.Environment.CurrentDirectory.Trim() + "\" + Environments.menuXmlFolderName + "\Users.xml")
		
		DoUntil XmlReader.EOF = *True
			XmlReader.ReadToFollowing("User")
		
			If XmlReader.EOF = *True
				Leave
			EndIf

			UserID = XmlReader.GetAttribute("UserID")
			If UserID.ToUpper() = User.ToUpper()
				XmlUserId = User
			
				If XmlReader.GetAttribute("UserName") <> *Nothing
					XmlName = XmlReader.GetAttribute("UserName")
				Else
					XmlName = User
				EndIf
				
				If XmlReader.GetAttribute("IPInitials") <> *Nothing
					XmlIPinitials = XmlReader.GetAttribute("IPInitials")
				Else
					XmlIPinitials = *Blank
				EndIf
				
				If XmlReader.GetAttribute("UserEnabled") <> *Nothing
					XmlEnabled = XmlReader.GetAttribute("UserEnabled")
				Else
					XmlEnabled = *Off
				EndIf
				
				If XmlReader.GetAttribute("TimeOutMinutes") <> *Nothing
					XmlTimeOut = XmlReader.GetAttribute("TimeOutMinutes")
				Else
					XmlTimeOut = "5"
				EndIf
				
				DoUntil XmlReader.NodeType = System.Xml.XmlNodeType.EndElement And XmlReader.Name = "User"
					XmlReader.Read()
					
					Select							
					When XmlReader.Name = "EmailAddress"
						XmlEmailAddress = XmlReader.ReadElementContentAsString()
						
					When XmlReader.Name = "Application"
						AppIndex += 1
						If AppIndex < XmlApplications.Length
							XmlApplications[AppIndex] = XmlReader.ReadElementContentAsString().ToUpper()
						EndIf
							
					When XmlReader.Name = "MenuOption"
						OptionIndex += 1
						If OptionIndex < XmlMenuOption.Length
							XmlMenuOption[OptionIndex] = XmlReader.ReadElementContentAsString()
						EndIf
						
					When XmlReader.Name = "Department"
						If XmlDepartments = *Nothing
							CreateXMLdeptTable()
						EndIf
						
						dr = XmlDepartments.NewRow()
						dr.Item["Department"] = XmlReader.ReadElementContentAsInt()
						XmlDepartments.Rows.Add(dr)
						
					When XmlReader.Name = "Environment"
						EnvironIndex += 1
						If EnvironIndex < XmlEnvironments.Length
							XmlEnvironments[EnvironIndex] = XmlReader.ReadElementContentAsString()
						EndIf
						
					When XmlReader.Name = "Market"
						MarketIndex += 1
						If MarketIndex < XmlMarkets.Length
							XmlMarkets[MarketIndex] = XmlReader.ReadElementContentAsString()
						EndIf					
					EndSL
				EndDo
					
				XmlReader.Close()
				XmlReader = *Nothing
				
				LeaveSR *True
			EndIf
		EndDo
		
		XmlReader.Close()
		XmlReader = *Nothing
		
		LeaveSr *False
	EndFunc
	
	BegSr CreateXMLdeptTable
	
		XmlDepartments = *New DataTable("Departments")
		XmlDepartments.Columns.Add(*New DataColumn("Department", *TypeOf(System.Int16)))
		XmlDepartments.Columns["Department"].ReadOnly = *True
		XmlDepartments.Columns["Department"].Unique  = *True
	EndSr
	
	BegFunc GetOptionAuthority Access(*Public) Type(*Boolean)
		DclSrParm MenuOption Type(*String)
				
		ForEach AuthorisedOption Collection(XmlMenuOption) Type(*String)
			If AuthorisedOption = MenuOption
				LeaveSR *True
			EndIf
		EndFor
		
		LeaveSR *False
	Endfunc
	
	BegFunc ChkEnvironmentAuthority Access(*Public) Type(*Boolean)
		DclSrParm EnvironmentName Type(*String)
				
		ForEach Environment Collection(XmlEnvironments) Type(*String)
			If Environment = EnvironmentName
				LeaveSR *True
			EndIf
		EndFor
		
		LeaveSR *False
	Endfunc
EndClass