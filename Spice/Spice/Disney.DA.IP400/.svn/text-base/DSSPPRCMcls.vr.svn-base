// ===============================================
// Joseph Urbina
// 27th May 2009
// DSSPPRCMcls	
// Data Access Layer - Pricing Matrix File
//------------------------------------------------
// Modification
//================================================

Using System
Using System.Text
Using System.Data
Using System.Collections

	BegClass DSSPPRCMcls Access(*Public)
		
	/Region Declare Files and DB
	DclDB Name(Pgmdb) DbName("TDST")
	DclDiskFile Name(DSSPPRCML1) Type(*Update) Org(*Indexed) ImpOpen(*No) DB(Pgmdb) AddRec(*Yes)RnmFmt(Dsspprcmr:R_Dsspprcmr1)
	DclDiskFile Name(DSSPPRCML2) Type(*Input)  Org(*Indexed) ImpOpen(*No) DB(Pgmdb) RnmFmt(Dsspprcmr:R_Dsspprcmr2)
	DclDiskFile Name(DSSPPRCML3) Type(*Input)  Org(*Indexed) ImpOpen(*No) DB(Pgmdb) RnmFmt(Dsspprcmr:R_Dsspprcmr3)
	/EndRegion
	
	/Region Declare Objects
	 DclFld DSSPPRCLcls	Type(DSSPPRCLcls)	
	/EndRegion
	
	/Region Constructor
	BegConstructor Access(*Public)
		DclSrParm Pgmdb Type(ASNA.VisualRPG.Runtime.Database)
		
		*this.Pgmdb = Pgmdb
	EndConstructor
	/EndRegion
	
	/Region DSSPPRCM Properties
	//Master Market Currency Code
	BegProp Master_Currency Type(*Char) Len(2) Access(*Public)
	
		BegGet
			LeaveSR PRCMAS
		EndGet
		
		BegSet
			PRCMAS = *PropVal
		EndSet
				
	EndProp
	
	//Market Currency Code
	BegProp Market_Currency Type(*Char) Len(2) Access(*Public)
	
		BegGet
			LeaveSR PRCMAR
		EndGet
		
		BegSet
			PRCMAR = *PropVal
		EndSet
		
	EndProp
	
	//From Retail Price
	BegProp From_Price Type(*Packed) Len(7,2) Access(*Public)
	
		BegGet
			LeaveSR PRCFRP
		EndGet
		
		BegSet
			PRCFRP = *PropVal
		EndSet
		
	EndProp
	
	//To Retail Price
	BegProp To_Price Type(*Packed) Len(7,2) Access(*Public)
	
		BegGet
			LeaveSR PRCTOP
		EndGet
		
		BegSet
			PRCTOP = *PropVal
		EndSet
		
	EndProp
	
	//Default Retail Price
	BegProp Default_Price Type(*Packed) Len(7,2) Access(*Public)
	
		BegGet
			LeaveSR PRCDRP
		EndGet
		
		BegSet
			PRCDRP = *PropVal
		EndSet
		
	EndProp
	
	//Create Date
	BegProp Create_Date Type(*Zoned ) Len(8,0) Access(*Public)
		BegGet
			LeaveSR PRCCRD
		EndGet
		
		BegSet
			PRCCRD = *PropVal
		EndSet
		
	EndProp
	
	//Create Time
	BegProp Create_Time Type(*Zoned ) Len(6,0) Access(*Public)
	
		BegGet
			LeaveSR PRCCRT
		EndGet
		
		BegSet
			PRCCRT = *PropVal
		EndSet
		
	EndProp
	
	//Create User
	BegProp Create_User Type(*Char ) len(10) Access(*Public)
	
		BegGet
			LeaveSR PRCCRU 
		EndGet
		
		BegSet
			PRCCRU = *PropVal
		EndSet
		
	EndProp
	
	//Changed Date
	BegProp Changed_Date Type(*Zoned ) Len(8,0) Access(*Public)
	
		BegGet
			LeaveSR PRCCHD
		EndGet
		
		BegSet
			PRCCHD = *PropVal
		EndSet
		
	EndProp
	
	//Changed Time
	BegProp Changed_Time Type(*Zoned ) Len(6,0) Access(*Public)
	
		BegGet
			LeaveSR PRCCHT 
		EndGet
		
		BegSet
			PRCCHT  = *PropVal
		EndSet
		
	EndProp
	
	//Changed User
	BegProp Changed_User Type(*Char ) len(10) Access(*Public)
	
		BegGet
			LeaveSR PRCCHU 
		EndGet
		
		BegSet
			PRCCHU  = *PropVal
		EndSet
		
	EndProp
	
	//Pricing ID
	BegProp Pricing_ID Type(*Zoned ) len(5,0) Access(*Public)
	
		BegGet
			LeaveSR PRCMID
		EndGet
		
		BegSet
			PRCMID  = *PropVal
		EndSet
		
	EndProp
		
	/EndRegion	
			
	/Region Methods
	//Pricing Matrix Chain Read 
	BegFunc GetPriceMatrixRead Type(*Boolean) Access(*Public)
		DclSrParm Master_Currency Type(*Char) len(2)
		DclSrParm Market_Currency Type(*Char) len(2)
		DclSrParm From_Price	  Type(*Packed) len(7,2)
		
		//Open the file if not already done so.		
		If Not DSSPPRCML2.IsOpen
			Open DSSPPRCML2
		EndIf
		
		//Chain with Master/Market currencies and From Price No Update
		Chain From(DSSPPRCML2) Key(Master_Currency, Market_Currency, From_Price) Access(*NoLock)
		If %Found
			LeaveSR *Off
		Else
			LeaveSR *On
		EndIf		
	EndFunc
	
	//Pricing Matrix Chain Update
	BegFunc GetPriceMatrixUpdate Type(*Boolean) Access(*Public)
		DclSrParm Master_Currency Type(*Char) len(2)
		DclSrParm Market_Currency Type(*Char) len(2)
		DclSrParm From_Price      Type(*Packed) len(7,2)
		
		//Open the file if not already done so.	
		If Not DSSPPRCML1.IsOpen
			Open DSSPPRCML1
		EndIf
		
		//Chain with Master/Market currencies and From Price with Update
		Chain From(DSSPPRCML1) Key(Master_Currency, Market_Currency, From_Price) Access(*DFT) Err(*Extended)
		If Not %Found
			LeaveSR *On
		EndIf
		
		If %Error = *On
			Throw *New System.Exception('Failed to get record for update (DSSPPRCML1)')
			LeaveSR *On
		EndIf
		
		LeaveSR *Off
	EndFunc
	
	//Writes new record. This method works out the next ID number.			
	BegFunc WritePriceMatrixRecord Type(*Zoned) Len(5,0) Access(*Public)
		DclSrParm Master_Currency	Type(*Char)		Len(2)
		DclSrParm Market_Currency	Type(*Char)		Len(2)
		DclSrParm From_Price		Type(*Packed)	Len(7,2)
		DclSrParm To_Price			Type(*Packed)	Len(7,2)
		DclSrParm Default_Price		Type(*Packed)	Len(7,2)
		
		//Open the files if not already done so.
		If Not DSSPPRCML1.IsOpen
			Open DSSPPRCML1
		EndIf
		
		If Not DSSPPRCML3.IsOpen
			Open DSSPPRCML3
		EndIf
		
		//Get last available ID Number
		SetGT File(DSSPPRCML3) Key(*Hival)
		ReadP DSSPPRCML3
		
		If %Error = *On
			Throw *New System.Exception('Record Locked')
		EndIf
		
		//As we have previously read a record we don't want any data hanging arouond.
		clear R_Dsspprcmr3 *NoKey
		
		//Increment the ID	
		If Not %Eof(DSSPPRCML3)
			PRCMID += 1
		  Else
		   PRCMID  = 1	
		Endif
		
		
		//Set new record data		
		Create_Date = %Date
	    Create_Time = %Time
	    Create_User = Pgmdb.User().toUpper()
	    PRCMAS      = Master_Currency
	    PRCMAR		= Market_Currency
	    PRCFRP	    = From_Price
	    PRCTOP		= To_Price
	    PRCDRP		= Default_Price
		
		//Write the record
		Write R_Dsspprcmr1 Err(*Extended)
		If %Error = *On
			Throw *New System.Exception('Failed to write record (DSSPPRCML1)')
		EndIf
		
		LeaveSR PRCMID
	EndFunc
	
	//Update Method
	BegFunc UpdatePriceMatrix Type(*Boolean) Access(*Public) 
		DclSrParm From_Price	  Type(*Packed) len(7,2)
		DclSrParm To_Price		  Type(*Packed) len(7,2)
		DclSrParm Default_Price	  Type(*Packed) len(7,2)
		
		//Update Data
		Changed_Date  = %Date
		Changed_Time  = %Time
		Changed_User  = Pgmdb.User().ToUpper()
		PRCFRP		  = From_Price
		PRCTOP		  = To_Price
		PRCDRP		  =	Default_Price
		
		Update R_Dsspprcmr1 Err(*Extended)
		If %Error = *On
			Throw *New System.Exception('Failed to update record (DSSPPRCML1)')
			LeaveSR *True
		EndIf
		
		LeaveSR *Off
	EndFunc
	
	//Delete Method Record by Record
	BegFunc DeletePriceMatrix Type(*Boolean) Access(*Public)
		DclSrParm Master_Currency Type(*Char)	len(2)
		DclSrParm Market_Currency Type(*Char)	len(2)
		
		//Open the file if not already done so.
		If Not DSSPPRCML1.IsOpen
			Open DSSPPRCML1
		EndIf
		
		Delete From(R_Dsspprcmr1) Key(Master_Currency, Market_Currency) Err(*Extended)
		
		If %Error = *On
			LeaveSR *True
		EndIf
		
		LeaveSR *False
	EndFunc
	
	//Delete Method by DataSet receives Master/Market Currencies and a Dataview of only records marked for delete.
	BegFunc DeletePriceMatrixDataSet Type(*Boolean) Access(*Public)
		DclSrParm Master_Currency	 Type(*Char) Len(2)
		DclSrParm Market_Currency	 Type(*Char) Len(2)
		DclSrParm Deleted_Rows		 Type(DataView)	
				
		DclFld Deleted_Rows			 Type(DataView)
		DclFld Data_Row_View		 Type(DataRowView)
		DclFld Pricing_Matrix_ID     Type(*Zoned)  Len(5,0)
		DclFld Log_Type              Type(*Char)   Len(1) Inz("D")
		DclFld From_Price            Type(*Packed) Len(7,2)
		DclFld To_Price			     Type(*Packed) Len(7,2)
		DclFld Default_Price         Type(*Packed) Len(7,2)
		
		//Pricing Matrix Log Class
	    If DSSPPRCLcls = *Nothing
		   DSSPPRCLcls = *New DSSPPRCLcls(Pgmdb) 
	    Endif
	    
		//Open the file if not already done so.
		If Not DSSPPRCML1.IsOpen
			Open DSSPPRCML1
		EndIf
		
		//Read through the DataView and Delete from DB. Also log deletion in Pricing Matrix Log File. 
		ForEach Data_Row_View Collection(Deleted_Rows) Type(DataRowView)
			Pricing_Matrix_ID = Data_Row_View.Item["clmPRCMID"] *as Int32
			From_Price = Data_Row_View.Item["clmPRCFRP"] *as *Decimal
			To_Price = Data_Row_View.Item["clmPRCTOP"] *as *Decimal
			Default_Price = Data_Row_View.Item["clmPRCDRP"] *as *Decimal	
		Delete From(R_Dsspprcmr1) Key(Master_Currency, Market_Currency,From_Price) Err(*Extended)
		DSSPPRCLcls.WritePriceMatrixLogRecord(Pricing_Matrix_ID, Log_Type, Master_Currency, Market_Currency, From_Price, To_Price, Default_Price, From_Price, To_Price, Default_Price)
		If %Error = *On
			LeaveSR *True
		EndIf
		
		EndFor
		
		LeaveSR *False
	EndFunc
	
	//Returns the Default Pricing Matrix File as a Dataset Keyed by Master and Market Currency.
	BegFunc GetPriceMatrixDataSet Type(DataTable) Access(*Public)
		DclSrParm Master_Currency Type(*Char)	len(2)
		DclSrParm Market_Currency Type(*Char)	len(2)
	
		DclFld dt Type( DataTable ) New()
		DclFld dc Type( DataColumn ) 
		DclFld dr Type( DataRow )
		
		//Open the file if not already done so.								
		If Not DSSPPRCML2.IsOpen
			Open DSSPPRCML2
		EndIf
		
		//Create Delete CheckBox Column
		dc = *New DataColumn( 'clmDelBox' )
		dc.DataType = System.Type.GetType("System.Boolean")
		dt.Columns.Add(dc)
		
						
		//Create From Price Column
		dc = *New DataColumn( 'clmPRCFRP' )
		dc.DataType = System.Type.GetType("System.Decimal")
		dt.Columns.Add(dc)
		
		//Create To Price Column
		dc = *New DataColumn( 'clmPRCTOP' )
		dc.DataType = System.Type.GetType("System.Decimal")
		dt.Columns.Add(dc)
		
		//Create Default Price Column
		dc = *New DataColumn( 'clmPRCDRP' )
		dc.DataType = System.Type.GetType("System.Decimal")
		dt.Columns.Add(dc)
		
		//Create Pricing Matrix ID
		dc = *New DataColumn( 'clmPRCMID' )
		dc.DataType = System.Type.GetType("System.Int32")
		dt.Columns.Add(dc)
		
		//Read file and create rows in DataTable				
		Setll DSSPPRCML2 Key(Master_Currency, Market_Currency)
		DoUntil DSSPPRCML2.IsEof
			ReadE  DSSPPRCML2 Key(Master_Currency, Market_Currency) Access(*NoLock)
			If not DSSPPRCML2.IsEof
				dr = dt.NewRow()
				dr.Item[0] = *False
				dr.Item[1] = PRCFRP
				dr.Item[2] = PRCTOP
				dr.Item[3] = PRCDRP
				dr.Item[4] = PRCMID
								
				dt.Rows.Add( dr )
			Endif
		Enddo
		
		LeaveSR dt
	EndFunc
	
	//Pricing Matrix Check if range overlaps Add method
	BegFunc CheckPriceOverlapAdd Type(*Boolean) Access(*Public)
		DclSrParm Master_Currency Type(*Char) len(2)
		DclSrParm Market_Currency Type(*Char) len(2)
		DclSrParm From_Price	  Type(*Packed) len(7,2)
		DclSrParm To_Price	      Type(*Packed) len(7,2)
		
		//Open the file if not already done so.		
		If Not DSSPPRCML2.IsOpen
			Open DSSPPRCML2
		EndIf
		
		//Check for existence
		Setll DSSPPRCML2 Key(Master_Currency, Market_Currency, From_Price) 
		If %Equal = *True
			LeaveSR *True
		Endif
		
		//Record not found on Setll so read the previous record	
		ReadPE DSSPPRCML2 Key(Master_Currency, Market_Currency) Access(*NoLock)
		
		//If changed from price is Less than or equal to To Price - then Error
		If  Not DSSPPRCML2.IsEof and From_Price <= PRCTOP
			LeaveSR *True
		Endif
				
		//Read the next record on Master and Market currency keys		
		ReadE DSSPPRCML2 Key(Master_Currency, Market_Currency) Access(*NoLock)
		
		//If the To price is greater than or equal to the From Price then Error
		If not DSSPPRCML2.IsEof and To_Price >= PRCFRP
			LeaveSR *True
		Endif
						
		LeaveSR *False				
	EndFunc
	
	//Pricing Matrix Check if range overlaps Update method
	BegFunc CheckPriceOverlapUpdate Type(*Boolean) Access(*Public)
		DclSrParm Master_Currency Type(*Char)   len(2)
		DclSrParm Market_Currency Type(*Char)   len(2)
		DclSrParm From_Price	  Type(*Packed) len(7,2)
		DclSrParm To_Price	      Type(*Packed) len(7,2)
		DclSrParm Save_From_price Type(*Packed) len(7,2)
		DclSrParm Save_To_price   Type(*Packed) len(7,2)
		
		
		//Open the file if not already done so.		
		If Not DSSPPRCML2.IsOpen
			Open DSSPPRCML2
		EndIf
		
		//No need to check Ftrom Price if it hasn't changed.
		If From_price = Save_From_Price
		
			//Only check the To Price if greater than the saved To Price.
			If To_Price > Save_To_Price   
		
				//Place pointer on the next record
				SetGT DSSPPRCML2 Key(Master_Currency, Market_Currency, From_Price) 
				
				//Read this record by Key	
				ReadE DSSPPRCML2 Key(Master_Currency, Market_Currency) Access(*NoLock)
			
					//If the To price is Greater or equal to From Price then Error
				If not DSSPPRCML2.IsEof and To_Price >= PRCFRP
					LeaveSR *True
				Endif
			Endif
		Else	
			
			//Otherwise the From Price has changed and we perform the same check as with an add.			
			Setll DSSPPRCML2 Key(Master_Currency, Market_Currency, Save_From_Price) 
							
			ReadPE DSSPPRCML2 Key(Master_Currency, Market_Currency) Access(*NoLock)
				If  Not DSSPPRCML2.IsEof and From_Price <= PRCTOP
					LeaveSR *True
				Endif
			
			SetGt DSSPPRCML2 Key(Master_Currency, Market_Currency, Save_From_Price) 	
			ReadE DSSPPRCML2 Key(Master_Currency, Market_Currency) Access(*NoLock)
				If not DSSPPRCML2.IsEof and To_Price >= PRCFRP
					LeaveSR *True
				Endif
			Endif
						
			LeaveSR *False	
	EndFunc
	
	BegFunc GetRetailPrice Type(Decimal) Access(*Public)
		DclSrParm BaseCcy    Type(String)
		DclSrParm MarketCcy  Type(String)
		DclSrParm BaseRetail Type(Decimal)
		
		If Not DSSPPRCML1.IsOpen
			Open DSSPPRCML1
		EndIf
		
		SetLL DSSPPRCML1 Key(BaseCcy,MarketCcy)
		DoUntil (DSSPPRCML1.IsEof)
			ReadE DSSPPRCML1 Key(BaseCcy,MarketCcy) Access(*NoLock)
			If Not DSSPPRCML1.IsEof
				If BaseRetail >= PRCFRP And BaseRetail <= PRCTOP
					LeaveSR PRCDRP
				EndIf
			EndIf
		EndDo
		
		LeaveSR *Zero
	EndFunc
	/EndRegion	
EndClass