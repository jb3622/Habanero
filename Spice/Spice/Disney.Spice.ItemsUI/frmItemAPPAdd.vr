Using System
Using System.Collections 
Using System.ComponentModel
Using System.Data
Using System.Drawing
Using System.Text
Using System.Windows.Forms
Using Disney.Spice.ItemsBO
Using Disney.DA.IP400
Using Disney.Menu

BegClass frmItemAPPAdd Extends(System.Windows.Forms.Form) Access(*Public)

/Region Declares    
	DclDB  Name(PgmDB) dbname('TDST')	
	DclFld ItemsBO				Type(Disney.Spice.ItemsBO.Items) 
	DclFld MDIform              Type(System.Windows.Forms.Form)
	DclFld Environment   		Type(Disney.Menu.Environments) Access(*Private)
	DclFld User					Type(Disney.Menu.Users)  
	DclFld SpiceAPPItem			Type(SpiceAPPItem)
	DclFld SpiceItem			Type(SpiceItem)
	DclFld m_AddAPPEcomDetails  Type(AddAPPEcomDetails)
	DclFld m_MarketPricesFormVisited Type(Boolean) Inz(*True)
	DclFld m_BundleRetailPriceForm Type(frmBundleRetailPrice)
	DclFld dv                   Type(DataView)
	DclFld PriceMatrixTbl		Type(DataTable)
	DclFld DSSPEHLcls			Type(DSSPEHLcls)
	DclFld SelectItem			Type(SelectItem)
	DclFld SelectMarket         Type(SelectMarket)    Access(*Private)
	DclFld ErrPro               Type(Disney.Spice.ErrorProvider.ErrorProviderWithCount) Access(*Private)
	DclFld ItemStyle   		    Type(Disney.DA.IP400.ItemStyle)
	DclFld dgvItemAPAdd System.Windows.Forms.DataGridView Access(*Private) WithEvents(*Yes)
	DclFld clmSelect System.Windows.Forms.DataGridViewCheckBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmClass System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmVendor System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmStyle System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmColour System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmSize System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmDescription System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmColourName System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmSizeName System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmUPC System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmQty System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmCost System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld clmRetail System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld lblSubClass System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld txtSubClass System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld cboSellingChannel System.Windows.Forms.ComboBox Access(*Private) WithEvents(*Yes)
	DclFld lblSellingChannel System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld lblAppType System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld cmbAPPType System.Windows.Forms.ComboBox Access(*Private) WithEvents(*Yes)
	DclFld lblBundlePrice System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld txtBundleRetailPrice System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld lblMktPricesPrompt System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld bttnMarketPrices System.Windows.Forms.Button Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn1 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn2 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn3 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn4 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn5 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn6 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn7 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn8 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn9 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn10 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn11 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld dataGridViewTextBoxColumn12 System.Windows.Forms.DataGridViewTextBoxColumn Access(*Private) WithEvents(*Yes)
	DclFld btnSubClassLookUp System.Windows.Forms.Button Access(*Private) WithEvents(*Yes)
	DclFld cboVATRate System.Windows.Forms.ComboBox Access(*Private) WithEvents(*Yes)
	DclFld lblVATRate System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld txtLocalDescription System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld lblDescriptionOther System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld lblLocalLangDesc System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld lblSubClassDescr System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld CasePack             Type(CasePack)
	
	DclFld Domain				Type(String)
	DclFld DateFormat			Type(String)
	DclFld Column				Type(Int16)
	DclFld Row					Type(Int16)
	DclFld APPType				Type(String)
	DclFld Prefix				Type(*Char) Len(5)
	DclFld DevelopedBy			Type(String)
	DclFld APPMasterItem		Type(String)
	DclFld MaxComponents		Type(Int16)
	DclFld MarketTbl			Type(DataTable)
	DclFld MarketTblDV			Type(DataView)
	DclFld MasterMarket			Type(String)
	DclFld Market				Type(String)
	DclFld CasePackCode         Type(String)
	DclFld PackQty				Type(Int16)
	DclFld PackWeight           Type(Decimal)
	DclFld PackHeight           Type(Decimal)
	DclFld PackLength           Type(Decimal)
	DclFld PackWidth            Type(Decimal)
	DclFld ClassDivision	    Type(Decimal)
	DclFld ClassDepartment		Type(Int16)
	DclFld Class                Type(Int16)
	DclFld Vendor               Type(Int32)
	DclFld Style                Type(Int16)
	DclFld Colour               Type(Int16)
	DclFld Size					Type(int16)
	DclFld GridClass	        Type(Int16)
	DclFld GridStyle            Type(Int16)
	DclFld GridVendor	        Type(Int16)
	DclFld GridColour           Type(Int16)
	DclFld GridSize				Type(Int16)
	DclFld GridQty				Type(Int16)
	DclFld ClassDataSet			Type(DataSet)
	DclFld DepartMentClasses	Type(DataTable)
	DclFld DepartmentClassesDV	Type(DataView)
	DclFld ItemCheck			Type(Boolean)
	DclFld ColourCheck			Type(Boolean)
	DclFld SizeCheck			Type(Boolean)
	DclFld GridCount			Type(Int16)
	DclFld GridCostSum			Type(Decimal)
	DclFld GridRetailSum		Type(Decimal)
	DclFld AllOk				Type(Boolean)
	DclFld SelectItemsTbl		Type(DataTable)
	DclFld SelectItemsDV		Type(DataView)
	DclFld ClassLck				Type(String)
	DclFld DeptLck				Type(String)
	DclFld VendorLck			Type(String) 
	DclFld GridErrors			Type(Boolean)
	DclFld EventType			Type(String)
	DclFld EventKey				Type(String)
	DclFld EventDescription		Type(String)
	DclFld LongItemString		Type(StringBuilder)
	DclFld SpiceDS              Type(DataSet)
	DclFld ItemSizes            Type(DataTable)
	DclFld drItemSizes			Type(DataRow)
	DclFld ReturnText           Type(String) 
	
	DclFld CasePackTbl Type(DataTable)
/EndRegion

/Region Contructors 

	BegConstructor Access(*Public)
		DclSrParm PgmDB       Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm User        Type(Disney.Menu.Users)
		DclSrParm Environment Type(Disney.Menu.Environments)
		DclSrParm MDIform     Type(System.Windows.Forms.Form)		
		
		InitializeComponent()
		
        //Instance the ErrorProvidor
        ErrPro = *New Disney.Spice.ErrorProvider.ErrorProviderWithCount(*this.components)
		ErrPro.BlinkStyle = System.Windows.Forms.ErrorBlinkStyle.NeverBlink
		ErrPro.ContainerControl = *this
		
		*this.PgmDB       = PgmDB
		*this.User        = User
		*this.Environment = Environment
		*this.Domain      = Environment.Domain
		*this.DateFormat  = Environment.DateFormat
		*this.MDIform     = MDIform
		*this.MdiParent   = MDIform
		
		If (DataCache.LocalLanguage = 'English')
			lblDescriptionOther.Enabled = *False
			txtLocalDescription.Enabled = *False
			lblLocalLangDesc.Text = ""
		Else
			lblDescriptionOther.Enabled = *True
			txtLocalDescription.Enabled = *True
			lblLocalLangDesc.Text = DataCache.LocalLanguage
		EndIf
		
		If(DataCache.IsStyleNumberInputRequired = *True)
			txtStyle.Text = "0"
			txtStyle.Enabled = *True
		Else
			txtStyle.Text = "0"
			txtStyle.Enabled = *False
		EndIf
	EndConstructor
	
/EndRegion

/Region Default Windows Form Designer generated code  
	DclFld groupBox13 System.Windows.Forms.GroupBox                      Access(*Private) WithEvents(*Yes)
	DclFld lblLongDescription System.Windows.Forms.Label                 Access(*Private) WithEvents(*Yes)
	DclFld lblClassDescription System.Windows.Forms.Label                Access(*Private) WithEvents(*Yes)
	DclFld lblVendor System.Windows.Forms.Label                          Access(*Private) WithEvents(*Yes)
	DclFld lblClass System.Windows.Forms.Label                           Access(*Private) WithEvents(*Yes)
	DclFld lblStyle System.Windows.Forms.Label                           Access(*Private) WithEvents(*Yes)
	DclFld lblColour System.Windows.Forms.Label                          Access(*Private) WithEvents(*Yes)
	DclFld lblShortDescription System.Windows.Forms.Label                Access(*Private) WithEvents(*Yes)
	DclFld lblLength System.Windows.Forms.Label                          Access(*Private) WithEvents(*Yes)
	DclFld lblHeight System.Windows.Forms.Label                          Access(*Private) WithEvents(*Yes)
	DclFld lblWeight System.Windows.Forms.Label                          Access(*Private) WithEvents(*Yes)
	DclFld lblCasePackType System.Windows.Forms.Label                    Access(*Private) WithEvents(*Yes)
	DclFld lblCasePackQty System.Windows.Forms.Label                     Access(*Private) WithEvents(*Yes)
	DclFld lblSeasonCodeDesc System.Windows.Forms.Label                  Access(*Private) WithEvents(*Yes)
	DclFld lblSeasonCode System.Windows.Forms.Label                      Access(*Private) WithEvents(*Yes)
	DclFld lblCommodityCodeDesc System.Windows.Forms.Label               Access(*Private) WithEvents(*Yes)
	DclFld lblCommodityCode System.Windows.Forms.Label                   Access(*Private) WithEvents(*Yes)
	DclFld lblVendorStyle System.Windows.Forms.Label                     Access(*Private) WithEvents(*Yes)
	DclFld lblVendorDescription System.Windows.Forms.Label               Access(*Private) WithEvents(*Yes)
	DclFld lblColourDescription System.Windows.Forms.Label               Access(*Private) WithEvents(*Yes)
	DclFld lblDevelopedBy System.Windows.Forms.Label                     Access(*Private) WithEvents(*Yes)
	DclFld lblCountryOfOriginDesc System.Windows.Forms.Label             Access(*Private) WithEvents(*Yes)
	DclFld lblCountryOfOrigin System.Windows.Forms.Label                 Access(*Private) WithEvents(*Yes)
	DclFld lblCompostionCode System.Windows.Forms.Label                  Access(*Private) WithEvents(*Yes)
	DclFld lblCharacterCodeDesc System.Windows.Forms.Label               Access(*Private) WithEvents(*Yes)
	DclFld lblCharacterCode System.Windows.Forms.Label                   Access(*Private) WithEvents(*Yes)
	DclFld lblWidth System.Windows.Forms.Label                           Access(*Private) WithEvents(*Yes)
	DclFld btnHelp System.Windows.Forms.Button                           Access(*Private) WithEvents(*Yes)
	DclFld btnRemoveComponent System.Windows.Forms.Button                Access(*Private) WithEvents(*Yes)
	DclFld btnAddComponent System.Windows.Forms.Button                   Access(*Private) WithEvents(*Yes)	
	DclFld btnNext System.Windows.Forms.Button                             Access(*Private) WithEvents(*Yes)
	DclFld btnOK System.Windows.Forms.Button                             Access(*Private) WithEvents(*Yes)
	DclFld btnCancel System.Windows.Forms.Button                         Access(*Private) WithEvents(*Yes)
	DclFld txtShortDescription System.Windows.Forms.TextBox              Access(*Private) WithEvents(*Yes)
	DclFld txtLongDescription System.Windows.Forms.TextBox               Access(*Private) WithEvents(*Yes)
	DclFld txtVendor System.Windows.Forms.TextBox                        Access(*Private) WithEvents(*Yes)
	DclFld txtClass System.Windows.Forms.TextBox                         Access(*Private) WithEvents(*Yes)	
	DclFld txtStyle System.Windows.Forms.TextBox                         Access(*Private) WithEvents(*Yes)
	DclFld txtColour System.Windows.Forms.TextBox                        Access(*Private) WithEvents(*Yes)
	DclFld cmbCasePack System.Windows.Forms.ComboBox                     Access(*Private) WithEvents(*Yes)
	DclFld txtCasePackQty System.Windows.Forms.TextBox			         Access(*Private) WithEvents(*Yes)
	DclFld txtSeasonCode System.Windows.Forms.TextBox			         Access(*Private) WithEvents(*Yes)
	DclFld txtCommodityCode System.Windows.Forms.TextBox		         Access(*Private) WithEvents(*Yes)
	DclFld txtVendorStyle System.Windows.Forms.TextBox			         Access(*Private) WithEvents(*Yes)
	DclFld cmbDevelopedBy System.Windows.Forms.ComboBox			         Access(*Private) WithEvents(*Yes)
	DclFld txtCountryOfOrigin System.Windows.Forms.TextBox		         Access(*Private) WithEvents(*Yes)
	DclFld txtCompositionCode System.Windows.Forms.TextBox		         Access(*Private) WithEvents(*Yes)
	DclFld txtCharacterCode System.Windows.Forms.TextBox		         Access(*Private) WithEvents(*Yes)
	DclFld txtWidth System.Windows.Forms.TextBox				         Access(*Private) WithEvents(*Yes)
	DclFld txtLength System.Windows.Forms.TextBox				         Access(*Private) WithEvents(*Yes)
	DclFld txtHeight System.Windows.Forms.TextBox				         Access(*Private) WithEvents(*Yes)
	DclFld txtWeight System.Windows.Forms.TextBox				         Access(*Private) WithEvents(*Yes)
	DclFld lblCompositionCodeDesc System.Windows.Forms.Label             Access(*Private) WithEvents(*Yes)
	DclFld imageList1 System.Windows.Forms.ImageList                     Access(*Private) WithEvents(*Yes)
	DclFld btnClass System.Windows.Forms.Button                          Access(*Private) WithEvents(*Yes)
	DclFld btnVendor System.Windows.Forms.Button                         Access(*Private) WithEvents(*Yes)
	DclFld btnColour System.Windows.Forms.Button                         Access(*Private) WithEvents(*Yes)
	DclFld btnSeasonCode System.Windows.Forms.Button                     Access(*Private) WithEvents(*Yes)
	DclFld btnCharacterCode System.Windows.Forms.Button                  Access(*Private) WithEvents(*Yes)
	DclFld btnCountryOfOrigin System.Windows.Forms.Button                Access(*Private) WithEvents(*Yes)
	DclFld btnCompositionCode System.Windows.Forms.Button                Access(*Private) WithEvents(*Yes)
	DclFld btnCommodityCode System.Windows.Forms.Button                  Access(*Private) WithEvents(*Yes)
	DclFld txtLongDescPrefix System.Windows.Forms.TextBox                Access(*Private) WithEvents(*Yes)
	DclFld components Type(System.ComponentModel.IContainer) Inz(*Nothing)
			
	BegSr InitializeComponent
		*this.components = *new System.ComponentModel.Container()
		DclFld resources System.ComponentModel.ComponentResourceManager New(*typeof(frmItemAPPAdd))
		DclFld dataGridViewCellStyle1 System.Windows.Forms.DataGridViewCellStyle New(*Dft)
		*this.groupBox13 = *new System.Windows.Forms.GroupBox()
		*this.cmbCasePack = *new System.Windows.Forms.ComboBox()
		*this.txtWidth = *new System.Windows.Forms.TextBox()
		*this.txtLength = *new System.Windows.Forms.TextBox()
		*this.txtHeight = *new System.Windows.Forms.TextBox()
		*this.txtWeight = *new System.Windows.Forms.TextBox()
		*this.lblWidth = *new System.Windows.Forms.Label()
		*this.lblLength = *new System.Windows.Forms.Label()
		*this.lblHeight = *new System.Windows.Forms.Label()
		*this.lblWeight = *new System.Windows.Forms.Label()
		*this.lblCasePackType = *new System.Windows.Forms.Label()
		*this.lblCasePackQty = *new System.Windows.Forms.Label()
		*this.txtCasePackQty = *new System.Windows.Forms.TextBox()
		*this.lblSeasonCodeDesc = *new System.Windows.Forms.Label()
		*this.txtSeasonCode = *new System.Windows.Forms.TextBox()
		*this.lblSeasonCode = *new System.Windows.Forms.Label()
		*this.lblCommodityCodeDesc = *new System.Windows.Forms.Label()
		*this.txtCommodityCode = *new System.Windows.Forms.TextBox()
		*this.lblCommodityCode = *new System.Windows.Forms.Label()
		*this.txtVendorStyle = *new System.Windows.Forms.TextBox()
		*this.lblVendorStyle = *new System.Windows.Forms.Label()
		*this.txtShortDescription = *new System.Windows.Forms.TextBox()
		*this.txtLongDescription = *new System.Windows.Forms.TextBox()
		*this.lblLongDescription = *new System.Windows.Forms.Label()
		*this.lblVendorDescription = *new System.Windows.Forms.Label()
		*this.lblClassDescription = *new System.Windows.Forms.Label()
		*this.txtVendor = *new System.Windows.Forms.TextBox()
		*this.txtClass = *new System.Windows.Forms.TextBox()
		*this.lblVendor = *new System.Windows.Forms.Label()
		*this.lblClass = *new System.Windows.Forms.Label()
		*this.btnRemoveComponent = *new System.Windows.Forms.Button()
		*this.btnAddComponent = *new System.Windows.Forms.Button()
		*this.btnNext = *new System.Windows.Forms.Button()
		*this.btnOK = *new System.Windows.Forms.Button()
		*this.btnCancel = *new System.Windows.Forms.Button()
		*this.btnHelp = *new System.Windows.Forms.Button()
		*this.txtStyle = *new System.Windows.Forms.TextBox()
		*this.lblStyle = *new System.Windows.Forms.Label()
		*this.lblColourDescription = *new System.Windows.Forms.Label()
		*this.txtColour = *new System.Windows.Forms.TextBox()
		*this.lblColour = *new System.Windows.Forms.Label()
		*this.lblShortDescription = *new System.Windows.Forms.Label()
		*this.cmbDevelopedBy = *new System.Windows.Forms.ComboBox()
		*this.lblDevelopedBy = *new System.Windows.Forms.Label()
		*this.lblCountryOfOriginDesc = *new System.Windows.Forms.Label()
		*this.txtCountryOfOrigin = *new System.Windows.Forms.TextBox()
		*this.lblCountryOfOrigin = *new System.Windows.Forms.Label()
		*this.lblCompositionCodeDesc = *new System.Windows.Forms.Label()
		*this.txtCompositionCode = *new System.Windows.Forms.TextBox()
		*this.lblCompostionCode = *new System.Windows.Forms.Label()
		*this.lblCharacterCodeDesc = *new System.Windows.Forms.Label()
		*this.txtCharacterCode = *new System.Windows.Forms.TextBox()
		*this.lblCharacterCode = *new System.Windows.Forms.Label()
		*this.btnClass = *new System.Windows.Forms.Button()
		*this.imageList1 = *new System.Windows.Forms.ImageList(*this.components)
		*this.btnVendor = *new System.Windows.Forms.Button()
		*this.btnColour = *new System.Windows.Forms.Button()
		*this.btnSeasonCode = *new System.Windows.Forms.Button()
		*this.btnCharacterCode = *new System.Windows.Forms.Button()
		*this.btnCountryOfOrigin = *new System.Windows.Forms.Button()
		*this.btnCompositionCode = *new System.Windows.Forms.Button()
		*this.btnCommodityCode = *new System.Windows.Forms.Button()
		*this.txtLongDescPrefix = *new System.Windows.Forms.TextBox()
		*this.clmSelect = *new System.Windows.Forms.DataGridViewCheckBoxColumn()
		*this.dgvItemAPAdd = *new System.Windows.Forms.DataGridView()
		*this.clmClass = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmVendor = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmStyle = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmColour = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmSize = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmDescription = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmColourName = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmSizeName = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmUPC = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmQty = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmCost = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.clmRetail = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.txtSubClass = *new System.Windows.Forms.TextBox()
		*this.lblSubClass = *new System.Windows.Forms.Label()
		*this.cboSellingChannel = *new System.Windows.Forms.ComboBox()
		*this.lblSellingChannel = *new System.Windows.Forms.Label()
		*this.lblAppType = *new System.Windows.Forms.Label()
		*this.cmbAPPType = *new System.Windows.Forms.ComboBox()
		*this.lblBundlePrice = *new System.Windows.Forms.Label()
		*this.txtBundleRetailPrice = *new System.Windows.Forms.TextBox()
		*this.lblMktPricesPrompt = *new System.Windows.Forms.Label()
		*this.bttnMarketPrices = *new System.Windows.Forms.Button()
		*this.dataGridViewTextBoxColumn1 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn2 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn3 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn4 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn5 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn6 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn7 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn8 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn9 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn10 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn11 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.dataGridViewTextBoxColumn12 = *new System.Windows.Forms.DataGridViewTextBoxColumn()
		*this.btnSubClassLookUp = *new System.Windows.Forms.Button()
		*this.cboVATRate = *new System.Windows.Forms.ComboBox()
		*this.lblVATRate = *new System.Windows.Forms.Label()
		*this.txtLocalDescription = *new System.Windows.Forms.TextBox()
		*this.lblDescriptionOther = *new System.Windows.Forms.Label()
		*this.lblLocalLangDesc = *new System.Windows.Forms.Label()
		*this.lblSubClassDescr = *new System.Windows.Forms.Label()
		*this.groupBox13.SuspendLayout()
		(*this.dgvItemAPAdd *As System.ComponentModel.ISupportInitialize).BeginInit()
		*this.SuspendLayout()
		//
		//groupBox13
		//
		*this.groupBox13.Controls.Add(*this.cmbCasePack)
		*this.groupBox13.Controls.Add(*this.txtWidth)
		*this.groupBox13.Controls.Add(*this.txtLength)
		*this.groupBox13.Controls.Add(*this.txtHeight)
		*this.groupBox13.Controls.Add(*this.txtWeight)
		*this.groupBox13.Controls.Add(*this.lblWidth)
		*this.groupBox13.Controls.Add(*this.lblLength)
		*this.groupBox13.Controls.Add(*this.lblHeight)
		*this.groupBox13.Controls.Add(*this.lblWeight)
		*this.groupBox13.Controls.Add(*this.lblCasePackType)
		*this.groupBox13.Controls.Add(*this.lblCasePackQty)
		*this.groupBox13.Controls.Add(*this.txtCasePackQty)
		*this.groupBox13.Location = *new System.Drawing.Point(14, 278)
		*this.groupBox13.Name = "groupBox13"
		*this.groupBox13.Size = *new System.Drawing.Size(826, 50)
		*this.groupBox13.TabIndex = 31
		*this.groupBox13.TabStop = *False
		*this.groupBox13.Text = "Pack/Carton Details"
		//
		//cmbCasePack
		//
		*this.cmbCasePack.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
		*this.cmbCasePack.FormattingEnabled = *True
		*this.cmbCasePack.Items.AddRange(*new System.Object[] {" Please Select....."})
		*this.cmbCasePack.Location = *new System.Drawing.Point(95, 16)
		*this.cmbCasePack.Name = "cmbCasePack"
		*this.cmbCasePack.Size = *new System.Drawing.Size(187, 21)
		*this.cmbCasePack.Sorted = *True
		*this.cmbCasePack.TabIndex = 32
		//
		//txtWidth
		//
		*this.txtWidth.Location = *new System.Drawing.Point(719, 16)
		*this.txtWidth.Name = "txtWidth"
		*this.txtWidth.Size = *new System.Drawing.Size(56, 20)
		*this.txtWidth.TabIndex = 37
		*this.txtWidth.Text = "9999.999"
		//
		//txtLength
		//
		*this.txtLength.Location = *new System.Drawing.Point(633, 16)
		*this.txtLength.Name = "txtLength"
		*this.txtLength.Size = *new System.Drawing.Size(56, 20)
		*this.txtLength.TabIndex = 36
		*this.txtLength.Text = "9999.999"
		//
		//txtHeight
		//
		*this.txtHeight.Location = *new System.Drawing.Point(553, 16)
		*this.txtHeight.Name = "txtHeight"
		*this.txtHeight.Size = *new System.Drawing.Size(52, 20)
		*this.txtHeight.TabIndex = 35
		*this.txtHeight.Text = "9999.999"
		//
		//txtWeight
		//
		*this.txtWeight.Location = *new System.Drawing.Point(464, 16)
		*this.txtWeight.Name = "txtWeight"
		*this.txtWeight.Size = *new System.Drawing.Size(57, 20)
		*this.txtWeight.TabIndex = 34
		*this.txtWeight.Text = "9999.999"
		//
		//lblWidth
		//
		*this.lblWidth.AutoSize = *True
		*this.lblWidth.Location = *new System.Drawing.Point(695, 20)
		*this.lblWidth.Name = "lblWidth"
		*this.lblWidth.Size = *new System.Drawing.Size(18, 13)
		*this.lblWidth.TabIndex = 388
		*this.lblWidth.Text = "W"
		//
		//lblLength
		//
		*this.lblLength.AutoSize = *True
		*this.lblLength.Location = *new System.Drawing.Point(613, 20)
		*this.lblLength.Name = "lblLength"
		*this.lblLength.Size = *new System.Drawing.Size(13, 13)
		*this.lblLength.TabIndex = 387
		*this.lblLength.Text = "L"
		//
		//lblHeight
		//
		*this.lblHeight.AutoSize = *True
		*this.lblHeight.Location = *new System.Drawing.Point(530, 20)
		*this.lblHeight.Name = "lblHeight"
		*this.lblHeight.Size = *new System.Drawing.Size(15, 13)
		*this.lblHeight.TabIndex = 386
		*this.lblHeight.Text = "H"
		//
		//lblWeight
		//
		*this.lblWeight.AutoSize = *True
		*this.lblWeight.Location = *new System.Drawing.Point(418, 20)
		*this.lblWeight.Name = "lblWeight"
		*this.lblWeight.Size = *new System.Drawing.Size(41, 13)
		*this.lblWeight.TabIndex = 385
		*this.lblWeight.Text = "Weight"
		//
		//lblCasePackType
		//
		*this.lblCasePackType.AutoSize = *True
		*this.lblCasePackType.Location = *new System.Drawing.Point(7, 20)
		*this.lblCasePackType.Name = "lblCasePackType"
		*this.lblCasePackType.Size = *new System.Drawing.Size(86, 13)
		*this.lblCasePackType.TabIndex = 379
		*this.lblCasePackType.Text = "Case Pack Type"
		//
		//lblCasePackQty
		//
		*this.lblCasePackQty.AutoSize = *True
		*this.lblCasePackQty.Location = *new System.Drawing.Point(288, 20)
		*this.lblCasePackQty.Name = "lblCasePackQty"
		*this.lblCasePackQty.Size = *new System.Drawing.Size(78, 13)
		*this.lblCasePackQty.TabIndex = 1
		*this.lblCasePackQty.Text = "Case Pack Qty"
		//
		//txtCasePackQty
		//
		*this.txtCasePackQty.Location = *new System.Drawing.Point(372, 16)
		*this.txtCasePackQty.Name = "txtCasePackQty"
		*this.txtCasePackQty.ReadOnly = *True
		*this.txtCasePackQty.Size = *new System.Drawing.Size(41, 20)
		*this.txtCasePackQty.TabIndex = 33
		*this.txtCasePackQty.TabStop = *False
		*this.txtCasePackQty.Text = "1"
		//
		//lblSeasonCodeDesc
		//
		*this.lblSeasonCodeDesc.AutoSize = *True
		*this.lblSeasonCodeDesc.Location = *new System.Drawing.Point(604, 172)
		*this.lblSeasonCodeDesc.Name = "lblSeasonCodeDesc"
		*this.lblSeasonCodeDesc.Size = *new System.Drawing.Size(0, 13)
		*this.lblSeasonCodeDesc.TabIndex = 438
		//
		//txtSeasonCode
		//
		*this.txtSeasonCode.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtSeasonCode.Location = *new System.Drawing.Point(513, 166)
		*this.txtSeasonCode.MaxLength = 4
		*this.txtSeasonCode.Name = "txtSeasonCode"
		*this.txtSeasonCode.Size = *new System.Drawing.Size(55, 20)
		*this.txtSeasonCode.TabIndex = 26
		//
		//lblSeasonCode
		//
		*this.lblSeasonCode.AutoSize = *True
		*this.lblSeasonCode.Location = *new System.Drawing.Point(416, 170)
		*this.lblSeasonCode.Name = "lblSeasonCode"
		*this.lblSeasonCode.Size = *new System.Drawing.Size(71, 13)
		*this.lblSeasonCode.TabIndex = 435
		*this.lblSeasonCode.Text = "Season Code"
		//
		//lblCommodityCodeDesc
		//
		*this.lblCommodityCodeDesc.AutoSize = *True
		*this.lblCommodityCodeDesc.Location = *new System.Drawing.Point(604, 69)
		*this.lblCommodityCodeDesc.Name = "lblCommodityCodeDesc"
		*this.lblCommodityCodeDesc.Size = *new System.Drawing.Size(0, 13)
		*this.lblCommodityCodeDesc.TabIndex = 434
		//
		//txtCommodityCode
		//
		*this.txtCommodityCode.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtCommodityCode.Location = *new System.Drawing.Point(513, 62)
		*this.txtCommodityCode.MaxLength = 2
		*this.txtCommodityCode.Name = "txtCommodityCode"
		*this.txtCommodityCode.Size = *new System.Drawing.Size(55, 20)
		*this.txtCommodityCode.TabIndex = 18
		//
		//lblCommodityCode
		//
		*this.lblCommodityCode.AutoSize = *True
		*this.lblCommodityCode.Location = *new System.Drawing.Point(416, 66)
		*this.lblCommodityCode.Name = "lblCommodityCode"
		*this.lblCommodityCode.Size = *new System.Drawing.Size(86, 13)
		*this.lblCommodityCode.TabIndex = 431
		*this.lblCommodityCode.Text = "Commodity Code"
		//
		//txtVendorStyle
		//
		*this.txtVendorStyle.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtVendorStyle.Location = *new System.Drawing.Point(513, 10)
		*this.txtVendorStyle.MaxLength = 15
		*this.txtVendorStyle.Name = "txtVendorStyle"
		*this.txtVendorStyle.Size = *new System.Drawing.Size(114, 20)
		*this.txtVendorStyle.TabIndex = 16
		*this.txtVendorStyle.Tag = ""
		//
		//lblVendorStyle
		//
		*this.lblVendorStyle.AutoSize = *True
		*this.lblVendorStyle.Location = *new System.Drawing.Point(416, 13)
		*this.lblVendorStyle.Name = "lblVendorStyle"
		*this.lblVendorStyle.Size = *new System.Drawing.Size(67, 13)
		*this.lblVendorStyle.TabIndex = 429
		*this.lblVendorStyle.Text = "Vendor Style"
		//
		//txtShortDescription
		//
		*this.txtShortDescription.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtShortDescription.Location = *new System.Drawing.Point(116, 192)
		*this.txtShortDescription.MaxLength = 9
		*this.txtShortDescription.Name = "txtShortDescription"
		*this.txtShortDescription.Size = *new System.Drawing.Size(59, 20)
		*this.txtShortDescription.TabIndex = 13
		//
		//txtLongDescription
		//
		*this.txtLongDescription.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtLongDescription.Location = *new System.Drawing.Point(178, 166)
		*this.txtLongDescription.MaxLength = 20
		*this.txtLongDescription.Name = "txtLongDescription"
		*this.txtLongDescription.Size = *new System.Drawing.Size(175, 20)
		*this.txtLongDescription.TabIndex = 12
		//
		//lblLongDescription
		//
		*this.lblLongDescription.AutoSize = *True
		*this.lblLongDescription.Location = *new System.Drawing.Point(13, 170)
		*this.lblLongDescription.Name = "lblLongDescription"
		*this.lblLongDescription.Size = *new System.Drawing.Size(87, 13)
		*this.lblLongDescription.TabIndex = 426
		*this.lblLongDescription.Text = "Long Description"
		//
		//lblVendorDescription
		//
		*this.lblVendorDescription.AutoSize = *True
		*this.lblVendorDescription.Location = *new System.Drawing.Point(208, 69)
		*this.lblVendorDescription.Name = "lblVendorDescription"
		*this.lblVendorDescription.Size = *new System.Drawing.Size(0, 13)
		*this.lblVendorDescription.TabIndex = 425
		//
		//lblClassDescription
		//
		*this.lblClassDescription.AutoSize = *True
		*this.lblClassDescription.Location = *new System.Drawing.Point(208, 44)
		*this.lblClassDescription.Name = "lblClassDescription"
		*this.lblClassDescription.Size = *new System.Drawing.Size(0, 13)
		*this.lblClassDescription.TabIndex = 424
		//
		//txtVendor
		//
		*this.txtVendor.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtVendor.Location = *new System.Drawing.Point(116, 62)
		*this.txtVendor.MaxLength = 5
		*this.txtVendor.Name = "txtVendor"
		*this.txtVendor.Size = *new System.Drawing.Size(59, 20)
		*this.txtVendor.TabIndex = 4
		//
		//txtClass
		//
		*this.txtClass.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtClass.Location = *new System.Drawing.Point(116, 36)
		*this.txtClass.MaxLength = 4
		*this.txtClass.Name = "txtClass"
		*this.txtClass.Size = *new System.Drawing.Size(59, 20)
		*this.txtClass.TabIndex = 2
		//
		//lblVendor
		//
		*this.lblVendor.AutoSize = *True
		*this.lblVendor.Location = *new System.Drawing.Point(13, 66)
		*this.lblVendor.Name = "lblVendor"
		*this.lblVendor.Size = *new System.Drawing.Size(41, 13)
		*this.lblVendor.TabIndex = 419
		*this.lblVendor.Text = "Vendor"
		//
		//lblClass
		//
		*this.lblClass.AutoSize = *True
		*this.lblClass.Location = *new System.Drawing.Point(13, 40)
		*this.lblClass.Name = "lblClass"
		*this.lblClass.Size = *new System.Drawing.Size(32, 13)
		*this.lblClass.TabIndex = 418
		*this.lblClass.Text = "Class"
		//
		//btnRemoveComponent
		//
		*this.btnRemoveComponent.Location = *new System.Drawing.Point(289, 578)
		*this.btnRemoveComponent.Name = "btnRemoveComponent"
		*this.btnRemoveComponent.Size = *new System.Drawing.Size(128, 23)
		*this.btnRemoveComponent.TabIndex = 41
		*this.btnRemoveComponent.Text = "Remove Component"
		*this.btnRemoveComponent.UseVisualStyleBackColor = *True
		//
		//btnAddComponent
		//
		*this.btnAddComponent.Location = *new System.Drawing.Point(166, 578)
		*this.btnAddComponent.Name = "btnAddComponent"
		*this.btnAddComponent.Size = *new System.Drawing.Size(117, 23)
		*this.btnAddComponent.TabIndex = 40
		*this.btnAddComponent.Text = "Add Component"
		*this.btnAddComponent.UseVisualStyleBackColor = *True
		//
		//btnNext
		//
		*this.btnNext.Enabled = *False
		*this.btnNext.Location = *new System.Drawing.Point(606, 579)
		*this.btnNext.Name = "btnNext"
		*this.btnNext.Size = *new System.Drawing.Size(75, 23)
		*this.btnNext.TabIndex = 42
		*this.btnNext.Text = "Next"
		*this.btnNext.UseVisualStyleBackColor = *True
		//
		//btnOK
		//
		*this.btnOK.Enabled = *False
		*this.btnOK.Location = *new System.Drawing.Point(685, 579)
		*this.btnOK.Name = "btnOK"
		*this.btnOK.Size = *new System.Drawing.Size(75, 23)
		*this.btnOK.TabIndex = 43
		*this.btnOK.Text = "OK"
		*this.btnOK.UseVisualStyleBackColor = *True
		//
		//btnCancel
		//
		*this.btnCancel.Location = *new System.Drawing.Point(768, 579)
		*this.btnCancel.Name = "btnCancel"
		*this.btnCancel.Size = *new System.Drawing.Size(75, 23)
		*this.btnCancel.TabIndex = 44
		*this.btnCancel.Text = "Cancel"
		*this.btnCancel.UseVisualStyleBackColor = *True
		//
		//btnHelp
		//
		*this.btnHelp.CausesValidation = *False
		*this.btnHelp.Location = *new System.Drawing.Point(17, 578)
		*this.btnHelp.Name = "btnHelp"
		*this.btnHelp.Size = *new System.Drawing.Size(75, 23)
		*this.btnHelp.TabIndex = 39
		*this.btnHelp.Text = "Help"
		*this.btnHelp.UseVisualStyleBackColor = *True
		//
		//txtStyle
		//
		*this.txtStyle.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtStyle.Location = *new System.Drawing.Point(116, 88)
		*this.txtStyle.MaxLength = 4
		*this.txtStyle.Name = "txtStyle"
		*this.txtStyle.Size = *new System.Drawing.Size(59, 20)
		*this.txtStyle.TabIndex = 6
		//
		//lblStyle
		//
		*this.lblStyle.AutoSize = *True
		*this.lblStyle.Location = *new System.Drawing.Point(13, 92)
		*this.lblStyle.Name = "lblStyle"
		*this.lblStyle.Size = *new System.Drawing.Size(30, 13)
		*this.lblStyle.TabIndex = 513
		*this.lblStyle.Text = "Style"
		//
		//lblColourDescription
		//
		*this.lblColourDescription.AutoSize = *True
		*this.lblColourDescription.Location = *new System.Drawing.Point(208, 119)
		*this.lblColourDescription.Name = "lblColourDescription"
		*this.lblColourDescription.Size = *new System.Drawing.Size(0, 13)
		*this.lblColourDescription.TabIndex = 512
		//
		//txtColour
		//
		*this.txtColour.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtColour.Location = *new System.Drawing.Point(116, 114)
		*this.txtColour.MaxLength = 3
		*this.txtColour.Name = "txtColour"
		*this.txtColour.Size = *new System.Drawing.Size(59, 20)
		*this.txtColour.TabIndex = 7
		//
		//lblColour
		//
		*this.lblColour.AutoSize = *True
		*this.lblColour.Location = *new System.Drawing.Point(13, 118)
		*this.lblColour.Name = "lblColour"
		*this.lblColour.Size = *new System.Drawing.Size(37, 13)
		*this.lblColour.TabIndex = 509
		*this.lblColour.Text = "Colour"
		//
		//lblShortDescription
		//
		*this.lblShortDescription.AutoSize = *True
		*this.lblShortDescription.Location = *new System.Drawing.Point(13, 196)
		*this.lblShortDescription.Name = "lblShortDescription"
		*this.lblShortDescription.Size = *new System.Drawing.Size(88, 13)
		*this.lblShortDescription.TabIndex = 516
		*this.lblShortDescription.Text = "Short Description"
		//
		//cmbDevelopedBy
		//
		*this.cmbDevelopedBy.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
		*this.cmbDevelopedBy.FormattingEnabled = *True
		*this.cmbDevelopedBy.Location = *new System.Drawing.Point(513, 35)
		*this.cmbDevelopedBy.Name = "cmbDevelopedBy"
		*this.cmbDevelopedBy.Size = *new System.Drawing.Size(114, 21)
		*this.cmbDevelopedBy.Sorted = *True
		*this.cmbDevelopedBy.TabIndex = 17
		//
		//lblDevelopedBy
		//
		*this.lblDevelopedBy.AutoSize = *True
		*this.lblDevelopedBy.Location = *new System.Drawing.Point(416, 40)
		*this.lblDevelopedBy.Name = "lblDevelopedBy"
		*this.lblDevelopedBy.Size = *new System.Drawing.Size(74, 13)
		*this.lblDevelopedBy.TabIndex = 589
		*this.lblDevelopedBy.Text = "Developed By"
		//
		//lblCountryOfOriginDesc
		//
		*this.lblCountryOfOriginDesc.AutoSize = *True
		*this.lblCountryOfOriginDesc.Location = *new System.Drawing.Point(604, 120)
		*this.lblCountryOfOriginDesc.Name = "lblCountryOfOriginDesc"
		*this.lblCountryOfOriginDesc.Size = *new System.Drawing.Size(0, 13)
		*this.lblCountryOfOriginDesc.TabIndex = 622
		//
		//txtCountryOfOrigin
		//
		*this.txtCountryOfOrigin.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtCountryOfOrigin.Location = *new System.Drawing.Point(513, 114)
		*this.txtCountryOfOrigin.MaxLength = 2
		*this.txtCountryOfOrigin.Name = "txtCountryOfOrigin"
		*this.txtCountryOfOrigin.Size = *new System.Drawing.Size(55, 20)
		*this.txtCountryOfOrigin.TabIndex = 22
		*this.txtCountryOfOrigin.Tag = ""
		//
		//lblCountryOfOrigin
		//
		*this.lblCountryOfOrigin.AutoSize = *True
		*this.lblCountryOfOrigin.Location = *new System.Drawing.Point(416, 118)
		*this.lblCountryOfOrigin.Name = "lblCountryOfOrigin"
		*this.lblCountryOfOrigin.Size = *new System.Drawing.Size(85, 13)
		*this.lblCountryOfOrigin.TabIndex = 619
		*this.lblCountryOfOrigin.Text = "Country of Origin"
		//
		//lblCompositionCodeDesc
		//
		*this.lblCompositionCodeDesc.AutoSize = *True
		*this.lblCompositionCodeDesc.Location = *new System.Drawing.Point(604, 93)
		*this.lblCompositionCodeDesc.Name = "lblCompositionCodeDesc"
		*this.lblCompositionCodeDesc.Size = *new System.Drawing.Size(0, 13)
		*this.lblCompositionCodeDesc.TabIndex = 626
		//
		//txtCompositionCode
		//
		*this.txtCompositionCode.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtCompositionCode.Location = *new System.Drawing.Point(513, 88)
		*this.txtCompositionCode.MaxLength = 3
		*this.txtCompositionCode.Name = "txtCompositionCode"
		*this.txtCompositionCode.Size = *new System.Drawing.Size(55, 20)
		*this.txtCompositionCode.TabIndex = 20
		//
		//lblCompostionCode
		//
		*this.lblCompostionCode.AutoSize = *True
		*this.lblCompostionCode.Location = *new System.Drawing.Point(416, 92)
		*this.lblCompostionCode.Name = "lblCompostionCode"
		*this.lblCompostionCode.Size = *new System.Drawing.Size(92, 13)
		*this.lblCompostionCode.TabIndex = 623
		*this.lblCompostionCode.Text = "Composition Code"
		//
		//lblCharacterCodeDesc
		//
		*this.lblCharacterCodeDesc.AutoSize = *True
		*this.lblCharacterCodeDesc.Location = *new System.Drawing.Point(604, 147)
		*this.lblCharacterCodeDesc.Name = "lblCharacterCodeDesc"
		*this.lblCharacterCodeDesc.Size = *new System.Drawing.Size(0, 13)
		*this.lblCharacterCodeDesc.TabIndex = 637
		//
		//txtCharacterCode
		//
		*this.txtCharacterCode.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtCharacterCode.Location = *new System.Drawing.Point(513, 140)
		*this.txtCharacterCode.MaxLength = 3
		*this.txtCharacterCode.Name = "txtCharacterCode"
		*this.txtCharacterCode.Size = *new System.Drawing.Size(55, 20)
		*this.txtCharacterCode.TabIndex = 24
		//
		//lblCharacterCode
		//
		*this.lblCharacterCode.AutoSize = *True
		*this.lblCharacterCode.Location = *new System.Drawing.Point(416, 144)
		*this.lblCharacterCode.Name = "lblCharacterCode"
		*this.lblCharacterCode.Size = *new System.Drawing.Size(81, 13)
		*this.lblCharacterCode.TabIndex = 634
		*this.lblCharacterCode.Text = "Character Code"
		//
		//btnClass
		//
		*this.btnClass.ImageIndex = 0
		*this.btnClass.ImageList = *this.imageList1
		*this.btnClass.Location = *new System.Drawing.Point(178, 35)
		*this.btnClass.Name = "btnClass"
		*this.btnClass.Size = *new System.Drawing.Size(24, 22)
		*this.btnClass.TabIndex = 3
		*this.btnClass.TabStop = *False
		*this.btnClass.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnClass.UseVisualStyleBackColor = *True
		//
		//imageList1
		//
		*this.imageList1.ImageStream = (resources.GetObject("imageList1.ImageStream") *As System.Windows.Forms.ImageListStreamer)
		*this.imageList1.TransparentColor = System.Drawing.Color.Transparent
		*this.imageList1.Images.SetKeyName(0, "Magnifying-Glass-256x256.png")
		//
		//btnVendor
		//
		*this.btnVendor.ImageIndex = 0
		*this.btnVendor.ImageList = *this.imageList1
		*this.btnVendor.Location = *new System.Drawing.Point(178, 61)
		*this.btnVendor.Name = "btnVendor"
		*this.btnVendor.Size = *new System.Drawing.Size(24, 22)
		*this.btnVendor.TabIndex = 5
		*this.btnVendor.TabStop = *False
		*this.btnVendor.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnVendor.UseVisualStyleBackColor = *True
		//
		//btnColour
		//
		*this.btnColour.ImageIndex = 0
		*this.btnColour.ImageList = *this.imageList1
		*this.btnColour.Location = *new System.Drawing.Point(178, 113)
		*this.btnColour.Name = "btnColour"
		*this.btnColour.Size = *new System.Drawing.Size(24, 22)
		*this.btnColour.TabIndex = 8
		*this.btnColour.TabStop = *False
		*this.btnColour.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnColour.UseVisualStyleBackColor = *True
		//
		//btnSeasonCode
		//
		*this.btnSeasonCode.ImageIndex = 0
		*this.btnSeasonCode.ImageList = *this.imageList1
		*this.btnSeasonCode.Location = *new System.Drawing.Point(572, 165)
		*this.btnSeasonCode.Name = "btnSeasonCode"
		*this.btnSeasonCode.Size = *new System.Drawing.Size(24, 22)
		*this.btnSeasonCode.TabIndex = 27
		*this.btnSeasonCode.TabStop = *False
		*this.btnSeasonCode.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnSeasonCode.UseVisualStyleBackColor = *True
		//
		//btnCharacterCode
		//
		*this.btnCharacterCode.ImageIndex = 0
		*this.btnCharacterCode.ImageList = *this.imageList1
		*this.btnCharacterCode.Location = *new System.Drawing.Point(572, 139)
		*this.btnCharacterCode.Name = "btnCharacterCode"
		*this.btnCharacterCode.Size = *new System.Drawing.Size(24, 22)
		*this.btnCharacterCode.TabIndex = 25
		*this.btnCharacterCode.TabStop = *False
		*this.btnCharacterCode.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnCharacterCode.UseVisualStyleBackColor = *True
		//
		//btnCountryOfOrigin
		//
		*this.btnCountryOfOrigin.ImageIndex = 0
		*this.btnCountryOfOrigin.ImageList = *this.imageList1
		*this.btnCountryOfOrigin.Location = *new System.Drawing.Point(572, 113)
		*this.btnCountryOfOrigin.Name = "btnCountryOfOrigin"
		*this.btnCountryOfOrigin.Size = *new System.Drawing.Size(24, 22)
		*this.btnCountryOfOrigin.TabIndex = 23
		*this.btnCountryOfOrigin.TabStop = *False
		*this.btnCountryOfOrigin.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnCountryOfOrigin.UseVisualStyleBackColor = *True
		//
		//btnCompositionCode
		//
		*this.btnCompositionCode.ImageIndex = 0
		*this.btnCompositionCode.ImageList = *this.imageList1
		*this.btnCompositionCode.Location = *new System.Drawing.Point(572, 87)
		*this.btnCompositionCode.Name = "btnCompositionCode"
		*this.btnCompositionCode.Size = *new System.Drawing.Size(24, 22)
		*this.btnCompositionCode.TabIndex = 21
		*this.btnCompositionCode.TabStop = *False
		*this.btnCompositionCode.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnCompositionCode.UseVisualStyleBackColor = *True
		//
		//btnCommodityCode
		//
		*this.btnCommodityCode.ImageIndex = 0
		*this.btnCommodityCode.ImageList = *this.imageList1
		*this.btnCommodityCode.Location = *new System.Drawing.Point(572, 61)
		*this.btnCommodityCode.Name = "btnCommodityCode"
		*this.btnCommodityCode.Size = *new System.Drawing.Size(24, 22)
		*this.btnCommodityCode.TabIndex = 19
		*this.btnCommodityCode.TabStop = *False
		*this.btnCommodityCode.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnCommodityCode.UseVisualStyleBackColor = *True
		//
		//txtLongDescPrefix
		//
		*this.txtLongDescPrefix.Enabled = *False
		*this.txtLongDescPrefix.Location = *new System.Drawing.Point(116, 166)
		*this.txtLongDescPrefix.MaxLength = 5
		*this.txtLongDescPrefix.Name = "txtLongDescPrefix"
		*this.txtLongDescPrefix.Size = *new System.Drawing.Size(59, 20)
		*this.txtLongDescPrefix.TabIndex = 11
		//
		//clmSelect
		//
		*this.clmSelect.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmSelect.Frozen = *True
		*this.clmSelect.HeaderText = "Select"
		*this.clmSelect.MinimumWidth = 40
		*this.clmSelect.Name = "clmSelect"
		*this.clmSelect.Width = 40
		//
		//dgvItemAPAdd
		//
		*this.dgvItemAPAdd.AllowUserToDeleteRows = *False
		dataGridViewCellStyle1.BackColor = System.Drawing.Color.FromArgb(((192 *As System.Byte) *As *Integer4), ((255 *As System.Byte) *As *Integer4), ((192 *As System.Byte) *As *Integer4))
		*this.dgvItemAPAdd.AlternatingRowsDefaultCellStyle = dataGridViewCellStyle1
		*this.dgvItemAPAdd.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize
		*this.dgvItemAPAdd.Columns.AddRange(*new System.Windows.Forms.DataGridViewColumn[] {*this.clmSelect, *this.clmClass, *this.clmVendor, *this.clmStyle, *this.clmColour, *this.clmSize, *this.clmDescription, *this.clmColourName, *this.clmSizeName, *this.clmUPC, *this.clmQty, *this.clmCost, *this.clmRetail})
		*this.dgvItemAPAdd.Location = *new System.Drawing.Point(15, 345)
		*this.dgvItemAPAdd.Name = "dgvItemAPAdd"
		*this.dgvItemAPAdd.Size = *new System.Drawing.Size(826, 224)
		*this.dgvItemAPAdd.TabIndex = 38
		//
		//clmClass
		//
		*this.clmClass.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmClass.Frozen = *True
		*this.clmClass.HeaderText = "Class"
		*this.clmClass.MaxInputLength = 4
		*this.clmClass.MinimumWidth = 50
		*this.clmClass.Name = "clmClass"
		*this.clmClass.Width = 50
		//
		//clmVendor
		//
		*this.clmVendor.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmVendor.Frozen = *True
		*this.clmVendor.HeaderText = "Vendor"
		*this.clmVendor.MaxInputLength = 5
		*this.clmVendor.MinimumWidth = 50
		*this.clmVendor.Name = "clmVendor"
		*this.clmVendor.ReadOnly = *True
		*this.clmVendor.Width = 50
		//
		//clmStyle
		//
		*this.clmStyle.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmStyle.FillWeight = 308.772
		*this.clmStyle.HeaderText = "Style"
		*this.clmStyle.MaxInputLength = 4
		*this.clmStyle.MinimumWidth = 50
		*this.clmStyle.Name = "clmStyle"
		*this.clmStyle.Width = 50
		//
		//clmColour
		//
		*this.clmColour.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmColour.FillWeight = 12.07919
		*this.clmColour.HeaderText = "Colour"
		*this.clmColour.MaxInputLength = 3
		*this.clmColour.MinimumWidth = 50
		*this.clmColour.Name = "clmColour"
		*this.clmColour.Width = 50
		//
		//clmSize
		//
		*this.clmSize.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmSize.FillWeight = 18.51036
		*this.clmSize.HeaderText = "Size"
		*this.clmSize.MaxInputLength = 4
		*this.clmSize.MinimumWidth = 50
		*this.clmSize.Name = "clmSize"
		*this.clmSize.Width = 50
		//
		//clmDescription
		//
		*this.clmDescription.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmDescription.FillWeight = 28.98399
		*this.clmDescription.HeaderText = "Description"
		*this.clmDescription.MinimumWidth = 133
		*this.clmDescription.Name = "clmDescription"
		*this.clmDescription.ReadOnly = *True
		*this.clmDescription.Width = 133
		//
		//clmColourName
		//
		*this.clmColourName.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmColourName.FillWeight = 46.04103
		*this.clmColourName.HeaderText = "Color Name"
		*this.clmColourName.MinimumWidth = 100
		*this.clmColourName.Name = "clmColourName"
		*this.clmColourName.ReadOnly = *True
		//
		//clmSizeName
		//
		*this.clmSizeName.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmSizeName.FillWeight = 73.81965
		*this.clmSizeName.HeaderText = "Size Name"
		*this.clmSizeName.MinimumWidth = 100
		*this.clmSizeName.Name = "clmSizeName"
		*this.clmSizeName.ReadOnly = *True
		//
		//clmUPC
		//
		*this.clmUPC.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmUPC.FillWeight = 119.0591
		*this.clmUPC.HeaderText = "UPC"
		*this.clmUPC.MinimumWidth = 100
		*this.clmUPC.Name = "clmUPC"
		*this.clmUPC.ReadOnly = *True
		//
		//clmQty
		//
		*this.clmQty.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.clmQty.FillWeight = 192.7348
		*this.clmQty.HeaderText = "Quantity"
		*this.clmQty.MinimumWidth = 60
		*this.clmQty.Name = "clmQty"
		*this.clmQty.Width = 60
		//
		//clmCost
		//
		*this.clmCost.HeaderText = "Cost"
		*this.clmCost.Name = "clmCost"
		*this.clmCost.ReadOnly = *True
		*this.clmCost.Visible = *False
		//
		//clmRetail
		//
		*this.clmRetail.HeaderText = "Retail"
		*this.clmRetail.Name = "clmRetail"
		*this.clmRetail.ReadOnly = *True
		*this.clmRetail.Visible = *False
		//
		//txtSubClass
		//
		*this.txtSubClass.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtSubClass.Location = *new System.Drawing.Point(116, 140)
		*this.txtSubClass.MaxLength = 4
		*this.txtSubClass.Name = "txtSubClass"
		*this.txtSubClass.Size = *new System.Drawing.Size(59, 20)
		*this.txtSubClass.TabIndex = 9
		//
		//lblSubClass
		//
		*this.lblSubClass.AutoSize = *True
		*this.lblSubClass.Location = *new System.Drawing.Point(13, 144)
		*this.lblSubClass.Name = "lblSubClass"
		*this.lblSubClass.Size = *new System.Drawing.Size(54, 13)
		*this.lblSubClass.TabIndex = 655
		*this.lblSubClass.Text = "Sub Class"
		//
		//cboSellingChannel
		//
		*this.cboSellingChannel.DropDownWidth = 250
		*this.cboSellingChannel.FormattingEnabled = *True
		*this.cboSellingChannel.ItemHeight = 13
		*this.cboSellingChannel.Location = *new System.Drawing.Point(116, 243)
		*this.cboSellingChannel.Name = "cboSellingChannel"
		*this.cboSellingChannel.Size = *new System.Drawing.Size(120, 21)
		*this.cboSellingChannel.TabIndex = 15
		//
		//lblSellingChannel
		//
		*this.lblSellingChannel.AutoSize = *True
		*this.lblSellingChannel.Location = *new System.Drawing.Point(13, 247)
		*this.lblSellingChannel.Name = "lblSellingChannel"
		*this.lblSellingChannel.Size = *new System.Drawing.Size(91, 13)
		*this.lblSellingChannel.TabIndex = 680
		*this.lblSellingChannel.Text = "Selling Channel(s)"
		//
		//lblAppType
		//
		*this.lblAppType.AutoSize = *True
		*this.lblAppType.Location = *new System.Drawing.Point(13, 13)
		*this.lblAppType.Name = "lblAppType"
		*this.lblAppType.Size = *new System.Drawing.Size(55, 13)
		*this.lblAppType.TabIndex = 679
		*this.lblAppType.Text = "APP Type"
		//
		//cmbAPPType
		//
		*this.cmbAPPType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
		*this.cmbAPPType.FormattingEnabled = *True
		*this.cmbAPPType.Location = *new System.Drawing.Point(116, 9)
		*this.cmbAPPType.Name = "cmbAPPType"
		*this.cmbAPPType.Size = *new System.Drawing.Size(189, 21)
		*this.cmbAPPType.TabIndex = 1
		//
		//lblBundlePrice
		//
		*this.lblBundlePrice.AutoSize = *True
		*this.lblBundlePrice.Location = *new System.Drawing.Point(416, 196)
		*this.lblBundlePrice.Name = "lblBundlePrice"
		*this.lblBundlePrice.Size = *new System.Drawing.Size(61, 13)
		*this.lblBundlePrice.TabIndex = 682
		*this.lblBundlePrice.Text = "Retail Price"
		//
		//txtBundleRetailPrice
		//
		*this.txtBundleRetailPrice.Location = *new System.Drawing.Point(513, 192)
		*this.txtBundleRetailPrice.Name = "txtBundleRetailPrice"
		*this.txtBundleRetailPrice.Size = *new System.Drawing.Size(55, 20)
		*this.txtBundleRetailPrice.TabIndex = 28
		*this.txtBundleRetailPrice.Text = "0.00"
		//
		//lblMktPricesPrompt
		//
		*this.lblMktPricesPrompt.AutoSize = *True
		*this.lblMktPricesPrompt.ForeColor = System.Drawing.Color.Red
		*this.lblMktPricesPrompt.Location = *new System.Drawing.Point(597, 196)
		*this.lblMktPricesPrompt.Name = "lblMktPricesPrompt"
		*this.lblMktPricesPrompt.Size = *new System.Drawing.Size(248, 13)
		*this.lblMktPricesPrompt.TabIndex = 0
		*this.lblMktPricesPrompt.Text = "Please check the market prices before proceeding."
		*this.lblMktPricesPrompt.Visible = *False
		//
		//bttnMarketPrices
		//
		*this.bttnMarketPrices.Font = *new System.Drawing.Font("Microsoft Sans Serif", 8.25, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, (0 *As System.Byte))
		*this.bttnMarketPrices.Location = *new System.Drawing.Point(572, 191)
		*this.bttnMarketPrices.Name = "bttnMarketPrices"
		*this.bttnMarketPrices.Size = *new System.Drawing.Size(24, 22)
		*this.bttnMarketPrices.TabIndex = 29
		*this.bttnMarketPrices.Text = "..."
		*this.bttnMarketPrices.UseVisualStyleBackColor = *True
		//
		//dataGridViewTextBoxColumn1
		//
		*this.dataGridViewTextBoxColumn1.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn1.Frozen = *True
		*this.dataGridViewTextBoxColumn1.HeaderText = "Class"
		*this.dataGridViewTextBoxColumn1.MaxInputLength = 4
		*this.dataGridViewTextBoxColumn1.MinimumWidth = 50
		*this.dataGridViewTextBoxColumn1.Name = "dataGridViewTextBoxColumn1"
		*this.dataGridViewTextBoxColumn1.Width = 50
		//
		//dataGridViewTextBoxColumn2
		//
		*this.dataGridViewTextBoxColumn2.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn2.Frozen = *True
		*this.dataGridViewTextBoxColumn2.HeaderText = "Vendor"
		*this.dataGridViewTextBoxColumn2.MaxInputLength = 5
		*this.dataGridViewTextBoxColumn2.MinimumWidth = 50
		*this.dataGridViewTextBoxColumn2.Name = "dataGridViewTextBoxColumn2"
		*this.dataGridViewTextBoxColumn2.ReadOnly = *True
		*this.dataGridViewTextBoxColumn2.Width = 50
		//
		//dataGridViewTextBoxColumn3
		//
		*this.dataGridViewTextBoxColumn3.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn3.FillWeight = 308.772
		*this.dataGridViewTextBoxColumn3.HeaderText = "Style"
		*this.dataGridViewTextBoxColumn3.MaxInputLength = 4
		*this.dataGridViewTextBoxColumn3.MinimumWidth = 50
		*this.dataGridViewTextBoxColumn3.Name = "dataGridViewTextBoxColumn3"
		*this.dataGridViewTextBoxColumn3.Width = 50
		//
		//dataGridViewTextBoxColumn4
		//
		*this.dataGridViewTextBoxColumn4.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn4.FillWeight = 12.07919
		*this.dataGridViewTextBoxColumn4.HeaderText = "Colour"
		*this.dataGridViewTextBoxColumn4.MaxInputLength = 3
		*this.dataGridViewTextBoxColumn4.MinimumWidth = 50
		*this.dataGridViewTextBoxColumn4.Name = "dataGridViewTextBoxColumn4"
		*this.dataGridViewTextBoxColumn4.Width = 50
		//
		//dataGridViewTextBoxColumn5
		//
		*this.dataGridViewTextBoxColumn5.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn5.FillWeight = 18.51036
		*this.dataGridViewTextBoxColumn5.HeaderText = "Size"
		*this.dataGridViewTextBoxColumn5.MaxInputLength = 4
		*this.dataGridViewTextBoxColumn5.MinimumWidth = 50
		*this.dataGridViewTextBoxColumn5.Name = "dataGridViewTextBoxColumn5"
		*this.dataGridViewTextBoxColumn5.Width = 50
		//
		//dataGridViewTextBoxColumn6
		//
		*this.dataGridViewTextBoxColumn6.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn6.FillWeight = 28.98399
		*this.dataGridViewTextBoxColumn6.HeaderText = "Description"
		*this.dataGridViewTextBoxColumn6.MinimumWidth = 133
		*this.dataGridViewTextBoxColumn6.Name = "dataGridViewTextBoxColumn6"
		*this.dataGridViewTextBoxColumn6.ReadOnly = *True
		*this.dataGridViewTextBoxColumn6.Width = 133
		//
		//dataGridViewTextBoxColumn7
		//
		*this.dataGridViewTextBoxColumn7.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn7.FillWeight = 46.04103
		*this.dataGridViewTextBoxColumn7.HeaderText = "Color Name"
		*this.dataGridViewTextBoxColumn7.MinimumWidth = 100
		*this.dataGridViewTextBoxColumn7.Name = "dataGridViewTextBoxColumn7"
		*this.dataGridViewTextBoxColumn7.ReadOnly = *True
		//
		//dataGridViewTextBoxColumn8
		//
		*this.dataGridViewTextBoxColumn8.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn8.FillWeight = 73.81965
		*this.dataGridViewTextBoxColumn8.HeaderText = "Size Name"
		*this.dataGridViewTextBoxColumn8.MinimumWidth = 100
		*this.dataGridViewTextBoxColumn8.Name = "dataGridViewTextBoxColumn8"
		*this.dataGridViewTextBoxColumn8.ReadOnly = *True
		//
		//dataGridViewTextBoxColumn9
		//
		*this.dataGridViewTextBoxColumn9.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn9.FillWeight = 119.0591
		*this.dataGridViewTextBoxColumn9.HeaderText = "UPC"
		*this.dataGridViewTextBoxColumn9.MinimumWidth = 100
		*this.dataGridViewTextBoxColumn9.Name = "dataGridViewTextBoxColumn9"
		*this.dataGridViewTextBoxColumn9.ReadOnly = *True
		//
		//dataGridViewTextBoxColumn10
		//
		*this.dataGridViewTextBoxColumn10.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None
		*this.dataGridViewTextBoxColumn10.FillWeight = 192.7348
		*this.dataGridViewTextBoxColumn10.HeaderText = "Quantity"
		*this.dataGridViewTextBoxColumn10.MinimumWidth = 60
		*this.dataGridViewTextBoxColumn10.Name = "dataGridViewTextBoxColumn10"
		*this.dataGridViewTextBoxColumn10.Width = 60
		//
		//dataGridViewTextBoxColumn11
		//
		*this.dataGridViewTextBoxColumn11.HeaderText = "Cost"
		*this.dataGridViewTextBoxColumn11.Name = "dataGridViewTextBoxColumn11"
		*this.dataGridViewTextBoxColumn11.ReadOnly = *True
		*this.dataGridViewTextBoxColumn11.Visible = *False
		//
		//dataGridViewTextBoxColumn12
		//
		*this.dataGridViewTextBoxColumn12.HeaderText = "Retail"
		*this.dataGridViewTextBoxColumn12.Name = "dataGridViewTextBoxColumn12"
		*this.dataGridViewTextBoxColumn12.ReadOnly = *True
		*this.dataGridViewTextBoxColumn12.Visible = *False
		//
		//btnSubClassLookUp
		//
		*this.btnSubClassLookUp.ImageIndex = 0
		*this.btnSubClassLookUp.ImageList = *this.imageList1
		*this.btnSubClassLookUp.Location = *new System.Drawing.Point(178, 138)
		*this.btnSubClassLookUp.Name = "btnSubClassLookUp"
		*this.btnSubClassLookUp.Size = *new System.Drawing.Size(24, 22)
		*this.btnSubClassLookUp.TabIndex = 10
		*this.btnSubClassLookUp.TabStop = *False
		*this.btnSubClassLookUp.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText
		*this.btnSubClassLookUp.UseVisualStyleBackColor = *True
		//
		//cboVATRate
		//
		*this.cboVATRate.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
		*this.cboVATRate.DropDownWidth = 250
		*this.cboVATRate.FormattingEnabled = *True
		*this.cboVATRate.Location = *new System.Drawing.Point(513, 218)
		*this.cboVATRate.Name = "cboVATRate"
		*this.cboVATRate.Size = *new System.Drawing.Size(55, 21)
		*this.cboVATRate.TabIndex = 30
		*this.cboVATRate.Visible = *False
		//
		//lblVATRate
		//
		*this.lblVATRate.AutoSize = *True
		*this.lblVATRate.Location = *new System.Drawing.Point(416, 222)
		*this.lblVATRate.Name = "lblVATRate"
		*this.lblVATRate.Size = *new System.Drawing.Size(54, 13)
		*this.lblVATRate.TabIndex = 693
		*this.lblVATRate.Text = "VAT Rate"
		*this.lblVATRate.Visible = *False
		//
		//txtLocalDescription
		//
		*this.txtLocalDescription.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper
		*this.txtLocalDescription.Location = *new System.Drawing.Point(116, 218)
		*this.txtLocalDescription.MaxLength = 20
		*this.txtLocalDescription.Name = "txtLocalDescription"
		*this.txtLocalDescription.Size = *new System.Drawing.Size(175, 20)
		*this.txtLocalDescription.TabIndex = 14
		//
		//lblDescriptionOther
		//
		*this.lblDescriptionOther.AutoSize = *True
		*this.lblDescriptionOther.Location = *new System.Drawing.Point(14, 222)
		*this.lblDescriptionOther.Name = "lblDescriptionOther"
		*this.lblDescriptionOther.Size = *new System.Drawing.Size(93, 13)
		*this.lblDescriptionOther.TabIndex = 697
		*this.lblDescriptionOther.Text = "Description (other)"
		//
		//lblLocalLangDesc
		//
		*this.lblLocalLangDesc.AutoSize = *True
		*this.lblLocalLangDesc.Font = *new System.Drawing.Font("Microsoft Sans Serif", 8.25, System.Drawing.FontStyle.Italic, System.Drawing.GraphicsUnit.Point, (0 *As System.Byte))
		*this.lblLocalLangDesc.Location = *new System.Drawing.Point(296, 222)
		*this.lblLocalLangDesc.Name = "lblLocalLangDesc"
		*this.lblLocalLangDesc.Size = *new System.Drawing.Size(45, 13)
		*this.lblLocalLangDesc.TabIndex = 0
		*this.lblLocalLangDesc.Text = "Chinese"
		//
		//lblSubClassDescr
		//
		*this.lblSubClassDescr.AutoSize = *True
		*this.lblSubClassDescr.Location = *new System.Drawing.Point(208, 144)
		*this.lblSubClassDescr.Name = "lblSubClassDescr"
		*this.lblSubClassDescr.Size = *new System.Drawing.Size(0, 13)
		*this.lblSubClassDescr.TabIndex = 2124
		//
		//frmItemAPPAdd
		//
		*this.AutoScaleDimensions = *new System.Drawing.SizeF(6, 13)
		*this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
		*this.ClientSize = *new System.Drawing.Size(859, 613)
		*this.Controls.Add(*this.lblSubClassDescr)
		*this.Controls.Add(*this.lblLocalLangDesc)
		*this.Controls.Add(*this.txtLocalDescription)
		*this.Controls.Add(*this.lblDescriptionOther)
		*this.Controls.Add(*this.lblVATRate)
		*this.Controls.Add(*this.cboVATRate)
		*this.Controls.Add(*this.btnSubClassLookUp)
		*this.Controls.Add(*this.lblMktPricesPrompt)
		*this.Controls.Add(*this.bttnMarketPrices)
		*this.Controls.Add(*this.txtBundleRetailPrice)
		*this.Controls.Add(*this.lblBundlePrice)
		*this.Controls.Add(*this.cboSellingChannel)
		*this.Controls.Add(*this.lblSellingChannel)
		*this.Controls.Add(*this.lblAppType)
		*this.Controls.Add(*this.cmbAPPType)
		*this.Controls.Add(*this.lblSubClass)
		*this.Controls.Add(*this.txtSubClass)
		*this.Controls.Add(*this.txtLongDescPrefix)
		*this.Controls.Add(*this.btnCommodityCode)
		*this.Controls.Add(*this.btnCompositionCode)
		*this.Controls.Add(*this.btnCountryOfOrigin)
		*this.Controls.Add(*this.btnCharacterCode)
		*this.Controls.Add(*this.btnSeasonCode)
		*this.Controls.Add(*this.btnColour)
		*this.Controls.Add(*this.btnVendor)
		*this.Controls.Add(*this.btnClass)
		*this.Controls.Add(*this.lblCharacterCodeDesc)
		*this.Controls.Add(*this.txtCharacterCode)
		*this.Controls.Add(*this.lblCharacterCode)
		*this.Controls.Add(*this.lblCompositionCodeDesc)
		*this.Controls.Add(*this.txtCompositionCode)
		*this.Controls.Add(*this.lblCompostionCode)
		*this.Controls.Add(*this.lblCountryOfOriginDesc)
		*this.Controls.Add(*this.txtCountryOfOrigin)
		*this.Controls.Add(*this.lblCountryOfOrigin)
		*this.Controls.Add(*this.cmbDevelopedBy)
		*this.Controls.Add(*this.lblDevelopedBy)
		*this.Controls.Add(*this.lblShortDescription)
		*this.Controls.Add(*this.txtStyle)
		*this.Controls.Add(*this.lblStyle)
		*this.Controls.Add(*this.lblColourDescription)
		*this.Controls.Add(*this.txtColour)
		*this.Controls.Add(*this.lblColour)
		*this.Controls.Add(*this.btnRemoveComponent)
		*this.Controls.Add(*this.btnAddComponent)
		*this.Controls.Add(*this.btnNext)
		*this.Controls.Add(*this.btnOK)
		*this.Controls.Add(*this.btnCancel)
		*this.Controls.Add(*this.btnHelp)
		*this.Controls.Add(*this.groupBox13)
		*this.Controls.Add(*this.dgvItemAPAdd)
		*this.Controls.Add(*this.lblSeasonCodeDesc)
		*this.Controls.Add(*this.txtSeasonCode)
		*this.Controls.Add(*this.lblSeasonCode)
		*this.Controls.Add(*this.lblCommodityCodeDesc)
		*this.Controls.Add(*this.txtCommodityCode)
		*this.Controls.Add(*this.lblCommodityCode)
		*this.Controls.Add(*this.txtVendorStyle)
		*this.Controls.Add(*this.lblVendorStyle)
		*this.Controls.Add(*this.txtShortDescription)
		*this.Controls.Add(*this.txtLongDescription)
		*this.Controls.Add(*this.lblLongDescription)
		*this.Controls.Add(*this.lblVendorDescription)
		*this.Controls.Add(*this.lblClassDescription)
		*this.Controls.Add(*this.txtVendor)
		*this.Controls.Add(*this.txtClass)
		*this.Controls.Add(*this.lblVendor)
		*this.Controls.Add(*this.lblClass)
		*this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle
		*this.MaximizeBox = *False
		*this.Name = "frmItemAPPAdd"
		*this.ShowIcon = *False
		*this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide
		*this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
		*this.Text = "SPICE - Item Management - Add Assorted Pre-Pack"
		*this.groupBox13.ResumeLayout(*False)
		*this.groupBox13.PerformLayout()
		(*this.dgvItemAPAdd *As System.ComponentModel.ISupportInitialize).EndInit()
		*this.ResumeLayout(*False)
		*this.PerformLayout()
	EndSr
		
	BegSr Dispose Access(*Protected) Modifier(*Overrides)
		DclSrParm disposing Type(*Boolean)

		If (disposing *And (components *NE *Nothing))
			components.Dispose()
		EndIf
			
		*Base.Dispose(disposing)
	EndSr
/Endregion

	BegFunc SelectMarkets Type(Boolean) Access(*Private)
		
		DclFld MktList Type(StringBuilder)
		DclFld result  Type(Boolean) Inz(*False)
		
		MktList = *New StringBuilder()
		
		Try
			ItemsBO.GetDomainMarketsTbl()
			dv = *New DataView(ItemsBO.SpiceDataSet.Tables("DomainMarkets"))
			ForEach market Collection(dv) Type(DataRowView)
				MktList.Append(market["IPMarket"] *As String)
				MktList.Append(",")
			EndFor
			
			If MktList.Length > *Zero
				MktList.Remove(MktList.Length-1,1)
				ItemsBO.SelectedMarkets = MktList.ToString()
				result = *True
			EndIf			
		Catch Name(exc) Type(Exception)
			//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
		EndTry
		LeaveSR result
	EndFunc

	BegSr frmItemAPAdd_Load Access(*Private) Event(*this.Load)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs   
        
        DclFld dt Type(DataTable)
        				
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		SetMousePtr *HourGlass
		
		//Disable the Remove Components Button and the OK Button until needed
		btnRemoveComponent.Enabled = *False
		btnAddComponent.Enabled    = *False
		dgvItemAPAdd.Enabled       = *False
		
		//Prefil Colour and Style with 0
		txtStyle.Text  = '0'
		txtColour.Text = '0'
		Style = Convert.ToInt16(txtStyle.Text.ToString())
									
		//Limit Commodity Code and Composition Code Entry for TDSNA
		//If Domain = 'SWNA' // JB: Change for China - Sep 2011 
		If (DataCache.IsCommodityCodeEditable = *False)
			txtCommodityCode.Text    = '*'
			txtCommodityCode.Enabled = *False
			btnCommodityCode.Enabled = *False
		Else
			txtCommodityCode.Enabled = *True
			btnCommodityCode.Enabled = *True
		EndIf
		
		If (DataCache.IsCompositionCodeEditable = *False)
			txtCompositionCode.Text    = '*'
			txtCompositionCode.Enabled = *False
			btnCompositionCode.Enabled = *False
		Else
			txtCompositionCode.Enabled = *True
			btnCompositionCode.Enabled = *True
		Endif
					
		If CasePack = *Nothing
			CasePack = *New CasePack(PgmDB, Environment)
		EndIf
		
		// Get Data Tables
		ItemsBO.PackOverrideable = ""
		CasePackTbl = CasePack.GetCasePackTbl()
		ItemsBO.GetAPPTypesTbl()
		If (SelectMarkets() = *False)
			MsgBox TITLE('Information needed') Msg('Markets could not be found for this item. Please use the item update.') ICON(*Exclamation)
		EndIf
		ItemsBO.GetLicenceTbl()
		ItemsBO.GetVATRatesTbl()	
		ItemsBO.GenerateRetailPriceTbl(0,*False,*True)
		ItemsBO.GetMarketSizeTbl(*False) // retrieve for ALL domain markets
		
		// Get the Master Market
		MarketTbl   = ItemsBO.SpiceDataSet.Tables("DomainMarkets")
		MarketTblDV = *New DataView(MarketTbl)
		
		ForEach MarketRow Collection(MarketTblDV) Type(DataRowView)
			If MarketRow.Item["IPMasterMarket"].ToString() = 'Y'
				MasterMarket  = MarketRow.Item["IPMarket"].ToString().Trim()
			Endif
		EndFor						
								
		// App Types
		cmbAPPType.DataSource = ItemsBO.SpiceDataSet.Tables("APPTypesTbl")
		cmbAPPType.DisplayMember = "TypeDescription"						
		cmbAPPType.ValueMember = "AppType"	
		Addhandler SourceObject(cmbAPPType) HandlerSr(cmbAPPType_TextChanged) SourceEvent(TextChanged)
		     cmbAPPType.Text = String.Empty //PreSelects the first item on the list		

		cmbAPPType.SelectedValue = "D" 
		APPType = cmbAPPType.Text.Substring(0,1)
		
		// Case Pack
		cmbCasePack.DataSource = CasePackTbl
		cmbCasePack.DisplayMember = "PackCodeDescription"						
		Addhandler SourceObject(cmbCasePack) HandlerSr(cmbCasePack_TextChanged) SourceEvent(TextChanged)
		     cmbCasePack.Text = String.Empty //PreSelects the first item on the list
				
		// Developed by ComboBox
		cmbDevelopedBy.DataSource    = ItemsBO.SpiceDataSet.Tables("FilteredLicence")
		cmbDevelopedBy.DisplayMember = "CodeDescription"		
		AddHandler SourceObject(cmbDevelopedBy) HandlerSr(cmbDevelopedBy_TextChanged) SourceEvent(TextChanged)
			cmbDevelopedBy.Text = String.Empty //PreSelects the first item on the list
		
		//If (Domain = 'EMEA')
		If (DataCache.IsVATRequired = *True)
			cboVATRate.DataSource = GetMarketVatCodes(MasterMarket)//ItemsBO.MarketName)
			cboVATRate.DisplayMember = "ItemVATcode"
			cboVATRate.ValueMember = "ItemVATcode"	
			lblVATRate.Text = lblVATRate.Text + ' - ' + MasterMarket	
		EndIf
			
		lblBundlePrice.Text = lblBundlePrice.Text + ' - ' + ItemsBO.BaseCurrency		
		
		If(APPType = "B")
			cboSellingChannel.Visible = *True
			lblSellingChannel.Visible = *True
			txtBundleRetailPrice.Visible = *True
			lblBundlePrice.Visible = *True
			//If (Domain = 'EMEA')
			If (DataCache.IsVATRequired = *True)
				cboVATRate.Visible = *True
				lblVATRate.Visible = *True
			EndIf
			bttnMarketPrices.Visible = *True
			txtSubClass.Enabled = *True	
			
			
			// Selling Channel
			ItemsBO.GetSellingChannelTbl()
			cboSellingChannel.DataSource = ItemsBO.SpiceDataSet.Tables("SellingChannelTable")
			cboSellingChannel.DisplayMember = "CodeAndDescription"
			cboSellingChannel.ValueMember   = "SellingChannelCode"	
			If (ItemsBO.SellingChannel = *Nothing *Or ItemsBO.SellingChannel = String.Empty)
				cboSellingChannel.SelectedIndex = -1
				dt = cboSellingChannel.DataSource *AS DataTable			
				DclFld x *Integer2
				For Index(x = 0) to(dt.Rows.Count - 1)
					If (dt.Rows[x]["BundlesDefault"].ToString() = "Y")
						cboSellingChannel.SelectedValue = dt.Rows[x]["SellingChannelCode"]
					EndIf
				EndFor	
			Else
				cboSellingChannel.SelectedValue = ItemsBO.SellingChannel
			EndIf
		Else		
			cboSellingChannel.Visible = *False
			lblSellingChannel.Visible = *False
			txtBundleRetailPrice.Visible = *False
			lblBundlePrice.Visible = *False
			//If (Domain = 'EMEA')
			If (DataCache.IsVATRequired = *True)
				cboVATRate.Visible = *True
				lblVATRate.Visible = *True
			EndIf
			bttnMarketPrices.Visible = *False
			//txtSubClass.Enabled = *False		
		EndIf
		
		EnableOKNextButton()
		
		SetMousePtr *Dft

	EndSr

	BegFunc GetMarketVatCodes Type(DataTable)
		DclSrParm marketCode Type(String)
				
		DclFld dt Type(DataTable)
		DclFld dv Type(DataView)
		
		Try
			If(dt = *Nothing)
				dt = ItemsBO.SpiceDataSet.Tables("VATrates")
			EndIf
				
			dv = *New DataView(dt)
			dv.RowFilter = "Market = '" + marketCode.Trim() + "'"
		Catch Name(exc) Type(Exception)
			//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
		EndTry
			
		LeaveSR dv.ToTable(*True,"ItemVATcode")
	EndFunc	
	
	BegSR EnableOKNextButton Access(*Private)
	
		// OnlineEcom only applies to 'Bundles'
		If (APPType = "B")
			If(ItemForOnlineEcom() = *True)			
				btnNext.Enabled = *True
				btnOK.Enabled = *False
			Else
				btnNext.Enabled = *False
				btnOK.Enabled = *True
			EndIf
		Else
			// If the item is not a bundle, we will never see the AddAPPEcomDetails screen.
			btnNext.Enabled = *False
			btnOK.Enabled = *True
		EndIf
	EndSR

/Region Set Item Properties 	
	//Set Item Properties for the Write method
	BegSr SetItemProperties Access(*Private)
			
		Try
			//Create the Market Sizes Table for the Item write
			CreateMarketSizesTbl()
			
			With SpiceItem
				.Division         		= ClassDivision
				.Department       		= ClassDepartment
				.Class            		= Class
 				.VendorCode        		= Vendor
				.Style            		= Style
				.Colour           		= txtColour.Text.ToString().Trim()
				.Size             		= Size
				If (cmbAPPType.Text.Contains("BUNDLE"))
					.APP	          	= 'BND'	
				Else
					.APP	          	= 'APP'
				EndIf			
				.SubClass         		= String.Empty
				.ItemLongDescription	= Prefix + txtLongDescription.Text.ToString().Trim()   
				.ItemLocalDescription   = txtLocalDescription.Text.Trim()
				.ItemShortDescription	= txtShortDescription.Text.ToString().Trim()  
				.VendorStyle      		= txtVendorStyle.Text.ToString().Trim()
				.LicenceCode      		= DevelopedBy
				.CommodityCode    		= txtCommodityCode.Text.ToString().Trim()
				.CompositionCode  		= txtCompositionCode.Text.ToString().Trim()
				.GenderCode				= 'U'
				.OnlineInd				= 'N'
				.LocationInd			= 'N'
				.CountryCode      		= txtCountryOfOrigin.Text.ToString().Trim()
				.CharacterCode     		= txtCharacterCode.Text.ToString()
				.SeasonCode       		= txtSeasonCode.Text.ToString().Trim()
				.CasePackCode      		= CasePackCode
				.CaseQuantity     		= txtCasePackQty.Text.ToString().Trim()
				.DistroQuantity    		= 1
				.PackWeight       		= txtWeight.Text.ToString().Trim()
				.PackHeight       		= txtHeight.Text.ToString().Trim()
				.PackLength       		= txtLength.Text.ToString().Trim()
				.PackWidth	      		= txtWidth.Text.ToString().Trim()	
				.ItemLocalDescription   = txtLocalDescription.Text
								
				ForEach marketPrice Collection(ItemsBO.SpiceDataSet.Tables["MarketSizes"].Rows) Type(DataRow)
					If (marketPrice["CurrencyCode"].ToString() = ItemsBO.BaseCurrency)
						marketPrice["Retail"] = SafeDecimalValue(*this.txtBundleRetailPrice.Text)
						marketPrice["ListPrice"] = SafeDecimalValue(*this.txtBundleRetailPrice.Text)
					EndIf
				EndFor
				
				.SelectedMarketsTable   = SpiceDs.Tables["MarketSizes"]
				.SelectedSizesTable     = ItemSizes				
				
			EndWith

			ItemsBO.LongDescription = SpiceItem.ItemLongDescription
			ItemsBO.LocalDescription = SpiceItem.ItemLocalDescription	
			 
		Catch Name(exc) Type(Exception)
			//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
		EndTry		
							
//		If (SpiceItem.Class = *Zero *OR SpiceItem.VendorCode = *Zero *OR SpiceItem.Style = *Zero)
//			DclFld incorrectDataException Type(Exception)
//			incorrectDataException = *New Exception('Class/Vendor/Style cannot be zero')
//			Throw incorrectDataException
//		EndIf
	EndSr
/EndRegion
		
/Region Set APP Properties
		
	//Set APP Properties for the Write method
	BegSr SetAPPProperties Access(*Private)			
	
		Try
			With SpiceAPPItem
				.Division         = ClassDivision
				.Department       = ClassDepartment
				.Class            = Class
 				.Vendor           = Vendor
				.Style            = SpiceItem.Style
				.Colour           = txtColour.Text.ToString().Trim()
				.Size             = Size
				.APPType          = APPType
				.Prefix           = Prefix
				.SubClass         = String.Empty
				.LongDescription  = Prefix + txtLongDescription.Text.ToString().Trim()  
				.ShortDescription = txtShortDescription.Text.ToString().Trim()  
				.VendorStyle      = txtVendorStyle.Text.ToString().Trim()
				.DevelopedBy      = DevelopedBy
				.CommodityCode    = txtCommodityCode.Text.ToString().Trim()
				.CompositionCode  = txtCompositionCode.Text.ToString().Trim()
				.CountryOfOrigin  = txtCountryOfOrigin.Text.ToString().Trim()
				.CharacterCode    = txtCharacterCode.Text.ToString()
				.SeasonCode       = txtSeasonCode.Text.ToString().Trim()
				.CasePackType     = CasePackCode
				.CaseQty          = txtCasePackQty.Text.ToString().Trim()
				.DistroQty        = 1
				.CartonWeight     = txtWeight.Text.ToString().Trim()
				.CartonHeight     = txtHeight.Text.ToString().Trim()
				.CartonLength     = txtLength.Text.ToString().Trim()
				.CartonWidth      = txtWidth.Text.ToString().Trim()
				.CostPrice        = GridCostSum			
				.ComponentCount   = GridCount
				.PendingChar      = String.Empty
				.VendorUPC        = String.Empty
				.DisneyUPC		  = String.Empty
				.CaseDtlLck		  = 'N'
				.EASRqs           = String.Empty
				If(APPType = "B")
					.SellingChannel   = cboSellingChannel.SelectedValue.ToString().Trim()
					.RetailPrice      = SafeDecimalValue(*this.txtBundleRetailPrice.Text)						
				Else
					.RetailPrice      = GridRetailSum	
				EndIf			
			EndWith
		Catch Name(exc) Type(Exception)
			//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
		EndTry	
		
	EndSr
	
	BegFunc SafeDecimalValue Type(Decimal) Access(*PRIVATE)
		DclSrParm controlValue *Object
		
		Try
			LeaveSR Decimal.Parse(controlValue.ToString())
		Catch Name(e) Type(Exception)
			LeaveSR 0
		EndTry
	EndFunc	
	
/EndRegion

/Region Create Market Sizes Table
	BegSr CreateMarketSizesTbl Access(*Private)
	
		DclFld   MarketSizes Type(DataTable)
		DclFld   Marketdr    Type(DataRow)
				
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		Try
			SpiceDS = *New DataSet("Spice")
			MarketSizes = *New DataTable("MarketSizes")
		
			MarketSizes.Columns.Add(*New DataColumn("Market", *TypeOf(String)))
			MarketSizes.Columns("Market").ReadOnly = *True
			
			MarketSizes.Columns.Add(*New DataColumn("CurrencyCode", *TypeOf(String)))
			MarketSizes.Columns("CurrencyCode").ReadOnly = *True
			
			MarketSizes.Columns.Add(*New DataColumn("SizeCode", *TypeOf(Int16)))
			MarketSizes.Columns("SizeCode").ReadOnly = *True
			
			MarketSizes.Columns.Add(*New DataColumn("SizeName", *TypeOf(String)))
			MarketSizes.Columns("SizeName").ReadOnly = *True
					
			MarketSizes.Columns.Add(*New DataColumn("Cost", *TypeOf(Decimal)))
			MarketSizes.Columns("Cost").ReadOnly = *True
			
			MarketSizes.Columns.Add(*New DataColumn("Retail", *TypeOf(Decimal)))
			
			MarketSizes.Columns.Add(*New DataColumn("ListPrice", *TypeOf(Decimal)))
			
			MarketSizes.Columns.Add(*New DataColumn("VAT", *TypeOf(String)))
			//MarketSizes.Columns("VAT").ReadOnly = *True
			
			SpiceDS.Tables.Add(MarketSizes)
							
			//Get the All Markets
			MarketTbl   = ItemsBO.SpiceDataSet.Tables("DomainMarkets")
			MarketTblDV = *New DataView(MarketTbl)
			
			ForEach Market Collection(MarketTblDV) Type(DataRowView)
				Marketdr = SpiceDS.Tables("MarketSizes").NewRow()
				//.ItemLongDescription	= Prefix + txtLongDescription.Text.ToString().Trim()  
				Marketdr.Item("Market")       = Market("IPMarket")
				Marketdr.Item("CurrencyCode") = Market("IPCurrencyCode") 
				Marketdr.Item("SizeCode")     = Size
				Marketdr.Item("SizeName")     = String.Empty
				Marketdr.Item("Cost")         = GridCostSum
				Marketdr.Item("Retail")       = GridRetailSum
				Marketdr.Item("ListPrice")    = GridRetailSum
				Marketdr.Item("VAT")          = String.Empty
							
				SpiceDS.Tables("MarketSizes").Rows.Add(Marketdr)
			EndFor
			
			If(APPType = "B")
				// For bundles, we use the prices entered into the price matrix
				ForEach row Collection(SpiceDS.Tables["MarketSizes"].Rows) Type(DataRow)
					If(row["CurrencyCode"].ToString() = *this.ItemsBO.BaseCurrency)
						row["Retail"] = SafeDecimalValue(*this.txtBundleRetailPrice.Text)
						row["ListPrice"] = SafeDecimalValue(*this.txtBundleRetailPrice.Text)
						//If (Domain = 'EMEA')
						If (DataCache.IsVATRequired = *True)
							row["VAT"] = cboVATRate.SelectedValue.ToString()
						EndIf
					Else
						ForEach priceMatrixRow Collection(PriceMatrixTbl.Rows) Type(DataRow)
							If (row["CurrencyCode"].ToString() = priceMatrixRow["Currency"].ToString())
								row["Retail"] = PriceMatrixRow["Retail"]
								row["ListPrice"] = PriceMatrixRow["Retail"]
								//If (Domain = 'EMEA')
								If (DataCache.IsVATRequired = *True)
									row["VAT"] = PriceMatrixRow["VAT"]
								EndIf
							EndIf
						EndFor
					EndIf	 
				EndFor
			EndIf	
		Catch Name(exc) Type(Exception)
			//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
		EndTry	
			
	EndSr
/EndRegion

/Region Validate Grid Components		
	BegSr ValidateGridComponents Access(*Private)
				
		DclFld GridCost		  Type(Decimal)
		DclFld GridRetail	  Type(Decimal)
		DclFld GridQtyCalc	  Type(Decimal)
		DclFld DuplicateChk	  Type(Boolean)
		DclFld GridClassCheck Type(Boolean)
							
		AllOk = *True
		
		Try
			//Check if all Item fields are valid
			ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
				If dgvRow.IsNewRow = *False 
					If dgvRow.Cells["clmClass"].Value.ToString()       = "" or +
					   dgvRow.Cells["clmStyle"].Value.ToString()       = "" or +
					   dgvRow.Cells["clmColour"].Value.ToString()      = "" or +
					   dgvRow.Cells["clmSize"].Value.ToString()        = "" or +
					   dgvRow.Cells["clmDescription"].Value.ToString() = "" 
				       
					   dgvRow.Cells["clmDescription"].ErrorText = "This is not a valid Item"
					   AllOK = *False
					   LeaveSR
					Else
						dgvRow.Cells["clmDescription"].ErrorText = ""	
					Endif
				Endif
			EndFor
			
			If (APPType <> 'B')
				//Check if Class entered belongs to the correct Department
				If Allok = *True
					ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
						If dgvRow.IsNewRow = *False 
							GridClassCheck = *False
							ForEach DepartmentRow Collection(DepartmentClassesDV) Type(DataRowView)
								If DepartmentRow.Item["ClassCode"].ToString() =  dgvRow.Cells["clmClass"].Value.ToString()
									GridClassCheck = *True
									//Leave
								Endif
							EndFor
							
							If GridClassCheck = *False
								dgvRow.Cells["clmClass"].ErrorText = "Class entered does not belong to the correct Department"
								AllOk = *False
								LeaveSR
							Else
								dgvRow.Cells["clmClass"].ErrorText = ""	
							Endif
						Endif
					EndFor
				Endif	
			EndIf
			
			If Allok = *True
				//Check if Item exists in all Markets			
				ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
					If dgvRow.IsNewRow = *False 
						GridClass  = Int16.Parse(dgvRow.Cells["clmClass"].Value.ToString())	
						GridStyle  = Int16.Parse(dgvRow.Cells["clmStyle"].Value.ToString())
						GridColour = Int16.Parse(dgvRow.Cells["clmColour"].Value.ToString())
						GridSize   = Int16.Parse(dgvRow.Cells["clmSize"].Value.ToString()) 
						GridVendor = SafeInt16Value(dgvRow.Cells["clmVendor"].Value)
																
						If (APPType = 'B')
							GridVendor = Int16.Parse(dgvRow.Cells["clmVendor"].Value.ToString())
							ForEach MarketRow Collection(MarketTblDV) Type(DataRowView)
								Market  = MarketRow.Item["IPMarket"].ToString().Trim()
								ItemCheck = ItemsBO.GetItem(GridClass, GridVendor, GridStyle, GridColour, GridSize, Market)
							EndFor
						Else
							ForEach MarketRow Collection(MarketTblDV) Type(DataRowView)
								Market  = MarketRow.Item["IPMarket"].ToString().Trim()
								ItemCheck = ItemsBO.GetItem(GridClass, GridVendor, GridStyle, GridColour, GridSize, Market)
							EndFor
						EndIf
								
						If ItemCheck  = *False
							dgvRow.Cells["clmSize"].ErrorText = "This Item does not exist in all Markets. Please create Item before adding."
							AllOK = *False
							LeaveSR
						Else
							dgvRow.Cells["clmSize"].ErrorText = ""	
						Endif
					Endif
				EndFor
			Endif
			
			If AllOk = *True
				//Check if Item is an APP Master Item
				ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
					If dgvRow.IsNewRow = *False 
						GridClass  = Int16.Parse(dgvRow.Cells["clmClass"].Value.ToString())	
						GridStyle  = Int16.Parse(dgvRow.Cells["clmStyle"].Value.ToString())
						GridColour = Int16.Parse(dgvRow.Cells["clmColour"].Value.ToString())
						GridSize   = Int16.Parse(dgvRow.Cells["clmSize"].Value.ToString())
						GridVendor = SafeInt16Value(dgvRow.Cells["clmVendor"].Value)
						
						If (APPType = 'B')
							GridVendor = Int16.Parse(dgvRow.Cells["clmVendor"].Value.ToString())
							ItemsBO.GetItem(GridClass, GridVendor, GridStyle, GridColour, GridSize, MasterMarket)
						Else
							ItemsBO.GetItem(GridClass, GridVendor, GridStyle, GridColour, GridSize, MasterMarket)
						EndIf						
						
						APPMasterItem      = ItemsBO.APP
	   					If APPMasterItem  = "APP"
							dgvRow.Cells["clmSize"].ErrorText = "This Item is an APP Master Item and cannot be added"
							AllOK = *False
							LeaveSR
						Else
							dgvRow.Cells["clmSize"].ErrorText = ""	
						Endif
					Endif
				EndFor			
			Endif
			
			If AllOk = *True
				//Validate Quantities
				ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
					If dgvRow.IsNewRow = *False 						
						//If Int16.TryParse(dgvRow.Cells["clmQty"].Value.ToString(), *ByRef GridQty) = *False
						GridQty = SafeInt16Value(dgvRow.Cells["clmQty"].Value)					
						If (GridQty <= 0)
							dgvRow.Cells["clmQty"].ErrorText = "Please enter a valid Quantity greater than zero."
							AllOK = *False
							LeaveSR
						Else
							dgvRow.Cells["clmQty"].ErrorText = ""	
						Endif						
					Endif
				Endfor	
			Endif
			
			If AllOk = *True
				//Validate Maximum Components
				ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
					If dgvRow.IsNewRow = *False 
						If (dgvRow.Index + 1) > MaxComponents 
							MsgBox TITLE('Error notification') Msg('You have Exceeded the maximum components allowed for this APP Type.') ICON(*Exclamation)
							AllOk = *False
							LeaveSr
						Endif
					Endif
				Endfor
			Endif	
			
			If AllOk = *True		
				//validate APP Type P - Multiple Products OR Bundles
				DuplicateChk = *False
				If MaxComponents > 1 and (APPType = 'P' *Or APPType = 'B')
				//If MaxComponents > 1 and (APPType = 'P')
					ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
						If dgvRow.IsNewRow = *False
							ForEach dgvRow2 Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
								If dgvRow2.IsNewRow = *False
									If	dgvRow.Cells["clmClass"].Value.ToString()  = dgvRow2.Cells["clmClass"].Value.ToString()  And +
										dgvRow.Cells["clmStyle"].Value.ToString()  = dgvRow2.Cells["clmStyle"].Value.ToString()  And +
										dgvRow.Cells["clmColour"].Value.ToString() = dgvRow2.Cells["clmColour"].Value.ToString() And +
										dgvRow.Cells["clmSize"].Value.ToString()   = dgvRow2.Cells["clmSize"].Value.ToString()   And +
										dgvRow.Index <> dgvRow2.Index
										DuplicateChk = *True
									Endif
								Endif
							EndFor
						Endif
					EndFor
												
					If DuplicateChk = *True
						MsgBox TITLE('Error notification')	Msg('There are duplicate components added to the Grid.') ICON(*Exclamation)
						AllOk = *False					
						LeaveSr
					Endif
				Endif		
			Endif
			
			If AllOk = *True		
				//Validate APP Type S - Multiple Sizes
				//Check for Duplicate Sizes
				DuplicateChk = *False
				If MaxComponents > 1 and APPType = 'S'
					ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
						If dgvRow.IsNewRow = *False
							ForEach dgvRow2 Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
								If dgvRow2.IsNewRow = *False
									If	dgvRow.Cells["clmClass"].Value.ToString()  = dgvRow2.Cells["clmClass"].Value.ToString()  And +
										dgvRow.Cells["clmStyle"].Value.ToString()  = dgvRow2.Cells["clmStyle"].Value.ToString()  And +
										dgvRow.Cells["clmColour"].Value.ToString() = dgvRow2.Cells["clmColour"].Value.ToString() And +
										dgvRow.Cells["clmSize"].Value.ToString()   = dgvRow2.Cells["clmSize"].Value.ToString()   And +
										dgvRow.Index <> dgvRow2.Index
										DuplicateChk = *True
									Endif
								Endif
							EndFor
						Endif
					EndFor
							
					If DuplicateChk = *True
						MsgBox	TITLE('Error notification') Msg('There are duplicated Sizes added to the Grid.') ICON(*Exclamation)
						AllOk = *False
						LeaveSr
					Endif
				Endif
			Endif
			
			//Calculate Cost and Retail Price
			If AllOk = *True
				GridCount     = String.Empty
				GridCost      = String.Empty
				GridCostSum   = String.Empty
				GridRetail    = String.Empty
				GridRetailSum = String.Empty
				GridQtyCalc	  = String.Empty
				ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
					If dgvRow.IsNewRow = *False
						If dgvRow.Index < MaxComponents
							GridCount     +=1
							GridCost      = Decimal.Parse(dgvRow.Cells["clmCost"].Value.ToString())
							GridQtyCalc   = Decimal.Parse(dgvRow.Cells["clmQty"].value.ToString())
							GridRetail    = Decimal.Parse(dgvRow.Cells["clmRetail"].Value.ToString())
							GridCostSum   += (GridCost * GridQtyCalc)
							GridRetailSum += (GridRetail * GridQtyCalc)  
						Endif
					Endif
				EndFor
			Endif	
		Catch Name(exc) Type(Exception)
			//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
		EndTry					

	EndSr
		
	BegFunc SafeInt16Value Type(Int16) Access(*PRIVATE)
		DclSrParm controlValue *Object
		
		Try
			LeaveSR Int16.Parse(controlValue.ToString())
		Catch Name(e) Type(Exception)
			LeaveSR 0
		EndTry
	EndFunc	
		
/EndRegion	

/Region Accept Selected Items from Item Search
	BegSr AcceptSelectedItems Access(*Private)
		
		DclFld SelectedRowCount Type(Int16)
		
		//Instance ItemsBO Class 
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
														
		SelectItemsDV = *New DataView(SelectItemsTbl) 
		
		ForEach SelectedItems Collection(SelectItemsDV) Type(DataRowView)
			//If ItemExistsOnGrid(SelectedItems.Item["Class"].ToString(),SelectedItems.Item["Style"].ToString(),SelectedItems.Item["Colour"].ToString(),SelectedItems.Item["Size"].ToString())
				SelectedRowCount = dgvItemAPAdd.RowCount -1 
				dgvItemAPAdd.Rows.Add()
				GridClass  = Convert.ToInt16(SelectedItems.Item["Class"].ToString())
				GridStyle  = Convert.ToInt16(SelectedItems.Item["Style"].ToString()) 
				GridVendor = Convert.ToInt16(SelectedItems.Item["Vendor"].ToString()) 
				GridColour = Convert.ToInt16(SelectedItems.Item["Colour"].ToString())
				GridSize   = Convert.ToInt16(SelectedItems.Item["Size"].ToString())
				
				dgvItemAPAdd.Item['clmSelect', SelectedRowCount].Value = *False
				dgvItemAPAdd.Item['clmClass', SelectedRowCount].Value  = SelectedItems.Item["Class"].ToString()
				dgvItemAPAdd.Item['clmVendor', SelectedRowCount].Value = SelectedItems.Item["Vendor"].ToString()
				dgvItemAPAdd.Item['clmStyle', SelectedRowCount].Value  = SelectedItems.Item["Style"].ToString()
				dgvItemAPAdd.Item['clmColour', SelectedRowCount].Value = SelectedItems.Item["Colour"].ToString()
				dgvItemAPAdd.Item['clmSize', SelectedRowCount].Value   = SelectedItems.Item["Size"].ToString()
				dgvItemAPAdd.Item['clmQty',  SelectedRowCount].Value   = String.Empty
										
				//Get Item Details......Colour and Size Names
				If (APPType = 'B')
					ItemsBO.GetItem(GridClass, GridVendor, GridStyle, GridColour, GridSize, MasterMarket)
				Else
					ItemsBO.GetItem(GridClass, Vendor, GridStyle, GridColour, GridSize, MasterMarket)
				EndIf
				
				ColourCheck = ItemsBO.GetColour(GridColour)
				SizeCheck   = ItemsBO.GetSize(GridSize)
				
				If ColourCheck = *True
					dgvItemAPAdd.Item["clmColourName",SelectedRowCount].Value  = ItemsBO.ColourName.ToString().Trim()
				Else
					dgvItemAPAdd.Item["clmColourName",SelectedRowCount].Value  = 'Colour Name not found'
				Endif
				
				If SizeCheck = *True
					dgvItemAPAdd.Item["clmSizeName",SelectedRowCount].Value    = ItemsBO.SizeName.ToString().Trim()
				Else
					dgvItemAPAdd.Item["clmSizeName",SelectedRowCount].Value    = 'Size Name not found'
				Endif
				
				dgvItemAPAdd.Item["clmDescription",SelectedRowCount].Value = ItemsBO.ItemLongDescription.ToString().Trim()
				dgvItemAPAdd.Item["clmUPC",SelectedRowCount].Value         = ItemsBO.UPC.ToString().Trim()
				dgvItemAPAdd.Item["clmCost",SelectedRowCount].Value        = ItemsBO.ItemCost.ToString().Trim()
				dgvItemAPAdd.Item["clmRetail",SelectedRowCount].Value	   = ItemsBO.ItemRetail.ToString().Trim()
				dgvItemAPAdd.Rows[SelectedRowCount].Cells["clmQty"].ReadOnly = *False			
			//EndIf
		EndFor
			
	Endsr
	
//	BegFunc ItemExistsOnGrid Access(*Private) Type(Boolean)
//		DclSrParm class Type(String)
//		DclSrParm style Type(String)
//		DclSrParm colour Type(String)
//		DclSrParm size Type(String)
//		
//		DclFld result Type(Boolean) Inz(*False)	
//		
//		ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
//			If	dgvRow.Cells["clmClass"].Value.ToString()  = class  And +
//				dgvRow.Cells["clmStyle"].Value.ToString()  = style  And +
//				dgvRow.Cells["clmColour"].Value.ToString() = colour And +
//				dgvRow.Cells["clmSize"].Value.ToString()   = size And +
//				result = *True
//			Endif
//		EndFor
//		
//		LeaveSR result
//	EndFunc
//	
/EndRegion

/Region Add Item Details
	BegSr AddItemDetails Access(*Private)
		//Instance ItemsBO Class 
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
						
		//Get Item Details......Colour and Size Names
		ItemsBO.GetItem(GridClass, Vendor, GridStyle, GridColour, GridSize, MasterMarket)
		ColourCheck = ItemsBO.GetColour(GridColour)
		SizeCheck   = ItemsBO.GetSize(GridSize)
		
		If ColourCheck = *True
			dgvItemAPAdd.Item["clmColourName",Row].Value = ItemsBO.ColourName.ToString().Trim()
		Else
			dgvItemAPAdd.Item["clmColourName",Row].Value = 'Colour Name not found'
		Endif
			
		If SizeCheck = *True
			dgvItemAPAdd.Item["clmSizeName",Row].Value = ItemsBO.SizeName.ToString().Trim()
		Else
			dgvItemAPAdd.Item["clmSizeName",Row].Value = 'Size Name not found'
		Endif
		
		dgvItemAPAdd.Item["clmDescription",Row].Value = ItemsBO.ItemLongDescription.ToString().Trim()
		dgvItemAPAdd.Item["clmUPC",Row].Value         = ItemsBO.UPC.ToString().Trim()
		dgvItemAPAdd.Item["clmCost",Row].Value        = ItemsBO.ItemCost.ToString().Trim()
		dgvItemAPAdd.Item["clmRetail",Row].Value	  = ItemsBO.ItemRetail.ToString().Trim()
	Endsr
/EndRegion

/Region Buttons
	BegSr btnCancel_Click Access(*Private) Event(*this.btnCancel.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DialogResult = DialogResult.Cancel
		Unload *This
		
	EndSr
	
	BegSr btnRemoveComponent_Click Access(*Private) Event(*this.btnRemoveComponent.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		ErrPro.Clear()
		
		//Delete selected rows...This code counts backwards as the RemoveAt reindexes.
		dclfld x type(int16)
		
		x = dgvItemAPAdd.RowCount -1
		For Index(x) DownTo(0) 
			If dgvItemAPAdd.Rows[x].IsNewRow = *False 
				If dgvItemAPAdd.Item["clmSelect", x].Value *As Boolean = *True
					dgvItemAPAdd.Rows.RemoveAt(x)
				Endif
			Endif
		EndFor
	EndSr
	
	BegSr btnAddComponent_Click Access(*Private) Event(*this.btnAddComponent.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld sellChannel Type(String)
		DclFld dept	       Type(Int16)
		
		
		ErrPro.Clear()		
	
		If MaxComponents = 1
			ClassLck  = 'Y'
		Else
			ClassLck = 'N'
		Endif
						
		If(APPType = "B")
			DeptLck   = 'N'
			VendorLck = 'N'
			dept = ClassDepartment
			ClassDepartment = *Zero
			sellChannel = cboSellingChannel.SelectedValue.ToString()
			SelectItem = *New SelectItem(Pgmdb, User, Environment, MDIForm, Class, ClassLck, ClassDepartment, DeptLck, Vendor, VendorLck, sellChannel)
			ClassDepartment = dept
		Else
			DeptLck   = 'Y'
			VendorLck = 'Y'
			SelectItem = *New SelectItem(Pgmdb, User, Environment, MDIForm, Class, ClassLck, ClassDepartment, DeptLck, Vendor, VendorLck)
		EndIf
													
		SelectItemsTbl = SelectItem.GetSelectedItems()
			
		AcceptSelectedItems()
	EndSr
	
	BegSr btnNext_Click Access(*Private) Event(*this.btnNext.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs		
		
		DclFld APPColour    Type(*Integer2)
		DclFld GridRowCount Type(Int16)
		DclFld bundleRetailPrice Type(Decimal)
		DclFld dv Type(DataView)
		
		ErrPro.ClearAll()
		GridRowCount = 0
		APPColour    = Convert.ToInt16(txtColour.Text.ToString())
		SetMousePtr *HourGlass

		Try 
			If (txtClass.Text = ""	)
				ErrPro.SetControlError(txtVendor,'Incorrect Class')
				LeaveSR
			EndIf
			
			If (txtVendor.Text = ""	)
				ErrPro.SetControlError(txtVendor,'Incorrect Vendor Number')
				LeaveSR
			EndIf
			
			If( DataCache.IsStyleNumberInputRequired = *True )
				// Validate the style number
				If (Style = *Zero)
					txtStyle.Enabled = *True
					ErrPro.SetControlError(txtStyle, 'Enter a style number.')
					LeaveSR
				EndIf
			Else
				Style = *Zero	
			EndIf
			
			If(APPType = "B")
				If(m_MarketPricesFormVisited = *False)
					lblMktPricesPrompt.Visible = *True
					bttnMarketPrices.Focus()
					LeaveSR
				EndIf
				
				Decimal.TryParse(*this.txtBundleRetailPrice.Text, *ByRef bundleRetailPrice)			
				If(bundleRetailPrice = 0)
					*this.lblMktPricesPrompt.Visible = *False
					ErrPro.SetControlError(bttnMarketPrices, "Please enter a valid bundle retail price greater than zero.")
					LeaveSR
				Else
					If (*this.PriceMatrixTbl = *Nothing)
						ItemsBO.GenerateRetailPriceTbl(bundleRetailPrice,*False,*True)
						PriceMatrixTbl = ItemsBO.SpiceDataSet.Tables["RetailPrice"]
						PriceMatrixTbl.Columns.Add(*New DataColumn("VAT", *TypeOf(String)))			
						PriceMatrixTbl.Columns.Add(*New DataColumn("Market", *TypeOf(String)))	
						
						ForEach marketPrice Collection(ItemsBO.SpiceDataSet.Tables["MarketSizes"].Rows) Type(DataRow)
							ForEach PriceMatrixRow Collection(PriceMatrixTbl.Rows) Type(DataRow)		
								If (PriceMatrixRow["Currency"] = marketPrice["CurrencyCode"])
									//PriceMatrixRow["Retail"] = marketPrice["Retail"]
									PriceMatrixRow["VAT"] = marketPrice["VAT"]
									PriceMatrixRow["Market"] = marketPrice["Market"]
								EndIf
								
								If (PriceMatrixRow["Currency"].ToString() = ItemsBO.BaseCurrency)
									PriceMatrixTbl.Rows.Remove(PriceMatrixRow)
								EndIf
							EndFor
						EndFor												
					EndIf
				EndIf
								
				//If (Domain = 'EMEA' *AND cboVATRate.Text = String.Empty)	
				If (DataCache.IsVATRequired = *True *AND cboVATRate.Text = String.Empty)									
					ErrPro.SetControlError(cboVATRate , "Please select a VAT rate.")
					LeaveSR
				EndIf
				
				Try
					// Check for any zero values entered into Retail price grid
					dv = *New DataView(PriceMatrixTbl)
					dv.RowFilter = "Retail = 0"
					If dv.Count <> *Zero
						ErrPro.SetControlError(bttnMarketPrices,"One or more Retail prices are Zero")
					EndIf
					
					If(DataCache.IsVATRequired = *True)
						dv.RowFilter = "VAT = ''"
						If dv.Count <> *Zero
							ErrPro.SetControlError(bttnMarketPrices,"One or more VAT codes are blank.")
						EndIf
					EndIf
				Catch Name(exc) Type(Exception)
				EndTry
			EndIf
				
			ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
				If dgvRow.IsNewRow = *False 
					GridRowCount += 1	
				Endif
			EndFor
			
			If GridRowCount = 0
				MsgBox TITLE('Information needed') Msg('Please add Components to continue.') ICON(*Exclamation)
				LeaveSr
			Endif
			
			If GridErrors = *False And ErrPro.ErrorCount = 0 										
				//Instance Class SpiceItem
				If SpiceItem  = *Nothing
					SpiceItem = *New SpiceItem(Pgmdb, User) 
				Endif
							
				//Instance Class SpiceAPPItem
				If SpiceAPPItem  = *Nothing
					SpiceAPPItem = *New SpiceAPPItem(Pgmdb, User) 
				Endif
				
				//Instance Class DSSPEHLcls History Events
				If DSSPEHLcls  = *Nothing
					DSSPEHLcls = *New DSSPEHLcls(Pgmdb) 
				Endif
							
				Try		
					ValidateGridComponents()
				Catch Name(exc) Type(Exception)
					Allok = *False
					*this.dgvItemAPAdd.Refresh()
				EndTry
				
				If Allok = *True					
					CreateNoSizesTbl()
					PopulateNoSizeTbl()
					SetItemProperties()
					SetAPPProperties()		
					
					SetMousePtr *Dft				
					*this.Hide()				
					m_AddAPPEcomDetails = *New AddAPPEcomDetails(ItemsBO,SpiceItem,SpiceAPPItem,Class,Vendor,Style,Colour,Size,DSSPEHLcls,dgvItemAPAdd,APPColour)
					m_AddAPPEcomDetails.ShowDialog()
					
					If m_AddAPPEcomDetails.DialogResult = System.Windows.Forms.DialogResult.Retry
						*this.Show()
						m_AddAPPEcomDetails.Close()
						m_AddAPPEcomDetails = *Nothing
					Else
						m_AddAPPEcomDetails.Close()
						m_AddAPPEcomDetails = *Nothing
						DialogResult = DialogResult.OK
						Unload *This
					EndIf					
				Else
					MsgBox TITLE('Error notification') Msg('Please correct any errors before proceeding.') ICON(*Exclamation)
				Endif
			Else
				MsgBox TITLE('Error notification') Msg('Please correct any errors before proceeding.') ICON(*Exclamation)
			Endif
		Finally
			SetMousePtr *Dft
		EndTry		
		
	EndSR
	
	BegSr btnOK_Click Access(*Private) Event(*this.btnOK.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
				
		DclFld bundleRetailPrice Type(Decimal)
		DclFld APPColour    Type(*Integer2)
		DclFld GridRowCount Type(Int16)
		DclFld dv Type(DataView)
		
		LongItemString = *New StringBuilder()
		
		SetMousePtr *HourGlass
		ErrPro.ClearAll()		
		APPColour    = Convert.ToInt16(txtColour.Text.ToString())
		GridRowCount = 0
			
		Try
		    // Get the number of items on the APP grid and check that items have been entered.
			ForEach dgvRow Collection(dgvItemAPAdd.Rows) Type(DataGridViewRow)
				If dgvRow.IsNewRow = *False 
					GridRowCount += 1	
				Endif
			EndFor
			
			If GridRowCount = 0
				MsgBox TITLE('Information needed') Msg('Please add Components to continue.') ICON(*Exclamation)
				LeaveSr
			Endif
			
			// Validate the class entered.
			If (txtClass.Text = ""	)
				ErrPro.SetControlError(txtVendor,'Incorrect Class')
				LeaveSR
			EndIf
			
			// Validate the vendor entered.
			If (txtVendor.Text = ""	)
				ErrPro.SetControlError(txtVendor,'Incorrect Vendor Number')
				LeaveSR
			EndIf
						
			If( DataCache.IsStyleNumberInputRequired = *True )
				// Validate the style number
				If (Style = *Zero)
					txtStyle.Enabled = *True
					ErrPro.SetControlError(txtStyle, 'Enter a style number.')
					LeaveSR
				EndIf
			Else
				Style = *Zero	
			EndIf
							
			// If type "Bundle" is being created, check that the retail price for the 
			// bundle has been entered.
			If (APPType.Trim() = "B")
				Decimal.TryParse(*this.txtBundleRetailPrice.Text, *ByRef bundleRetailPrice)
				If(bundleRetailPrice = 0)
					ErrPro.SetControlError(bttnMarketPrices, "Please enter a bundle retail price greater than zero.")
					LeaveSR
				Else
					If (*this.PriceMatrixTbl = *Nothing)
						ItemsBO.GenerateRetailPriceTbl(bundleRetailPrice,*False,*True)
						PriceMatrixTbl = ItemsBO.SpiceDataSet.Tables["RetailPrice"]
						PriceMatrixTbl.Columns.Add(*New DataColumn("VAT", *TypeOf(String)))			
						PriceMatrixTbl.Columns.Add(*New DataColumn("Market", *TypeOf(String)))	
						
						ForEach marketPrice Collection(ItemsBO.SpiceDataSet.Tables["MarketSizes"].Rows) Type(DataRow)
							ForEach PriceMatrixRow Collection(PriceMatrixTbl.Rows) Type(DataRow)		
								If (PriceMatrixRow["Currency"] = marketPrice["CurrencyCode"])
									//PriceMatrixRow["Retail"] = marketPrice["Retail"]
									PriceMatrixRow["VAT"] = marketPrice["VAT"]
									PriceMatrixRow["Market"] = marketPrice["Market"]
								EndIf
								
								If (PriceMatrixRow["Currency"].ToString() = ItemsBO.BaseCurrency)
									PriceMatrixTbl.Rows.Remove(PriceMatrixRow)
								EndIf
							EndFor
						EndFor												
					EndIf					
				EndIf						
				
				// Check that the user has loaded the market prices screen (for entry of VAT codes(if UK and/or required)
				// and individual market prices
				If(m_MarketPricesFormVisited = *False)
					lblMktPricesPrompt.Visible = *True
					bttnMarketPrices.Focus()
					LeaveSR
				EndIf
				
				If((DataCache.IsVATRequired = *True) *AND (cboVATRate.Text = String.Empty))
					ErrPro.SetControlError(cboVATRate , "Please select a VAT rate.")
					LeaveSR
				EndIf
				
				Try
					// Validate against any zero values entered into Retail price grid
					dv = *New DataView(PriceMatrixTbl)
					dv.RowFilter = "Retail = 0"
					If dv.Count <> *Zero
						ErrPro.SetControlError(bttnMarketPrices,"One or more Retail prices are Zero")
					EndIf
					If(DataCache.IsVATRequired = *True)
						dv.RowFilter = "VAT = ''"
						If dv.Count <> *Zero
							ErrPro.SetControlError(bttnMarketPrices,"One or more VAT codes are blank.")
						EndIf
					EndIf
				Catch Name(exc) Type(Exception)
				EndTry
			Endif
			
			// Proceed to create APP/BND if no errors encountered thus far...
			If GridErrors = *False And ErrPro.ErrorCount = 0
								
				// Instance Class SpiceItem
				If SpiceItem  = *Nothing
					SpiceItem = *New SpiceItem(Pgmdb, User) 
				Endif
							
				// Instance Class SpiceAPPItem
				If SpiceAPPItem  = *Nothing
					SpiceAPPItem = *New SpiceAPPItem(Pgmdb, User) 
				Endif
				
				// Instance Class DSSPEHLcls History Events
				If DSSPEHLcls  = *Nothing
					DSSPEHLcls = *New DSSPEHLcls(Pgmdb) 
				Endif
			
				Try		
					// Validate row data on the grid
					ValidateGridComponents()
				Catch Name(exc) Type(Exception)
					Allok = *False
					*this.dgvItemAPAdd.Refresh()
				EndTry
				
				If Allok = *True									
					
					// Create and populate a sizes table. The business layer (ItemsBO) uses this
					// to create all the required item records in DSSPIIA
					CreateNoSizesTbl()
					PopulateNoSizeTbl()				
										
					// Write to the Item tables (yes APP records required there!!)
					// Note: this needs to be done as step 1, because the Style number is generated 
					// when none provided (= zero). The style number is then required when the APP 
					// records are written (see step 2).
					// Step 1
					SetItemProperties()			
					If(DataCache.IsStyleNumberInputRequired = *True)
						If ItemsBO.ChkItemStyleColourUnique(APPColour) = *True
							SpiceItem.WriteItem()
						Else
							SpiceItem.WriteAPPItem()
						Endif
					Else
						// style number auto-generated
						SpiceItem.WriteItem()
					EndIf

					// Step 2 - Write to the APP tables
					SetAPPProperties()	
					SpiceAPPItem.WriteAPPMaster()
					SpiceAPPItem.WriteAPPComponent(dgvItemAPAdd)

					// Step 3 - Using the Class, Vendor, Style, Colour and Size from the steps above,
					// send details to the data queue - A little bit of duplication of effort 
					// going on here (I know!), but the way it works currently (10/2011).
					LongItemString.Append(Class.ToString('0000'))
					LongItemString.Append(Vendor.ToString('00000'))
					LongItemString.Append(SpiceItem.Style.ToString('0000'))
					LongItemString.Append(Colour.ToString('000'))
					LongItemString.Append(Size.ToString('0000'))					
					SpiceAPPItem.WriteToDtaq()
					
					// Step 4 - Write to the Spice event history table (DSSPEHL).
					EventType = 'APP' 
					If (APPType = "B") 
						EventType = 'BND'						
					EndIf
					EventKey = LongItemString.ToString()
					EventDescription = 'Created in SPICE'
					DSSPEHLcls.WriteHistoryEvent(EventType, EventKey, EventDescription)	
					
					// Confirmation message	
					MsgBox TITLE('APP Added') Msg('APP Master and Components have been added.') ICON(*Information)				
					DialogResult = DialogResult.OK
					
					Unload *This
				Else
					MsgBox TITLE('Error notification') Msg('Please correct any errors before proceeding.') ICON(*Exclamation)
				Endif
			Else
				MsgBox TITLE('Error notification') Msg('Please correct any errors before proceeding.') ICON(*Exclamation)
			Endif
		Catch Name(ex) Type(Exception)
			If(ex.Message = "Operation on file DSSPIMI caused Duplicate Key")
				MsgBox TITLE('Error notification') Msg('This APP item has already been added. Please use the update facility.') ICON(*Exclamation)						
			Else
				//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
			EndIf		
		Finally
			SetMousePtr *Dft
		EndTry
	EndSr
	
	BegSr btnHelp_Click Access(*Private) Event(*this.btnHelp.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		OsExec CmdLine("iexplore http://teamshareemea.emea.wdpr.disney.com/dcpsites/spice/SpiceUserManual/Pages/default.aspx")
	EndSr
/EndRegion	

/Region APP Types
	BegSr cmbAPPType_TextChanged Access(*Private)  Event(*this.cmbAPPType.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
				
		DclFld dt Type(DataTable)
		
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.ClearAll()
	
		Try
			If cmbAPPType.Text <> String.Empty
				APPType = cmbAPPType.Text.Substring(0,1)
				ItemsBO.GetAppType(APPType)
				
				MaxComponents           = ItemsBO.MaxComponents	
				Prefix					= ItemsBO.Prefix.ToString()		
				txtLongDescPrefix.Text  = ItemsBO.Prefix.ToString()
				Size                    = ItemsBO.DefaultSize
					
				If ItemsBO.ProtectColour = 'Y'
					txtColour.Text    = ItemsBO.DefaultColour.ToString()
					Colour = Convert.ToInt16(txtColour.Text.ToString())
					// flag = donot validate colour
					txtColour.Enabled = *False
					btnColour.Enabled = *False
				Else
					If txtColour.Text = '0' Or txtColour.Text = String.Empty
						txtColour.Text = ItemsBO.DefaultColour.ToString()
					Endif
					
					txtColour.Enabled = *True
					btnColour.Enabled = *True
				EndIf

				EnableOKNextButton()
				
				If(APPType = "B")
					SetMousePtr *HourGlass
					cboSellingChannel.Visible = *True
					lblSellingChannel.Visible = *True
					txtBundleRetailPrice.Visible = *True
					lblBundlePrice.Visible = *True
					//If (Domain = 'EMEA')
					If (DataCache.IsVATRequired = *True)
						cboVATRate.Visible = *True
						lblVATRate.Visible = *True
					EndIf
					bttnMarketPrices.Visible = *True
					txtSubClass.Enabled = *True
					
					// Selling Channel
					ItemsBO.GetSellingChannelTbl()
					cboSellingChannel.DataSource = ItemsBO.SpiceDataSet.Tables("SellingChannelTable")
					cboSellingChannel.DisplayMember = "CodeAndDescription"
					cboSellingChannel.ValueMember   = "SellingChannelCode"	
					If (ItemsBO.SellingChannel = *Nothing *Or ItemsBO.SellingChannel = String.Empty)
						cboSellingChannel.SelectedIndex = -1
						dt = cboSellingChannel.DataSource *AS DataTable			
						DclFld x *Integer2
						For Index(x = 0) to(dt.Rows.Count - 1)
							If (dt.Rows[x]["BundlesDefault"].ToString() = "Y")
								cboSellingChannel.SelectedValue = dt.Rows[x]["SellingChannelCode"]
							EndIf
						EndFor	
					Else
						cboSellingChannel.SelectedValue = ItemsBO.SellingChannel
					EndIf
				Else		
					cboSellingChannel.Visible = *False
					lblSellingChannel.Visible = *False
					txtBundleRetailPrice.Visible = *False
					lblBundlePrice.Visible = *False
					//If (Domain = 'EMEA')
					If (DataCache.IsVATRequired = *True)
						cboVATRate.Visible = *True
						lblVATRate.Visible = *True
					EndIf
					bttnMarketPrices.Visible = *False
					//txtSubClass.Enabled = *False		
				EndIf						
			EndIf	
			SetMousePtr *Dft
		Catch Name(exc) Type(Exception)
			SetMousePtr *Dft
		EndTry				 
	EndSr
	
	BegSr cmbAPPType_Leave Access(*Private)   Event(*this.cmbAPPType.Leave)
		DclSrParm sender *Object
        DclSrParm e System.EventArgs
                
        e = *New System.EventArgs()
        
        ErrPro.Clear()
        
        cmbAPPType_TextChanged(sender *As Control,e)
	EndSr
/EndRegion

/Region Class 
	BegSr ClassLookUp_Click Access(*Private) Event(*this.btnClass.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld ClassEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		ErrPro.Clear()
		
		SetMousePtr *HourGlass
		
		Try 
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
			
			ErrPro.Clear()		
			ItemsBO.GetClassTbl()
					
			// Load enquiry grid
			If ClassEnquiry = *Nothing
				ClassEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("FilteredClasses"),"Classes")
			EndIf
			
			ClassEnquiry.ShowGrid()
			If ClassEnquiry.DialogResult = DialogResult.OK
				txtClass.Text            = ClassEnquiry.SelectedValue[0]
				lblClassDescription.Text = ClassEnquiry.SelectedValue[1]
				Class    = Convert.ToInt16(txtClass.Text)
				//Get Filtered Classes Table and Filter by Department of selected APP Class
				ClassDataSet = ItemsBO.GetClassTbl()
				DepartmentClasses = ClassDataSet.Tables("FilteredClasses")
				DepartmentClassesDV = *New DataView(DepartmentClasses)
				ItemsBO.GetClass(Class)
				ClassDepartment = ItemsBO.ClassDepartment
				DepartmentClassesDV.RowFilter = "Department = " + ClassDepartment
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
		
	BegSr txtClass_Validating Access(*Private) Event(*this.txtClass.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
				
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.Clear()
		If Not String.IsNullOrEmpty(txtClass.Text)
			Try
				Class    = Convert.ToInt16(txtClass.Text)
			Catch Name(Err) Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
				lblClassDescription.Text = String.Empty
				LeaveSR
			EndTry
						
			If Not ItemsBO.GetClass(Class)
				ErrPro.SetControlError(sender *As Control,'Class is not defined or you are not authorised to it')
				lblClassDescription.Text = String.Empty
				txtClass.SelectAll()
			Else
				lblClassDescription.Text = ItemsBO.ClassName
				ClassDivision            = ItemsBO.ClassDivision
				
				//Get Filtered Classes Table and Filter by Department of selected APP Class
				ClassDataSet = ItemsBO.GetClassTbl()
				DepartmentClasses = ClassDataSet.Tables("FilteredClasses")
				DepartmentClassesDV = *New DataView(DepartmentClasses)
				ItemsBO.GetClass(Class)
				ClassDepartment = ItemsBO.ClassDepartment
				DepartmentClassesDV.RowFilter = "Department = " + ClassDepartment
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Please enter a Class')
			lblClassDescription.Text = String.Empty
		EndIf
		
		//If (Domain = 'EMEA')
		If (DataCache.IsVATRequired = *True)
			cboVATRate.SelectedValue = ItemsBO.GetVATcode(MasterMarket,ItemsBO.Class)
		EndIf

	EndSr
/EndRegion

/Region Vendor 
	BegSr VendorLookUp_Click Access(*Private) Event(*this.btnVendor.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld VendorEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		ErrPro.Clear()
		
		SetMousePtr *HourGlass
		
		Try
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
							
			ErrPro.Clear()
			ItemsBO.GetVendorTbl()
			
			If VendorEnquiry = *Nothing
				VendorEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("FilteredVendors"),"Vendors")
			EndIf
			
			VendorEnquiry.ShowGrid()
			If VendorEnquiry.DialogResult = DialogResult.OK
				txtVendor.Text            = VendorEnquiry.SelectedValue[0]
				lblVendorDescription.Text = VendorEnquiry.SelectedValue[1]
				Vendor = Convert.ToInt32(txtVendor.Text)
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
			
	BegSr txtVendor_Validating Access(*Private) Event(*this.txtVendor.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		ErrPro.Clear()
		
		Try			
			Vendor = Convert.ToInt32(txtVendor.Text)
			
			If not ItemsBO.GetVendor(Vendor)
				ErrPro.SetControlError(sender *As Control,'Vendor is not defined or you are not authorised to it')
				lblVendorDescription.Text = String.Empty
				txtVendor.SelectAll()	
				txtVendor.Text = ""
			Else
				lblVendorDescription.Text = ItemsBO.VendorName
			EndIf
			
		Catch Name(Err) Type(System.Exception)
			If(ErrPro = *Nothing)
				ErrPro = *New Disney.Spice.ErrorProvider.ErrorProviderWithCount(*this.components)
			EndIf
			ErrPro.SetControlError(sender *As Control,'Vendor is not defined or you are not authorised to it')
			txtVendor.Text = ""				
		EndTry					


	EndSr
/EndRegion	
	
/Region Style
	BegSr txtStyle_validating Access(*Private) Event(*this.txtStyle.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		//Instance Class ItemsBO
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtStyle.Text)
			Try
				Style = Convert.ToInt16(txtStyle.Text)
				If( DataCache.IsStyleNumberInputRequired = *True )
					// Validate the style number
					If (Style = *Zero)
						ErrPro.SetControlError(txtStyle, 'Enter a style number.')
						LeaveSR
					EndIf
				EndIf
			Catch Name(Err) Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
				txtStyle.Focus()
				LeaveSR
			EndTry
			
			ItemsBO.Style  = Style
		EndIf
	EndSr
	
	BegSr txtStyle_Leave Access(*Private) Event(*this.txtStyle.Leave)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		ErrPro.Clear()
		
		If txtStyle.Text  = String.Empty
			txtStyle.Text = '0'
		Endif
	EndSr
/EndRegion

/Region Colour 
	BegSr ColourLookUp_Click Access(*Private) Event(*this.btnColour.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld ColourEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		ErrPro.Clear()
		
		SetMousePtr *HourGlass
		
		Try
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
			
			ErrPro.Clear()
			
			ItemsBO.GetColourTbl()
			
			If ColourEnquiry = *Nothing
				ColourEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("Colour"),"Colour")
			EndIf
			
			ColourEnquiry.ShowGrid()
			If ColourEnquiry.DialogResult = DialogResult.OK
				txtColour.Text            = ColourEnquiry.SelectedValue[0]
				lblColourDescription.Text = ColourEnquiry.SelectedValue[1]
				Colour = Convert.ToInt16(txtColour.Text)
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
					
	BegSr txtColour_validating Access(*Private) Event(*this.txtColour.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		DclFld StyleColour Type(Int16)	
		DclFld ChkStyle    Type(Boolean)	
		DclFld appExists     Type(Boolean)
		
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
				
		ErrPro.ClearAll()
		
//		ChkStyle = ItemsBO.ChkItemStyleUnique()
//		StyleColour = ItemsBO.GetItemStyleColour(Class, Vendor, Style)
//		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtColour.Text)
			Try
				Colour = Convert.ToInt16(txtColour.Text)
			Catch Name(Err) Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
				lblColourDescription.Text = String.Empty
				txtColour.Focus()
				LeaveSR
			EndTry
			
			// Check for existing APP 
			appExists = ItemsBO.ChkAPPMaster(Class, Vendor, Style, Colour, Constants.APP_SIZE)
			If (appExists = *True)			
				//ErrPro.SetControlError(sender *As Control,'Style Code already Exists with Different Colour')
				ErrPro.SetControlError(sender *As Control,'An identical APP master with that colour already exists.')
				txtColour.Focus()
				LeaveSR				
			EndIf

			// Check for existing bundle / APPB
			appExists = ItemsBO.ChkAPPMaster(Class, Vendor, Style, Colour, Constants.APPB_SIZE)
			If (appExists = *True)			
				//ErrPro.SetControlError(sender *As Control,'Style Code already Exists with Different Colour')
				ErrPro.SetControlError(sender *As Control,'An identical APP master with that color already exists.')
				txtColour.Focus()
				LeaveSR				
			EndIf
			
			/*			
			If ChkStyle = *False																										
				If Colour <> StyleColour and ItemsBO.ProtectColour <> 'Y'
					ErrPro.SetControlError(sender *As Control,'Style Code already Exists with Different Colour')
					txtColour.Focus()
					LeaveSR
				Endif
			Endif
			*/
														
			If not ItemsBO.GetColour(Colour) 
				ErrPro.SetControlError(txtColour,'Colour is not defined')
				txtColour.SelectAll()
			Else
				lblColourDescription.Text = ItemsBO.ColourName
			EndIf
			
		Else
			ErrPro.SetControlError(sender *As Control,'Please enter a Colour Code')
			lblColourDescription.Text = String.Empty
		EndIf
		
	EndSr
/EndRegion


/Region Item descriptions 
	BegSr txtLongDesc_validating Access(*Private) Event(*this.txtLongDescription.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
								
		//Instance Class Items
		If SpiceAPPItem  = *Nothing
			SpiceAPPItem = *New SpiceAPPItem(Pgmdb, User) 
		Endif
		
		ErrPro.Clear()				
		
		ItemCheck = SpiceAPPItem.ChkAPPMaster(Class, Vendor, Style, Colour, Size)	

		If ItemCheck = *True
			ErrPro.SetControlError(txtStyle,"This Item already exists as an APP Master Item")
			TxtStyle.Focus()
			LeaveSr
		Endif
						
		If txtLongDescription.Text = String.Empty
			ErrPro.SetControlError(txtLongDescription,"Please enter a long description")
			LeaveSr
		EndIf
		
		//Strip out Invalid Chars
		ReturnText = ItemsBO.ReplaceInvalidChrs(txtLongDescription.Text.ToString())
		
		If ReturnText <> txtLongDescription.Text
			txtLongDescription.Text = ReturnText
			MsgBox TITLE('Symbol Substitution') Msg('All invalid characters have been replaced with spaces.') ICON(*Information)
		Endif	
		
		If ReturnText = String.Empty	
			txtLongDescription.Select()
		Endif
		
		txtClass.Enabled  = *False
		txtVendor.Enabled = *False
		txtStyle.Enabled  = *False
	EndSr
			
	BegSr txtShortDesc_validating Access(*Private) Event(*this.txtShortDescription.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
						
		ErrPro.Clear()
		
		If txtShortDescription.Text = String.Empty
			ErrPro.SetControlError(sender *As Control,"Please enter a short description")
		EndIf	
		
		ReturnText = ItemsBO.ReplaceInvalidChrs(txtShortDescription.Text.ToString())
		
		If ReturnText <> txtShortDescription.Text
			txtShortDescription.Text = ReturnText
			MsgBox TITLE('Symbol Substitution') Msg('All invalid characters have been replaced with spaces.') ICON(*Information)
		Endif	
		
		If ReturnText = String.Empty	
			txtShortDescription.Select()
		Endif
			
	EndSr
/EndRegion	

/Region Vendor Style 
	BegSr txtVendorStyle_validating Access(*Private) Event(*this.txtVendorStyle.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
						
		ErrPro.Clear()
		
		If txtVendorStyle.Text = String.Empty
			ErrPro.SetControlError(sender *As Control,'Please enter a Vendor Style')
		EndIf
		
		ReturnText = ItemsBO.ReplaceInvalidChrs(txtVendorStyle.Text.ToString())
		
		If ReturnText <> txtVendorStyle.Text
			txtVendorStyle.Text = ReturnText
			MsgBox TITLE('Symbol Substitution') Msg('All invalid characters have been replaced with spaces.') ICON(*Information)
		Endif	
		
		If ReturnText = String.Empty	
			txtVendorStyle.Select()
		Endif
		
	EndSr
/EndRegion
	
/Region Developed By 
	BegSr cmbDevelopedBy_TextChanged Access(*Private)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		If cmbDevelopedBy.Text <> String.Empty
			DevelopedBy = cmbDevelopedBy.Text.SubString(0,3)
		EndIf
	EndSr
	
	BegSr cmbDevelopedBy_Leave Access(*Private) Event(*this.cmbDevelopedBy.Leave)
                DclSrParm sender *Object
                DclSrParm e System.EventArgs
                
                e = *New System.EventArgs()
                cmbDevelopedBy_TextChanged(sender *As Control,e)
	EndSr
/EndRegion
	
/Region Commodity  
	BegSr CommodityLookUp_Click Access(*Private) Event(*this.btnCommodityCode.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld CommodityEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		SetMousePtr *HourGlass
		
		Try
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
			
			ErrPro.Clear()
			
			ItemsBO.GetCommodityTbl()
			
			If CommodityEnquiry = *Nothing
				CommodityEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("Commodity"),"Commodity")
			EndIf
			
			CommodityEnquiry.ShowGrid()
			If CommodityEnquiry.DialogResult = DialogResult.OK
				txtCommodityCode.Text        = CommodityEnquiry.SelectedValue[0]
				lblCommodityCodeDesc.Text    = CommodityEnquiry.SelectedValue[1]
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
				
	BegSr txtCommodity_validating Access(*Private) Event(*this.txtCommodityCode.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.Clear()

		If Not String.IsNullOrEmpty(txtCommodityCode.Text)
			If not ItemsBO.GetCommodityCode(txtCommodityCode.Text)
				ErrPro.SetControlError(txtCommodityCode,'Commodity Code is not defined')
				lblCommodityCodeDesc.Text = String.Empty
				txtCommodityCode.SelectAll()
			Else
				lblCommodityCodeDesc.Text = ItemsBO.CommodityDescription
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Please enter a Commodity Code')
			lblCommodityCodeDesc.Text = String.Empty
		EndIf
	EndSr
/EndRegion
	
/Region Composition Code 
	BegSr CompoCodeLookUp_Click Access(*Private) Event(*this.btnCompositionCode.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld CompoCodeEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		SetMousePtr *HourGlass
		
		Try
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
			
			ErrPro.Clear()
			ItemsBO.GetCompositionTbl()
			
			If CompoCodeEnquiry = *Nothing
				CompoCodeEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("Composition"),"Composition")
			EndIf
			
			CompoCodeEnquiry.ShowGrid()
			If CompoCodeEnquiry.DialogResult = DialogResult.OK
				txtCompositionCode.Text      = CompoCodeEnquiry.SelectedValue[0]
				lblCompositionCodeDesc.Text  = CompoCodeEnquiry.SelectedValue[1]
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
			
	BegSr txtCompoCode_validating Access(*Private) Event(*this.txtCompositionCode.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtCompositionCode.Text)
			If not ItemsBO.GetCompositionCode(txtCompositionCode.Text)
				ErrPro.SetControlError(txtCompositionCode,'Composition Code is not defined')
				lblCompositionCodeDesc.Text = String.Empty
				txtCompositionCode.SelectAll()
			Else
				lblCompositionCodeDesc.Text = ItemsBO.CompositionDescription
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Please enter a Composition Code')
			lblCompositionCodeDesc.Text = String.Empty
		EndIf
	EndSr
/EndRegion	

/Region Country code
	BegSr CountryLookUp_Click Access(*Private) Event(*this.btnCountryOfOrigin.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld CountryEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		SetMousePtr *HourGlass
		
		Try
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
			
			ErrPro.Clear()
			
			ItemsBO.GetCountryTbl()
			
			If CountryEnquiry = *Nothing
				CountryEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("Country"),"Country")
			EndIf
			
			CountryEnquiry.ShowGrid()
			If CountryEnquiry.DialogResult  = DialogResult.OK
				txtCountryOfOrigin.Text     = CountryEnquiry.SelectedValue[0]
				lblCountryOfOriginDesc.Text = CountryEnquiry.SelectedValue[1]
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
				
	BegSr txtOrigin_Validating Access(*Private) Event(*this.txtCountryOfOrigin.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtCountryOfOrigin.Text)
			If Not ItemsBO.GetCountry(txtCountryOfOrigin.Text)
				ErrPro.SetControlError(sender *As Control,'Country code is not defined')
				lblCountryOfOriginDesc.Text = String.Empty
				txtCountryOfOrigin.SelectAll()
			Else
				lblCountryOfOriginDesc.Text = ItemsBO.CountryName
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Please enter a Country code')
			lblCountryOfOriginDesc.Text = String.Empty
		EndIf
	EndSr
/EndRegion
	
/Region Character 
	BegSr CharLookUp_Click Access(*Private) Event(*this.btnCharacterCode.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld CharEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		SetMousePtr *HourGlass
		
		Try
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
			
			ErrPro.Clear()
			
			ItemsBO.GetAllFamilyCharTbl("All Families")
			
			If CharEnquiry = *Nothing
				CharEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("Chars"),"Character")
			EndIf
			
			CharEnquiry.ShowGrid()
			If CharEnquiry.DialogResult   = DialogResult.OK
				txtCharacterCode.Text     = CharEnquiry.SelectedValue[0]
				lblCharacterCodeDesc.Text = CharEnquiry.SelectedValue[1]
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
			
	BegSr txtChar_validating Access(*Private) Event(*this.txtCharacterCode.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtCharacterCode.Text)
			If not ItemsBO.GetChar(txtCharacterCode.Text)
				ErrPro.SetControlError(txtCharacterCode,'Character is not defined')
				txtCharacterCode.SelectAll()
			Else
				lblCharacterCodeDesc.Text = ItemsBO.CharacterName
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Please enter a Character Code')
			lblCharacterCodeDesc.Text = String.Empty
		EndIf
	EndSr
/EndRegion	

/Region Season Code 
	BegSr SeasonLookUp_Click Access(*Private) Event(*this.btnSeasonCode.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld SeasonsEnquiry Type(Disney.Spice.LookUp.Enquiry)
		
		SetMousePtr *HourGlass
		
		Try
			//Instance Class Items
			If ItemsBO  = *Nothing
				ItemsBO = *New Items(Pgmdb, User, Environment) 
			Endif
					
			ErrPro.ClearAll()
			
			ItemsBO.GetSeasonsTbl()
			
			If SeasonsEnquiry = *Nothing
				SeasonsEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("Seasons"),"Seasons")
			EndIf
			
			SeasonsEnquiry.ShowGrid()
			If SeasonsEnquiry.DialogResult = DialogResult.OK
				txtSeasonCode.Text = SeasonsEnquiry.SelectedValue[0]
				lblSeasonCodeDesc.Text = SeasonsEnquiry.SelectedValue[1]
				
				If ItemsBO.PackOverrideable    <> 'Y' and ErrPro.ErrorCount = 0
						dgvItemAPAdd.Enabled       = *True
						btnAddComponent.Enabled    = *True
						btnRemoveComponent.Enabled = *True
						If(btnNext.Enabled <> *True)
							EnableOKNextButton()
						EndIf
				Endif
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry

	EndSr
	
	BegSr txtSeasonCode_Leave Access(*Private) Event(*this.txtSeasonCode.Leave)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		ErrPro.Clear()
		
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		ErrPro.ClearAll()
		
		If Not String.IsNullOrEmpty(txtSeasonCode.Text)
			If not ItemsBO.GetSeason(txtSeasonCode.Text)
				ErrPro.SetControlError(txtSeasonCode,'Season code is not defined')
				txtSeasonCode.SelectAll()
			Else
				lblSeasonCodeDesc.Text  = ItemsBO.SeasonDesc
												
				If ItemsBO.PackOverrideable    <> 'Y' and ErrPro.ErrorCount = 0
					dgvItemAPAdd.Enabled       = *True
					btnAddComponent.Enabled    = *True
					btnRemoveComponent.Enabled = *True
					If(btnNext.Enabled <> *True)
						EnableOKNextButton()
					EndIf
				Endif
			EndIf
			Else
				ErrPro.SetControlError(txtSeasonCode,'Season code is not defined')
		Endif
		
	EndSr				

/EndRegion

/Region Case/Pack Details
	BegSr cmbCasePack_TextChanged Access(*Private)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		ErrPro.Clear()
				
		//Instance Class Items
		If ItemsBO  = *Nothing
			ItemsBO = *New Items(Pgmdb, User, Environment) 
		Endif
		
		If cmbCasePack.Text <> String.Empty
			CasePackCode = cmbCasePack.Text.Substring(0,1)
			CasePack.GetCasePack(cmbCasePack.Text.Substring(0,1))
		
			txtWeight.Text = CasePack.PackWeight
			txtHeight.Text = CasePack.PackHeight
			txtLength.Text = CasePack.PackLength
			txtWidth.Text  = CasePack.PackWidth
									
			If CasePack.PackOverrideable    = 'Y'
				txtWeight.Enabled          = *true
				txtHeight.Enabled          = *true
				txtLength.Enabled          = *true
				txtWidth.Enabled           = *true
				dgvItemAPAdd.Enabled       = *False
				btnAddComponent.Enabled    = *False
				btnRemoveComponent.Enabled = *False
			Else
				txtWeight.Enabled = *false
				txtHeight.Enabled = *false
				txtLength.Enabled = *false
				txtWidth.Enabled  = *false
			EndIf
		EndIf
	EndSr
	
	BegSr cmbCasePack_Leave Access(*Private) Event(*this.cmbCasePack.Leave)
		DclSrParm sender *Object
        DclSrParm e System.EventArgs
                
        e = *New System.EventArgs()
        cmbCasePack_TextChanged(sender *As Control,e)
	EndSr
/EndRegion
	
/Region Case Pack Qty 
	BegSr txtCasePackQty_validating Access(*Private) Event(*this.txtCasePackQty.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
				
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtCasePackQty.Text)
			Try
				PackQty = Int16.Parse(txtCasePackQty.Text)
			Catch Err Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
			EndTry
			
			If PackQty < 1 Or PackQty > 9999
				ErrPro.SetControlError(sender *As Control,'Pack Quantity must be between 1 and 9999')
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Please enter a quantity')
		EndIf
	EndSr
/EndRegion

/Region Case Pack Weight 
	BegSr txtPackWeight_validating Access(*Private) Event(*this.txtWeight.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		ErrPro.Clear()
			
		If Not String.IsNullOrEmpty(txtWeight.Text)
			Try
				PackWeight = Decimal.Parse(txtWeight.Text)
			Catch Err Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
			EndTry
			
			If PackWeight < .01 Or PackWeight > 9999.99
				ErrPro.SetControlError(sender *As Control,'Pack Weight must be between .01 and 9999.99')
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Pack Weight must be Entered')
		EndIf
	EndSr
/EndRegion

/Region Case Pack Height 
	BegSr txtPackHeight_validating Access(*Private) Event(*this.txtHeight.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
						
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtHeight.Text)
			Try
				PackHeight = Decimal.Parse(txtHeight.Text)
			Catch Err Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
			EndTry
			
			If PackHeight < .01 Or PackHeight > 9999.99
				ErrPro.SetControlError(sender *As Control,'Pack Height must be between .01 and 9999.99')
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Pack Height must be Entered')
		EndIf
	EndSr
/EndRegion

/Region Case Pack Length 
	BegSr txtPackLength_validating Access(*Private) Event(*this.txtLength.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
				
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtLength.Text)
			Try
				PackLength = Decimal.Parse(txtLength.Text)
			Catch Err Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
			EndTry
			
			If PackLength < .01 Or PackLength > 9999.99
				ErrPro.SetControlError(sender *As Control,'Pack Length must be between .01 and 9999.99')
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Pack Length must be Entered')
		EndIf
	EndSr
/EndRegion

/Region Case Pack Width 
	BegSr txtWidth_Leave Access(*Private) Event(*this.txtWidth.Leave)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		ErrPro.Clear()
		
		If Not String.IsNullOrEmpty(txtWidth.Text)
			Try
				PackWidth = Decimal.Parse(txtWidth.Text)
			Catch Err Type(System.Exception)
				ErrPro.SetControlError(sender *As Control,'Invalid number')
				LeaveSR
			EndTry
			
			If PackWidth < .01 Or PackWidth > 9999.99
				ErrPro.SetControlError(sender *As Control,'Pack Width must be between .01 and 9999.99')
				LeaveSr
			EndIf
		Else
			ErrPro.SetControlError(sender *As Control,'Pack Width must be Entered')	
		EndIf
				
		*this.ValidateChildren()
		
		e = *New System.EventArgs()
        txtSeasonCode_Leave(sender *As Control,e)
						
		If ErrPro.ErrorCount = 0 
			dgvItemAPAdd.Enabled       = *True
			btnAddComponent.Enabled    = *True
			btnRemoveComponent.Enabled = *True
		Endif
	EndSr

/EndRegion

/Region Cell Validating
	BegSr dgvItemAPAdd_CellValidating Access(*Private) Event(*this.dgvItemAPAdd.CellValidating)
		DclSrParm sender *Object
		DclSrParm e System.Windows.Forms.DataGridViewCellValidatingEventArgs
		
		GridErrors = *False	
	
		Try
			Column     = e.ColumnIndex
			Row        = e.RowIndex
	
			dgvItemAPAdd.Item["clmQty",Row].ErrorText   = String.Empty
			
			GridClass = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmClass"].Value)
			GridVendor = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmVendor"].Value)
			GridStyle = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmStyle"].Value)
			GridColour = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmColour"].Value)
			GridSize = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmSize"].Value)
		
			//Dont validate the following columns
			If dgvItemAPAdd.Columns[Column].Name  <> "clmSelect"      and +
				dgvItemAPAdd.Columns[Column].Name <> "clmVendor"      and +
				dgvItemAPAdd.Columns[Column].Name <> "clmColourName"  and + 
				dgvItemAPAdd.Columns[Column].Name <> "clmSizeName"    and +
				dgvItemAPAdd.Columns[Column].Name <> "clmUPC"         and +
				dgvItemAPAdd.Columns[Column].Name <> "clmQty"
								
				dgvItemAPAdd.Rows[Row].ErrorText            = String.Empty
				dgvItemAPAdd.Item["clmClass",Row].ErrorText = String.Empty
				dgvItemAPAdd.Item["clmSize",Row].ErrorText  = String.Empty
				dgvItemAPAdd.Item["clmQty",Row].ErrorText   = String.Empty
						
				//Validate Class
				If dgvItemAPAdd.Rows[Row].ErrorText = String.Empty 
					If (dgvItemAPAdd.Columns[e.ColumnIndex].Name.Equals("clmClass")) 
						If Int16.TryParse(e.FormattedValue.ToString(), *ByRef GridClass) = *False
							dgvItemAPAdd.Rows[Row].ErrorText = "Please enter a valid Class"
							GridErrors = *True
							dgvItemAPAdd.Columns["clmQty"].ReadOnly  = *True
						Endif
					Endif
				Endif
											
				//Validate Style 
				If dgvItemAPAdd.Rows[Row].ErrorText = String.Empty
					If dgvItemAPAdd.Columns[e.ColumnIndex].Name.Equals("clmStyle")
						If Int16.TryParse(e.FormattedValue.ToString(), *ByRef GridStyle) = *False
							dgvItemAPAdd.Rows[Row].ErrorText = "Please enter a valid Style"
							GridErrors = *True
							dgvItemAPAdd.Columns["clmQty"].ReadOnly  = *True
						Endif
					Endif
				Endif
							
				//Validate Colour
				If dgvItemAPAdd.Rows[Row].ErrorText = String.Empty 
					If dgvItemAPAdd.Columns[e.ColumnIndex].Name.Equals("clmColour")
						If Int16.TryParse(e.FormattedValue.ToString(), *ByRef GridColour) = *False
							dgvItemAPAdd.Rows[Row].ErrorText = "Please enter a valid Colour"
							GridErrors = *True
							dgvItemAPAdd.Columns["clmQty"].ReadOnly  = *True
						Endif
					Endif
				Endif
							
				//Validate Size
				If dgvItemAPAdd.Rows[Row].ErrorText = String.Empty 
					If dgvItemAPAdd.Columns[e.ColumnIndex].Name.Equals("clmSize")
						If Int16.TryParse(e.FormattedValue.ToString(), *ByRef GridSize) = *False
							dgvItemAPAdd.Rows[Row].ErrorText = "Please enter a valid Size"
							GridErrors = *True
							dgvItemAPAdd.Columns["clmQty"].ReadOnly  = *True
						Endif
					Endif
				Endif
								
				//Check if Item is a valid Item
				If dgvItemAPAdd.Rows[Row].ErrorText = String.Empty and +               
					GridClass   <> String.Empty                    and +         
					GridVendor      <> String.Empty                    and +      
					GridStyle   <> String.Empty                    and +        
					GridColour  <> String.Empty                    and +
					GridSize    <> String.Empty 
					
					ItemCheck = ItemsBO.GetItem(GridClass, GridVendor, GridStyle, GridColour, GridSize, MasterMarket)

					If ItemCheck  = *False
						dgvItemAPAdd.Rows[Row].ErrorText = "Please enter a valid Item"
						GridErrors = *True
					Endif
				Endif
			Endif
		Catch Name(exc) Type(Exception)
			dgvItemAPAdd.Refresh()
		EndTry
		
	EndSr
/Endregion

/Region Cell Validated
	BegSr dgvItemAPAdd_CellValidated Access(*Private) Event(*this.dgvItemAPAdd.CellValidated)
		DclSrParm sender *Object
		DclSrParm e System.Windows.Forms.DataGridViewCellEventArgs
	
		Try
			Column     = e.ColumnIndex
			Row        = e.RowIndex
		
			GridClass = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmClass"].Value)
			GridVendor = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmVendor"].Value)
			GridStyle = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmStyle"].Value)
			GridColour = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmColour"].Value)
			GridSize = SafeInt16Value(dgvItemAPAdd.Rows[e.RowIndex].Cells["clmSize"].Value)
		
			//Dont validate the following columns
			If dgvItemAPAdd.Columns[Column].Name  <> "clmSelect"      and +
				dgvItemAPAdd.Columns[Column].Name <> "clmVendor"      and +
				dgvItemAPAdd.Columns[Column].Name <> "clmColourName"  and + 
				dgvItemAPAdd.Columns[Column].Name <> "clmSizeName"    and +
				dgvItemAPAdd.Columns[Column].Name <> "clmUPC"         and +
				dgvItemAPAdd.Columns[Column].Name <> "clmQty"
																
				//Once Size has been entered
				If dgvItemAPAdd.Rows[Row].ErrorText = String.Empty 
					If dgvItemAPAdd.Columns[e.ColumnIndex].Name.Equals("clmSize") and +
						dgvItemAPAdd.Item["clmSize", Row].Value.ToString() <> String.Empty
													
						//Check if Item is a valid Item
						If dgvItemAPAdd.Rows[Row].ErrorText = String.Empty	                             and +
							dgvItemAPAdd.Item["clmClass", Row].Value.ToString()  <> String.Empty         and +
							dgvItemAPAdd.Item["clmStyle", Row].Value.ToString()  <> String.Empty         and +
							dgvItemAPAdd.Item["clmColour", Row].Value.ToString() <> String.Empty         and +
							dgvItemAPAdd.Item["clmSize", Row].Value.ToString()   <> String.Empty
				
							ItemCheck = ItemsBO.GetItem(GridClass, GridVendor, GridStyle, GridColour, GridSize, MasterMarket)

							If ItemCheck  = *False
								dgvItemAPAdd.Rows[Row].ErrorText = "Please enter a valid Item"
								GridErrors = *True
							Endif
						Endif
											
						If  GridErrors = *False                          	                    
																			
							AddItemDetails()
							dgvItemAPAdd.Columns["clmQty"].ReadOnly  = *False
																			
							If MaxComponents = 1
								btnAddComponent.Enabled = *False
							Endif
						Endif
					Endif	
				Endif
			Endif	
		Catch Name(exc) Type(Exception)
			dgvItemAPAdd.Refresh()
		EndTry	
		
	EndSr
/EndRegion	

/Region Cell Enter 
	BegSr dgvItemAPAdd_CellEnter Access(*Private) Event(*this.dgvItemAPAdd.CellEnter)
		DclSrParm sender *Object
		DclSrParm e System.Windows.Forms.DataGridViewCellEventArgs
		
		Column     = e.ColumnIndex
		Row        = e.RowIndex
				
		//Initialise all new rows		
		If dgvItemAPAdd.Rows[Row].IsNewRow = *True  
			GridClass  = String.Empty
			GridStyle  = String.Empty
			GridColour = String.Empty
			GridSize   = String.Empty
			dgvItemAPAdd.Item["clmSelect",Row].Value        = *False 	
			dgvItemAPAdd.Item["clmClass",Row].Value         = String.Empty	
			dgvItemAPAdd.Item["clmStyle",Row].Value         = String.Empty
			dgvItemAPAdd.Item["clmColour",Row].Value        = String.Empty
			dgvItemAPAdd.Item["clmSize",Row].Value          = String.Empty
			dgvItemAPAdd.Item["clmQty",Row].Value           = String.Empty
			dgvItemAPAdd.Rows[Row].Cells["clmQty"].ReadOnly = *True
						
			If MaxComponents = 1
				dgvItemAPAdd.Item["clmClass",Row].Value = txtClass.Text.ToString().Trim()
				GridClass  = Convert.ToInt16(txtClass.Text.ToString().Trim())
				dgvItemAPAdd.Rows[Row].Cells["clmClass"].ReadOnly = *True
			Endif
				
			dgvItemAPAdd.Item["clmVendor",Row].Value = txtVendor.Text.ToString().Trim()	
			txtClass.Enabled            = *False
			txtVendor.Enabled           = *False
			txtStyle.Enabled            = *False
			txtColour.Enabled           = *False
			btnClass.Enabled            = *False
			btnVendor.Enabled           = *False
			btnColour.Enabled           = *False
		Endif
							
	EndSr
/EndRegion

/Region Size Table        
	BegSr CreateNoSizesTbl Access(*Private) 
	
		DclArray Keys    Type(DataColumn) Rank(1)
		
		ItemSizes = *New DataTable("ItemSizes")
		ItemSizes.Columns.Add(*New DataColumn("Select",      *TypeOf(Boolean)))
		ItemSizes.Columns.Add(*New DataColumn("SizeCode",    *TypeOf(Int16)))
		ItemSizes.Columns["SizeCode"].ReadOnly = *True
		ItemSizes.Columns.Add(*New DataColumn("SizeName",    *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("PackQty",     *TypeOf(Int32)))
		ItemSizes.Columns.Add(*New DataColumn("DistroQty",   *TypeOf(Int32)))
		ItemSizes.Columns.Add(*New DataColumn("UPC",         *TypeOf(Int64)))
		ItemSizes.Columns.Add(*New DataColumn("CasePackType",*TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("PackWeight",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PackHeight",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PackLength",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PackWidth",   *TypeOf(Decimal)))
		// Added JB 22/03/11
		ItemSizes.Columns.Add(*New DataColumn("Description",   *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("DescNonEnglish",   *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("SellingChannel",   *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("OfferEffectiveDate",   *TypeOf(Int64)))
		ItemSizes.Columns.Add(*New DataColumn("SellOutControl",   *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("SuppressBackOrderCard",   *TypeOf(Boolean)))
				
		Keys = *New DataColumn[] {ItemSizes.Columns("SizeCode")}
		ItemSizes.PrimaryKey = Keys			
			
	EndSR

	BegSr PopulateNoSizeTbl Access(*Private)
								
		drItemSizes = ItemSizes.NewRow()	
		drItemSizes["Select"]       = *True
		drItemSizes["SizeCode"]     = Size
		drItemSizes["SizeName"]     = 'NO SIZE'
		drItemSizes["PackQty"]      = txtCasePackQty.Text
		drItemSizes["DistroQty"]    = 1
		drItemSizes["UPC"]          = 0
		drItemSizes["CasePackType"] = CasePackCode
		drItemSizes["PackWeight"]   = txtWeight.Text
		drItemSizes["PackHeight"]   = txtHeight.Text
		drItemSizes["PackLength"]   = txtLength.Text
		drItemSizes["PackWidth"]    = txtWidth.Text
		drItemSizes["OfferEffectiveDate"] = 0				
		drItemSizes["SuppressBackOrderCard"] = *False
		drItemSizes["Description"] = Prefix + txtLongDescription.Text.ToString().Trim()
		drItemSizes["DescNonEnglish"] = txtLocalDescription.Text 
		If(APPType = "B")
			drItemSizes["SellingChannel"] = cboSellingChannel.SelectedValue.ToString()
		EndIf
								
		ItemSizes.Rows.Add(drItemSizes)
		
	EndSR
/EndRegion

	BegSr cboSellingChannel_TextChanged Access(*Private)   Event(*this.cboSellingChannel.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		EnableOKNextButton()
		
	EndSr

	BegFunc ItemForOnlineEcom Type(Boolean) Access(*Private)
		DclFld result Type(Boolean) Inz(*False)		
		DclFld dataRow Type(DataRow)
		DclFld forOnlineEcom Type(String)
		
		Try
			dataRow = ItemsBO.SpiceDataSet.Tables["SellingChannelTable"].Rows.Find(cboSellingChannel.SelectedValue.ToString())			
			If (dataRow <> *Nothing)		
				forOnlineEcom = dataRow["OnlineECOM"] *AS String				
				If (forOnlineEcom <> *Nothing)
					If (forOnlineEcom.Trim() = "Y")
						result = *True
					Else
						result = *False
					EndIf
				EndIf
			EndIf
		Catch Name(exc) Type(Exception)
			//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)
		EndTry
		
		LeaveSR result
	EndFunc
	
	BegSr btnNext_ChangeUICues Access(*Private) Event(*this.btnNext.ChangeUICues)
		DclSrParm sender *Object
		DclSrParm e System.Windows.Forms.UICuesEventArgs	
	EndSr

	BegSr txtBundleRetailPrice_Validating Access(*Private)   
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs		
		
		DclFld bundleRetailPrice Type(Decimal)
		
		ErrPro.Clear()
		
		Try
			Decimal.TryParse(*this.txtBundleRetailPrice.Text, *ByRef bundleRetailPrice)
			ItemsBO.GenerateRetailPriceTbl(bundleRetailPrice,*False,*True)
			
			If(bundleRetailPrice = 0)
				ErrPro.SetControlError(sender *As Control,'Please enter a retail price greater than zero.')
			EndIf
		Catch Name(Err) Type(System.Exception)
			ErrPro.SetControlError(sender *As Control,'Please enter a retail price greater than zero.')
			LeaveSR
		EndTry

	EndSr

	BegSr txtBundleRetailPrice_Leave Access(*Private)   
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
	EndSr
	
	BegSr frmItemAPPAdd_FormClosing Access(*Private) Event(*this.FormClosing)
		DclSrParm sender *Object
		DclSrParm e System.Windows.Forms.FormClosingEventArgs
		DclFld ReturnCode Type(Int16)
		
		If (DialogResult = DialogResult.Cancel *Or DialogResult = DialogResult.None)
			MsgBox TITLE('Add Assorted Pre-Pack') MSG('Are you sure you want to Cancel?') RtnCode(ReturnCode) Icon(*Question) Buttons(*YesNo)
			If ReturnCode = 6
				*this.DialogResult = DialogResult.Abort
			Else
				e.Cancel = *true
			EndIf
        EndIf
	EndSr
	
	BegSr cmbAPPType_SelectedValueChanged Access(*Private) 
		DclSrParm sender *Object
		DclSrParm e System.EventArgs	
	EndSr
	
	BegSr bttnMarketPrices_Click Access(*Private) Event(*this.bttnMarketPrices.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld bundleRetailPrice Type(Decimal)
		DclFld bundleRetailPrice2 Type(Decimal)
		
		ErrPro.Clear()
		
		SetMousePtr *HourGlass
		
		Try
			If(ItemsBO.Class = *Zero *OR txtClass.Text = String.Empty)
				ErrPro.SetControlError(txtClass,'Please select a Class.')
				LeaveSR
			EndIf
			
			Decimal.TryParse(*this.txtBundleRetailPrice.Text, *ByRef bundleRetailPrice)
			If(bundleRetailPrice = 0)
				ErrPro.SetControlError(bttnMarketPrices, "Please enter a bundle retail price greater than zero.")
				LeaveSR
			Else
				//If (PriceMatrixTbl = *Nothing)
					ItemsBO.GenerateRetailPriceTbl(bundleRetailPrice,*False,*True)
					PriceMatrixTbl = ItemsBO.SpiceDataSet.Tables["RetailPrice"]
					PriceMatrixTbl.Columns.Add(*New DataColumn("VAT", *TypeOf(String)))			
					PriceMatrixTbl.Columns.Add(*New DataColumn("Market", *TypeOf(String)))	
					
					ForEach marketPrice Collection(ItemsBO.SpiceDataSet.Tables["MarketSizes"].Rows) Type(DataRow)
						ForEach PriceMatrixRow Collection(PriceMatrixTbl.Rows) Type(DataRow)		
							If (PriceMatrixRow["Currency"] = marketPrice["CurrencyCode"])
								//PriceMatrixRow["Retail"] = marketPrice["Retail"]
								PriceMatrixRow["VAT"] = marketPrice["VAT"]
								PriceMatrixRow["Market"] = marketPrice["Market"]
							EndIf
							
							If (PriceMatrixRow["Currency"].ToString() = ItemsBO.BaseCurrency)
								PriceMatrixTbl.Rows.Remove(PriceMatrixRow)
							EndIf
						EndFor
					EndFor
//				Else	
//					ForEach PriceMatrixRow Collection(PriceMatrixTbl.Rows) Type(DataRow)
//						If (PriceMatrixRow["Currency"].ToString() = ItemsBO.BaseCurrency)					
//							Decimal.TryParse(PriceMatrixRow["Retail"].ToString(), *ByRef bundleRetailPrice2)
//							// Retail price change - regenerate price matrix
//							If(bundleRetailPrice2 <> bundleRetailPrice)
//								ItemsBO.GenerateRetailPriceTbl(bundleRetailPrice,*False,*True)
//								PriceMatrixTbl = ItemsBO.SpiceDataSet.Tables["RetailPrice"]
//								PriceMatrixTbl.Columns.Add(*New DataColumn("VAT", *TypeOf(String)))			
//								PriceMatrixTbl.Columns.Add(*New DataColumn("Market", *TypeOf(String)))							
//							EndIf
//						EndIf
//					EndFor	
//				EndIf
			EndIf	
					
			m_BundleRetailPriceForm = *New frmBundleRetailPrice(ItemsBO, Environment, PriceMatrixTbl)
			
			m_BundleRetailPriceForm.ShowDialog()
			
			m_MarketPricesFormVisited = *True
			lblMktPricesPrompt.Visible = *False
			
			ItemsBO.SpiceDataSet.Tables["MarketSizes"].Columns("VAT").ReadOnly = *False

			Try
				// Check for any zero values entered into Retail price grid
				dv = *New DataView(PriceMatrixTbl)
				dv.RowFilter = "Retail = 0"
				If dv.Count <> *Zero
					ErrPro.SetControlError(bttnMarketPrices,"One or more Retail prices are Zero")
				EndIf				
			Catch Name(exc) Type(Exception)
				//MsgBox TITLE('Error') Msg(exc.Message)  ICON(*Stop)			
			EndTry
						
			m_BundleRetailPriceForm.Hide()
		Catch Name(exc) Type(Exception)
		Finally
			SetMousePtr *Dft
		EndTry
	EndSr
	
	BegSr Form_Click Access(*Private) Event(*this.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs		
	EndSr
	
	BegSr btnOK_ClientSizeChanged Access(*Private) Event(*this.btnOK.ClientSizeChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs		
	EndSr
	
	BegSr txtSubClass_Validating Access(*Private) Event(*this.txtSubClass.Validating)
		DclSrParm sender *Object
		DclSrParm e System.ComponentModel.CancelEventArgs
		
		ErrPro.SetControlError(txtSubClass,String.Empty)
		If Not ItemsBO.Class.Equals(*Zero)
			If Not String.IsNullOrEmpty(txtSubClass.Text)
				If Not ItemsBO.GetSubClass(txtSubClass.Text,ItemsBO.Class)
					ErrPro.SetControlError(txtSubClass,'SubClass is not defined')
				Else
					lblSubClassDescr.Text = ItemsBO.SubClassName
				EndIf
			Else
				ErrPro.SetControlError(txtSubClass,'Please enter a SubClass')
			EndIf
		Else
			If txtSubClass.Text <> String.Empty
				ErrPro.SetControlError(btnClass,'A valid Class has to be entered before SubClass can be checked')
			EndIf
		EndIf		
	EndSr
	
	BegSr btnSubClassLookUp_Click Access(*Private) Event(*this.btnSubClassLookUp.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		DclFld SubClassEnquiry Type(Disney.Spice.LookUp.Enquiry)
		DclFld args Type(System.ComponentModel.CancelEventArgs)
		
		ErrPro.Clear()
		
		SetMousePtr *HourGlass
		
		Try
			ErrPro.SetControlError(txtSubClass,String.Empty)
			If ItemsBO.Class <> 0
				ItemsBO.GetSubClassTbl(ItemsBO.Class)
				
				If SubClassEnquiry = *Nothing
					SubClassEnquiry = *New Disney.Spice.LookUp.Enquiry(ItemsBO.SpiceDataSet.Tables("FilteredSubClass"),"SubClass")
				EndIf
				
				SubClassEnquiry.ShowGrid()
				If SubClassEnquiry.DialogResult = DialogResult.OK
					txtSubClass.Text     = SubClassEnquiry.SelectedValue[0]
					lblSubClassDescr.Text = SubClassEnquiry.SelectedValue[1]
					ErrPro.SetControlError(txtSubClass,String.Empty)
					
					args = *New System.ComponentModel.CancelEventArgs()
					txtSubClass_Validating(txtSubClass,args)
				EndIf
			Else
				ErrPro.SetControlError(sender *As Control,'Please select Class first.')
			EndIf
		Finally
			SetMousePtr *Dft
		EndTry
	EndSr
	
	BegSr Form_Leave Access(*Private) Event(*this.Leave)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs		
	EndSr
	
	BegSr txtColour_Click Access(*Private) Event(*this.txtColour.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
	EndSr

	BegSr dgvItemAPAdd_CellContentClick Access(*Private) Event(*this.dgvItemAPAdd.CellContentClick)
		DclSrParm sender *Object
		DclSrParm e System.Windows.Forms.DataGridViewCellEventArgs
	EndSr
	
	BegSr groupBox13_Enter Access(*Private) Event(*this.groupBox13.Enter)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
	EndSr
	
	BegSr txtLongDescription_TextChanged Access(*Private) Event(*this.txtLongDescription.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
	EndSr
	
	BegSr txtVendor_Leave Access(*Private) Event(*this.txtVendor.Leave)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		

	EndSr
	BegSr txtClass_Click Access(*Private) Event(*this.txtClass.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
	EndSr
EndClass
