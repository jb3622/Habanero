Using System
Using System.Text
Using System.Data
Using System.Collections
Using System.Diagnostics
Using System.Reflection
Using System.Text.RegularExpressions
Using Disney.DA.IP400
Using Disney.Menu

BegClass Items Access(*Public)
	
	/Region Declare fields
	DclFld PgmDB         Type(ASNA.VisualRPG.Runtime.Database) Access(*Private)
	DclFld User          Type(Disney.Menu.Users) Access(*Private)
	DclFld Environment   Type(Disney.Menu.Environments) Access(*Private)
	DclFld SpiceDS       Type(DataSet)       Access(*Private)
	DclFld SpiceItem     Type(SpiceItem)     Access(*Private)
	DclFld SpiceAPPItem	 Type(SpiceAPPItem)  Access(*Private)
	DclFld IPMRVENcls	 Type(IPMRVENcls)    Access(*Private) 
	DclFld IPITHDRcls	 Type(IPITHDRcls)    Access(*Private) 	
	DclFld ItemPos       Type(ItemPos)       Access(*Private)
	DclFld SaveItemStyle Type(System.Object) Access(*Private)
	
	DclFld pAppType		  Type(String)  Access(*Private) Inz(String.Empty)
	DclFld pDescription   Type(String)  Access(*Private) Inz(String.Empty)
	DclFld pPrefix        Type(String)  Access(*Private) Inz(String.Empty)
	DclFld pMaxComponents Type(Decimal) Access(*Private) Inz(0)
	DclFld pProtectColour Type(String)  Access(*Private) Inz(String.Empty)
	DclFld pDefaultColour Type(Decimal) Access(*Private) Inz(0)
	DclFld pProtectSize   Type(String)  Access(*Private) Inz(String.Empty)
	DclFld pDefaultSize   Type(Decimal) Access(*Private) Inz(0)
	
	DclFld pClassSizeGroup Type(Int16) Access(*Private) Inz(0)
	DclFld DataTbl   Type(DataTable) Access(*Private)
	DclFld DataR   Type(DataRow) Access(*Private)
	/EndRegion
	
	BegConstructor Access(*Public)
		DclSrParm PgmDB Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm User  Type(Disney.Menu.Users)
		DclSrParm Environment Type(Disney.Menu.Environments)
		
		*this.PgmDB = PgmDB
		*this.User  = User
		*this.Environment = Environment
		
		SetDepartmentTbl()
		SetMarketsTbl()
	EndConstructor
	
	/Region Properties
	BegProp SpiceDataSet Type(DataSet) Access(*Public)
		BegGet
			LeaveSR SpiceDS
		EndGet
		BegSet
			SpiceDS = *PropVal
		EndSet	
	EndProp
	
	BegProp DataBaseConnection Type(ASNA.VisualRPG.Runtime.Database) Access(*Public)
		BegGet
			LeaveSR PgmDB
		EndGet	
	EndProp
	
	/Region Department
	DclFld pDept Type(Int16) Access(*Private) Inz(0)
	BegProp Department Type(Int16) Access(*Public)
		BegGet
			LeaveSR pDept
		EndGet
	EndProp
	
	DclFld pDeptName Type(String) Access(*Private) Inz(String.Empty)
	BegProp DepartmentName Type(String) Access(*Public)
		BegGet
			LeaveSR pDeptName
		EndGet
	EndProp
	
	DclFld pDeptDiv Type(Int16) Access(*Private) Inz(0)
	BegProp DepartmentDivision Type(Int16) Access(*Public)
		BegGet
			LeaveSR pDeptDiv
		EndGet
	EndProp
	/Endregion
	
	/Region Market details
	DclFld pMarketName Type(String) Access(*Private) Inz(String.Empty)
	BegProp MarketName Type(String) Access(*Public)
		BegGet
			LeaveSR pMarketName
		EndGet
	EndProp
	
	DclFld pMarketCcy Type(String) Access(*Private) Inz(String.Empty)
	BegProp MarketCurrency Type(String) Access(*Public)
		BegGet
			LeaveSR pMarketCcy
		EndGet
	EndProp
	/Endregion
	
	/Region Class
	DclFld pClass Type(Int16) Access(*Private) Inz(0)
	BegProp Class Type(Int16) Access(*Public)
		BegGet
			LeaveSR pClass
		EndGet
	EndProp

	DclFld pClassName Type(String) Access(*Private) Inz(String.Empty)
	BegProp ClassName Type(String) Access(*Public)
		BegGet
			LeaveSR pClassName
		EndGet
	EndProp
	
	DclFld pDepartment Type(Int16) Access(*Private) Inz(0)
	BegProp ClassDepartment Type(Int16) Access(*Public)
		BegGet
			LeaveSR pDepartment
		EndGet
	EndProp
	
	DclFld pDivision Type(Int16) Access(*Private) Inz(0)
	BegProp ClassDivision Type(Int16) Access(*Public)
		BegGet
			LeaveSR pDivision
		EndGet
	EndProp
	
	DclFld pClassStatus Type(Boolean) Access(*Private) 
	BegProp ClassStatus Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pClassStatus
		EndGet
	EndProp
	/EndRegion
	
	/Region Vendor properties
	DclFld pVendor Type(Int32) Access(*Private) Inz(0)
	BegProp VendorCode Type(Int32) Access(*Public)
		BegGet
			LeaveSR pVendor
		EndGet
	EndProp
	
	DclFld pVendorName Type(String) Access(*Private) Inz(String.Empty)
	BegProp VendorName Type(String) Access(*Public)
		BegGet
			LeaveSR pVendorName
		EndGet
	EndProp
	
	DclFld pVendorTerms Type(String) Access(*Private) Inz(String.Empty)
	BegProp VendorTerms Type(String) Access(*Public)
		BegGet
			LeaveSR pVendorTerms
		EndGet
	EndProp
	
	DclFld pVendorTermsDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp VendorTermsDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pVendorTermsDesc
		EndGet
	EndProp
	
	DclFld pVendorCcy   Type(String) Access(*Private) Inz(String.Empty)
	BegProp VendorCurrency Type(String) Access(*Public)
		BegGet
			LeaveSR pVendorCcy
		EndGet
	EndProp
	
	DclFld pVendorShipV Type(String) Access(*Private) Inz(String.Empty)
	BegProp VendorShipVia Type(String) Access(*Public)
		BegGet
			LeaveSR pVendorShipV
		EndGet
	EndProp
	/EndRegion
	
	/Region Style
	DclFld pStyle Type(Int16) Access(*Private) Inz(0)
	BegProp Style Type(Int16) Access(*Public)
		BegGet
			LeaveSR pStyle
		EndGet
		BegSet
			pStyle = *PropVal
		EndSet
	EndProp
	/EndRegion
	
	/Region Colour and Size
	DclFld pColour Type(Int16) Access(*Private) Inz(0)
	BegProp Colour Type(Int16) Access(*Public)
		BegGet
			LeaveSR pColour
		EndGet
	EndProp
	
	DclFld pColourName Type(String) Access(*Private) Inz(String.Empty)
	BegProp ColourName Type(String) Access(*Public)
		BegGet
			LeaveSR pColourName
		EndGet
	EndProp
	
	DclFld pSize Type(Int16) Access(*Private) Inz(0)
	BegProp Size Type(Int16) Access(*Public)
		BegGet
			LeaveSR pSize
		EndGet
		BegSet
			pSize = *PropVal
		EndSet
	EndProp
	
	DclFld pSizeName Type(String) Access(*Private) Inz(String.Empty)
	BegProp SizeName Type(String) Access(*Public)
		BegGet
			LeaveSR pSizeName
		EndGet
	EndProp
	/EndRegion
	
	/Region Character Code 
	DclFld pCharCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp CharacterCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCharCode
		EndGet
	EndProp
	
	DclFld pCharName Type(String) Access(*Private) Inz(String.Empty)
	BegProp CharacterName Type(String) Access(*Public)
		BegGet
			LeaveSR pCharName
		EndGet
	EndProp
	
	DclFld pPendCharCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp PendingCharacterCode Type(String) Access(*Public)
		BegGet
			LeaveSR pPendCharCode
		EndGet
		BegSet
			pPendCharCode = *PropVal
		EndSet
	EndProp
	/EndRegion
	
	/Region Season code
	DclFld pSeasonCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp SeasonCode Type(String) Access(*Public)
		BegGet
			LeaveSR pSeasonCode
		EndGet
		BegSet
			pSeasonCode = *PropVal
		EndSet
	EndProp
	
	DclFld pSeasonDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp SeasonDesc Type(String) Access(*Public)
		BegGet
			LeaveSR pSeasonDesc
		EndGet
	EndProp
	
	DclFld pSeasonStatus Type(Boolean) Access(*Private)
	BegProp SeasonStatus Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pSeasonStatus
		EndGet
	EndProp
	/EndRegion
	
	/Region Licence code
	DclFld pLicenceCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp LicenceCode Type(String) Access(*Public)
		BegGet
			LeaveSR pLicenceCode
		EndGet
		BegSet
			pLicenceCode = *PropVal
		EndSet
	EndProp

	DclFld pLicenceDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp LicenceDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pLicenceDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region Commodity Code
	DclFld pCommodityCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp CommodityCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCommodityCode
		EndGet
	EndProp
	
	DclFld pCommodityDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp CommodityDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pCommodityDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region Composition code
	DclFld pCompoCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp CompositionCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCompoCode
		EndGet
	EndProp
	
	DclFld pCompoCodeDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp CompositionDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pCompoCodeDesc
		EndGet
	EndProp
	
	DclFld pCompoStatus Type(Boolean) Access(*Private)
	BegProp CompositionStatus Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pCompoStatus
		EndGet
	EndProp
	/EndRegion
	
	/Region Promotion code
	DclFld pPromotion Type(String) Access(*Private) Inz(String.Empty)
	BegProp PromotionCode Type(String) Access(*Public)
		BegGet
			LeaveSR pPromotion
		EndGet
		BegSet
			pPromotion = *PropVal
		EndSet
	EndProp
	
	DclFld pPromotionDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp PromotionDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pPromotionDesc
		EndGet
	EndProp
	
	DclFld pPromotionStatus Type(Boolean) Access(*Private)
	BegProp PromotionStatus Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pPromotionStatus
		EndGet
	EndProp
	
	DclFld pPendingPromotion Type(String) Access(*Private) Inz(String.Empty)
	BegProp PendingPromotionCode Type(String) Access(*Public)
		BegGet
			LeaveSR pPendingPromotion
		EndGet
	EndProp
	/EndRegion
	
	/Region Item Descriptions
	DclFld pLongDescription Type(String) Access(*Private) Inz(String.Empty)
	BegProp ItemLongDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pLongDescription
		EndGet
		BegSet
			pLongDescription = *PropVal
		EndSet
	EndProp
	
	DclFld pShortDescription Type(String) Access(*Private) Inz(String.Empty)
	BegProp ItemShortDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pShortDescription
		EndGet
		BegSet
			pShortdescription = *PropVal
		EndSet
	EndProp
	/EndRegion
	
	/Region Style Cost and Retail
	DclFld pStyleCost Type(Decimal) Access(*Private) Inz(0)
	BegProp StyleCost Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pStyleCost
		EndGet
		BegSet
			pStyleCost = *PropVal
		EndSet
	EndProp
	
	DclFld pStyleRetail Type(Decimal) Access(*Private) Inz(0)
	BegProp StyleRetail Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pStyleRetail
		EndGet
		BegSet
			pStyleRetail = *PropVal
		EndSet
	EndProp
	
	DclFld pDescription Type(String) Access(*Private) Inz(String.Empty)
	BegProp Description Type(String) Access(*Public)
		BegGet
			LeaveSR pDescription
		EndGet
		BegSet
			pDescription = *PropVal
		EndSet
	EndProp
	
	DclFld pSellingChannel Type(String) Access(*Private) Inz(String.Empty)
	BegProp SellingChannel Type(String) Access(*Public)
		BegGet
			LeaveSR pSellingChannel
		EndGet
		BegSet
			pSellingChannel = *PropVal
		EndSet
	EndProp
		
	DclFld pForOnlineEcommerce Type(String) Access(*Private) Inz(String.Empty)
	BegProp ForOnlineEcommerce Type(String) Access(*Public)
		BegGet
			LeaveSR pForOnlineEcommerce
		EndGet
		BegSet
			pForOnlineEcommerce = *PropVal
		EndSet
	EndProp
	
	DclFld pOfferEffectiveDate Type(Int32) Access(*Private) Inz(0)
	BegProp OfferEffectiveDate Type(Int32) Access(*Public)
		BegGet
			LeaveSR pOfferEffectiveDate
		EndGet
		BegSet
			pOfferEffectiveDate = *PropVal
		EndSet
	EndProp
	
	DclFld pDropShip Type(String) Access(*Private) Inz(String.Empty)
	BegProp DropShip Type(String) Access(*Public)
		BegGet
			LeaveSR pDropShip
		EndGet
		BegSet
			pDropShip = *PropVal
		EndSet
	EndProp
	
	DclFld pItemShipAlone Type(String) Access(*Private) Inz(String.Empty)
	BegProp ItemShipAlone Type(String) Access(*Public)
		BegGet
			LeaveSR pItemShipAlone
		EndGet
		BegSet
			pItemShipAlone = *PropVal
		EndSet
	EndProp
	
	DclFld pSpecialHandling Type(String) Access(*Private) Inz(String.Empty)
	BegProp SpecialHandling Type(String) Access(*Public)
		BegGet
			LeaveSR pSpecialHandling
		EndGet
		BegSet
			pSpecialHandling = *PropVal
		EndSet
	EndProp
	
	DclFld pSpecialHandlingCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp SpecialHandlingCode Type(String) Access(*Public)
		BegGet
			LeaveSR pSpecialHandlingCode
		EndGet
		BegSet
			pSpecialHandlingCode = *PropVal
		EndSet
	EndProp
	
	DclFld pSellOutControl Type(String) Access(*Private) Inz(String.Empty)
	BegProp SellOutControl Type(String) Access(*Public)
		BegGet
			LeaveSR pSellOutControl
		EndGet
		BegSet
			pSellOutControl = *PropVal
		EndSet
	EndProp

	DclFld pSuppressBackOrderCard Type(Boolean) Access(*Private) 
	BegProp SuppressBackOrderCard Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pSuppressBackOrderCard
		EndGet
		BegSet
			pSuppressBackOrderCard = *PropVal
		EndSet
	EndProp
		
	DclFld pThirdPartySeller Type(Decimal) Access(*Private) Inz(0)
	BegProp ThirdPartySeller Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pThirdPartySeller
		EndGet
		BegSet
			pThirdPartySeller = *PropVal
		EndSet
	EndProp
	
	DclFld pUserField1 Type(String) Access(*Private) Inz(String.Empty)
	BegProp UserField1 Type(String) Access(*Public)
		BegGet
			LeaveSR pUserField1
		EndGet
		BegSet
			pUserField1 = *PropVal
		EndSet
	EndProp
	
	DclFld pUserField2 Type(String) Access(*Private) Inz(String.Empty)
	BegProp UserField2 Type(String) Access(*Public)
		BegGet
			LeaveSR pUserField2
		EndGet
		BegSet
			pUserField2 = *PropVal
		EndSet
	EndProp
	
	DclFld pDCNotes Type(String) Access(*Private) Inz(String.Empty)
	BegProp DCNotes Type(String) Access(*Public)
		BegGet
			LeaveSR pDCNotes
		EndGet
		BegSet
			pDCNotes = *PropVal
		EndSet
	EndProp
	
	
	
	/EndRegion
	
	/Region Item Cost and Retail
	DclFld pItemCost Type(Decimal) Access(*Private) Inz(0)
	BegProp ItemCost Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pItemCost
		EndGet
		BegSet
			pItemCost = *PropVal
		EndSet
	EndProp
	
	DclFld pItemRetail Type(Decimal) Access(*Private) Inz(0)
	BegProp ItemRetail Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pItemRetail
		EndGet
		BegSet
			pItemRetail = *PropVal
		EndSet
	EndProp
	
	DclFld pListPrice Type(Decimal) Access(*Private) Inz(0)
	BegProp ListPrice Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pListPrice
		EndGet
	EndProp
	/EndRegion
	
	/Region APP flag
	DclFld pAPP Type(String) Access(*Private) Inz(String.Empty)
	BegProp APP Type(String) Access(*Public)
		BegGet
			LeaveSR pAPP
		EndGet
	EndProp
	/Endregion
	
	/Region APP Descriptions
	DclFld pLongDescription Type(String) Access(*Private) Inz(String.Empty)
	BegProp LongDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pLongDescription
		EndGet
		BegSet
			pLongDescription = *PropVal
		EndSet
	EndProp
	
	DclFld pLocalDescription Type(String) Access(*Private) Inz(String.Empty)
	BegProp LocalDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pLocalDescription
		EndGet
		BegSet
			pLocalDescription = *PropVal
		EndSet
	EndProp
	
	DclFld pShortDescription Type(String) Access(*Private) Inz(String.Empty)
	BegProp ShortDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pShortDescription
		EndGet
		BegSet
			pShortDescription = *PropVal
		EndSet
	EndProp
	/Endregion
	
	/Region Pack details
	DclFld pPackCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp PackCode Type(String) Access(*Public)
		BegGet
			LeaveSR pPackCode
		EndGet
		BegSet
			pPackCode = *PropVal
		EndSet
	EndProp
	
	DclFld pPackDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp PackDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pPackDesc
		EndGet
	EndProp
		
	DclFld pPackHeight Type(Decimal) Access(*Private) Inz(0)
	BegProp PackHeight Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPackHeight
		EndGet
		BegSet
			pPackHeight = *PropVal
		EndSet
	EndProp
	
	DclFld pPackWidth Type(Decimal) Access(*Private) Inz(0)
	BegProp PackWidth Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPackWidth
		EndGet
		BegSet
			pPackWidth = *PropVal
		EndSet
	EndProp
	
	DclFld pPackLength Type(Decimal) Access(*Private) Inz(0)
	BegProp PackLength Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPackLength
		EndGet
		BegSet
			pPackLength = *PropVal
		EndSet
	EndProp
	
	DclFld pPackWeight Type(Decimal) Access(*Private) Inz(0)
	BegProp PackWeight Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPackWeight
		EndGet
		BegSet
			pPackWeight = *PropVal
		EndSet
	EndProp
	
	DclFld pPackOverride Type(String) Access(*Private) Inz(String.Empty)
	BegProp PackOverrideable Type(String) Access(*Public)
		BegGet
			LeaveSR pPackOverride
		EndGet
		BegSet
			pPackOverride = *PropVal
		EndSet
	EndProp
	
	DclFld pPackCodeDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp PackCodeDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pPackCodeDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region Ports
	DclFld pPortCode Type(Int32) Access(*Private) Inz(0)
	BegProp PortOfDeparture Type(Int32) Access(*Public)
		BegGet
			LeaveSR pPortCode
		EndGet
	EndProp
	
	DclFld pPortDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp PortDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pPortDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region Delivery terms
	DclFld pDelTerms Type(String) Access(*Private) Inz(String.Empty)
	BegProp DelTerms Type(String) Access(*Public)
		BegGet
			LeaveSR pDelTerms
		EndGet
	EndProp
	
	DclFld pDelTermsDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp DelTermsDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pDelTermsDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region Ship via
	DclFld pShipVia Type(String) Access(*Private) Inz(String.Empty)
	BegProp ShipVia Type(String) Access(*Public)
		BegGet
			LeaveSR pShipVia
		EndGet
	EndProp
	
	DclFld pShipViaDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp ShipViaDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pShipViaDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region UPC flag
	DclFld pUPC Type(Int64) Access(*Private) Inz(0)
	BegProp UPC Type(Int64) Access(*Public)
		BegGet
			LeaveSR pUPC
		EndGet
		BegSet
			pUPC = *PropVal
		EndSet
	EndProp
	/EndRegion
	
	/Region Case Quantities
	DclFld pCaseQty Type(Int32) Access(*Private) Inz(0)
	BegProp CaseQuantity Type(Int32) Access(*Public)
		BegGet
			LeaveSR pCaseQty
		EndGet
		BegSet
			pCaseQty = *PropVal
		EndSet
	EndProp
	
	DclFld pDistroQty Type(Int32) Access(*Private) Inz(0)
	BegProp DistroQuantity Type(Int32) Access(*Public)
		BegGet
			LeaveSR pDistroQty
		EndGet
		BegSet
			pDistroQty = *PropVal
		EndSet
	EndProp
	/EndRegion
	
	/Region VendorStyle
	DclFld pVendorStyle Type(String) Access(*Private) Inz(String.Empty)
	BegProp VendorStyle Type(String) Access(*Public)
		BegGet
			LeaveSR pVendorStyle
		EndGet
		BegSet
			pVendorStyle = *PropVal
		EndSet
	EndProp
	/EndRegion
	
	/Region Subclass
	DclFld pSubClass Type(String) Access(*Private) Inz(String.Empty)
	BegProp SubClass Type(String) Access(*Public)
		BegGet
			LeaveSR pSubClass
		EndGet
		BegSet
			pSubClass = *PropVal
		EndSet
	EndProp
	
	DclFld pSubClassName Type(String) Access(*Private) Inz(String.Empty)
	BegProp SubClassName Type(String) Access(*Public)
		BegGet
			LeaveSR pSubClassName
		EndGet
	EndProp
	
	DclFld pPendSubClass Type(String) Access(*Private) Inz(String.Empty)
	BegProp PendingSubClass Type(String) Access(*Public)
		BegGet
			LeaveSR pPendSubClass
		EndGet
		BegSet
			pPendSubClass = *PropVal
		EndSet
	EndProp
	/EndRegion
	
	/Region Ticket type
	DclFld pTicketType Type(String) Access(*Private) Inz(String.Empty)
	BegProp TicketType Type(String) Access(*Public)
		BegGet
			LeaveSR pTicketType
		EndGet
		BegSet
			pTicketType = *PropVal
		EndSet
	EndProp
	
	DclFld pTicketTypeDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp TicketTypeDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pTicketTypeDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region VAT code
	DclFld pVAT Type(String) Access(*Private) Inz(String.Empty)
	BegProp VatCode Type(String) Access(*Public)
		BegGet
			LeaveSR pVAT
		EndGet
	EndProp
	
	DclFld pPendVAT Type(String) Access(*Private) Inz(String.Empty)
	BegProp PendingVATcode Type(String) Access(*Public)
		BegGet
			LeaveSR pPendVAT
		EndGet
	EndProp
	/EndRegion
	
	/Region Age Group
	DclFld pAgeGroup  Type(String) Access(*Private) Inz(String.Empty)
	BegProp AgeGroupID Type(String) Access(*Public)
		BegGet
			LeaveSR pAgeGroup
		EndGet
		BegSet
			pAgeGroup = *PropVal
		EndSet
	EndProp
	
	DclFld pAgeGrpDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp AgeGroupDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pAgeGrpDesc
		EndGet
	EndProp
	/EndRegion
	
	/Region Country
	DclFld pCountryCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp CountryCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCountryCode
		EndGet
	EndProp
	
	DclFld pCountryDesc Type(String) Access(*Private) Inz(String.Empty)
	BegProp CountryName Type(String) Access(*Public)
		BegGet
			LeaveSR pCountryDesc
		EndGet
	EndProp
	/EndRegion
	
	DclFld pMarketSelected Type(String) Access(*Private) Inz(String.Empty)
	BegProp SelectedMarkets Type(String) Access(*Public)
		BegGet
			LeaveSR pMarketSelected
		EndGet
		BegSet
			pMarketSelected = *PropVal
		EndSet
	EndProp
	
	DclFld pBaseCcy Type(String) Access(*Private) Inz(String.Empty)
	BegProp BaseCurrency Type(String) Access(*Public)
		BegGet
			LeaveSR pBaseCcy
		EndGet
		BegSet
			pBaseCcy = *PropVal
		EndSet
	EndProp
	
	DclFld pBaseMarket Type(String) Access(*Private) Inz(String.Empty)
	BegProp BaseMarket Type(String) Access(*Public)
		BegGet
			LeaveSR pBaseMarket
		EndGet
	EndProp
			
	DclFld pGenderCode  Type(String) Access(*Private) Inz(String.Empty)
	BegProp GenderCode Type(String) Access(*Public)
		BegGet
			LeaveSR pGenderCode
		EndGet
		BegSet
			pGenderCode = *PropVal
		EndSet
	EndProp
	
	DclFld pOnlineInd Type(String) Access(*Private) Inz(String.Empty)
	BegProp OnlineInd Type(String) Access(*Public)
		BegGet
			LeaveSR pOnlineInd
		EndGet
		BegSet
			pOnlineInd = *PropVal
		EndSet
	EndProp
	
	DclFld pLocationInd Type(String) Access(*Private) Inz(String.Empty)
	BegProp LocationInd Type(String) Access(*Public)
		BegGet
			LeaveSR pLocationInd
		EndGet
		BegSet
			pLocationInd = *PropVal
		EndSet
	EndProp
	
	DclFld pImpDomInd Type(String) Access(*Private) Inz(String.Empty)
	BegProp ImportDomesticInd Type(String) Access(*Public)
		BegGet
			LeaveSR pImpDomInd
		EndGet
		BegSet
			pImpDomInd = *PropVal
		EndSet
	EndProp
	
	DclFld pSKU Type(Int32) Access(*Private) Inz(0)
	BegProp SKU Type(Int32) Access(*Public)
		BegGet
			LeaveSR pSKU
		EndGet
	EndProp
	
	DclFld pSKUchk Type(Int16) Access(*Private) Inz(0)
	BegProp SKUcheck Type(Int16) Access(*Public)
		BegGet
			LeaveSR pSKUchk
		EndGet
	EndProp
	
	BegProp AppType Type(String) Access(*Public)
		BegGet
			LeaveSR pAppType
		EndGet
		BegSet
			pAppType = *PropVal
		EndSet
	EndProp
	
	BegProp AppDesc Type(String) Access(*Public)
		BegGet
			If(pDescription = *Nothing)
				pDescription = String.Empty
			EndIf
			LeaveSR pDescription
		EndGet
		BegSet
			pDescription = *PropVal
		EndSet
	EndProp
	
	BegProp Prefix Type(String) Access(*Public)
		BegGet
			LeaveSR pPrefix
		EndGet
		BegSet
			pPrefix = *PropVal
		EndSet
	EndProp
	
	BegProp MaxComponents Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pMaxComponents
		EndGet
		BegSet
			pMaxComponents = *PropVal
		EndSet
	EndProp
	
	BegProp ProtectColour Type(String) Access(*Public)
		BegGet
			LeaveSR pProtectColour
		EndGet
		BegSet
			pProtectColour = *PropVal
		EndSet
	EndProp
	
	BegProp DefaultColour Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pDefaultColour
		EndGet
		BegSet
			pDefaultColour = *PropVal
		EndSet
	EndProp
	
	BegProp ProtectSize Type(String) Access(*Public)
		BegGet
			LeaveSR pProtectSize
		EndGet
		BegSet
			pProtectSize = *PropVal
		EndSet
	EndProp
	
	BegProp DefaultSize Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pDefaultSize
		EndGet
		BegSet
			pDefaultSize = *PropVal
		EndSet
	EndProp
	
	/Region Style audit fields
	DclFld pStyleCreateDateTime Type(DateTime) Access(*Private)
	BegProp StyleCreateDateTime Type(DateTime) Access(*Public)
		BegGet
			LeaveSR pStyleCreateDateTime
		EndGet
	EndProp
	
	DclFld pStyleCreateUser Type(String) Access(*Private) Inz(String.Empty)
	BegProp StyleCreateUser Type(String) Access(*Public)
		BegGet
			LeaveSR pStyleCreateUser
		EndGet
	EndProp
	
	DclFld pStyleChangeDateTime Type(DateTime) Access(*Private)
	BegProp StyleChangeDateTime Type(DateTime) Access(*Public)
		BegGet
			LeaveSR pStyleChangeDateTime
		EndGet
	EndProp
	
	DclFld pStyleChangeUser Type(String) Access(*Private) Inz(String.Empty)
	BegProp StyleChangeUser Type(String) Access(*Public)
		BegGet
			LeaveSR pStyleChangeUser
		EndGet
	EndProp
	/EndRegion
	
	/Region Currency details
	DclFld pCurrencyName Type(String) Access(*Private) Inz(String.Empty)
	BegProp CurrencyName Type(String) Access(*Public)
		BegGet
			LeaveSR pCurrencyName
		EndGet
	EndProp
	
	DclFld pCurrencyRate Type(Decimal) Access(*Private) Inz(0)
	BegProp CurrencyRate Type(Decimal) Access(*Public) 
		BegGet
			LeaveSR pCurrencyRate
		EndGet
	EndProp
	
	DclFld pCurrencyCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp CurrencyCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCurrencyCode
		EndGet
	EndProp
	/EndRegion
	
	/Region Pending Case Pack Details
	DclFld pPendingCasePackType Type(String) Access(*Private) Inz(String.Empty)
	BegProp PendingCasePackType Type(String) Access(*Public)
		BegGet
			LeaveSR pPendingCasePackType
		EndGet
		BegSet
			pPendingCasePackType = *PropVal
		EndSet
	EndProp
	
	DclFld pPendingCasePackQty Type(Int16) Access(*Private) Inz(0)
	BegProp PendingCasePackQty Type(Int16) Access(*Public)
		BegGet
			LeaveSR pPendingCasePackQty
		EndGet
		BegSet
			pPendingCasePackQty = *PropVal
		EndSet
	EndProp
	
	DclFld pPendingDistroInnerQty Type(Int32) Access(*Private) Inz(0)
	BegProp PendingDistroInnerQty Type(Int32) Access(*Public)
		BegGet
			LeaveSR pPendingDistroInnerQty
		EndGet
		BegSet
			pPendingDistroInnerQty = *PropVal
		EndSet
	EndProp
	
	DclFld pPendingWeight Type(Decimal) Access(*Private) Inz(0)
	BegProp PendingWeight Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPendingWeight
		EndGet
		BegSet
			pPendingWeight = *PropVal
		EndSet
	EndProp
	
	DclFld pPendingHeight Type(Decimal) Access(*Private) Inz(0)
	BegProp PendingHeight Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPendingHeight
		EndGet
		BegSet
			pPendingHeight = *PropVal
		EndSet
	EndProp
	
	DclFld pPendingLength Type(Decimal) Access(*Private) Inz(0)
	BegProp PendingLength Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPendingLength
		EndGet
		BegSet
			pPendingLength = *PropVal
		EndSet
	EndProp
	
	DclFld pPendingWidth Type(Decimal) Access(*Private) Inz(0)
	BegProp PendingWidth Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pPendingWidth
		EndGet
		BegSet
			pPendingWidth = *PropVal
		EndSet
	EndProp
	/EndRegion
	/EndRegion
	
		
	/Region BO methods
	/Region Markets And Departments
	BegSr SetDepartmentTbl Access(*Private)
	
		DclFld dv Type(DataView)
		DclFld dr Type(DataRow)
		DclArray Keys Type(DataColumn) Rank(1)
		DclFld AuthorisedDepts Type(DataTable)
		DclFld DeptTbl         Type(DataTable)
		
		SpiceDS = *New DataSet("Spice")
		
		AuthorisedDepts = User.AuthorisedDepartments.Copy()
		AuthorisedDepts.TableName = "AuthorisedDepts"
		Keys = *New DataColumn[] {AuthorisedDepts.Columns("Department")}
		AuthorisedDepts.PrimaryKey = Keys		
		SpiceDS.Tables.Add(AuthorisedDepts)
		
		DeptTbl = User.AuthorisedDepartments.Clone()
		DeptTbl.TableName = "Departments"
		DeptTbl.Columns.Add("cboDepartment",*TypeOf(String))
		Keys = *New DataColumn[] {DeptTbl.Columns("Department")}
		DeptTbl.PrimaryKey = Keys
		
		dv = *New DataView(AuthorisedDepts)
		If dv.Count > 1
			dr = DeptTbl.NewRow()
			dr.Item("Department") = 0
			dr.Item("cboDepartment") = "All Authorised Departments"
			DeptTbl.Rows.Add(dr)
		EndIf
		
		ForEach Name(drv) Collection(dv) Type(DataRowView)
			dr = DeptTbl.NewRow()
			dr.Item("Department")    = drv.Item("Department")
			dr.Item("cboDepartment") = drv.Item("Department")
			DeptTbl.Rows.Add(dr)
		EndFor
		
		SpiceDS.Tables.Add(DeptTbl)
	EndSr
	
	BegSR SetMarketsTbl Access(*Private)
	
		DclFld Markets Type(Markets)

		Markets = *New Markets(Environment)
		SpiceDS.Tables.Add(Markets.GetMarketsTbl())
	EndSr
	
	BegFunc GetDomainMarketsTbl Type(DataSet) Access(*Public)
	
		DclFld DomainMarkets Type(DataTable)
		DclFld SelectString  Type(StringBuilder)
		DclArray drMarkets   Type(DataRow) Rank(1)
		DclFld dr            Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("DomainMarkets")
			DomainMarkets = *New DataTable()
			DomainMarkets = SpiceDS.Tables("AllMarkets").Clone()
			DomainMarkets.TableName = "DomainMarkets"
			
			DomainMarkets.Columns.Add(*New DataColumn("Select",  *TypeOf(Boolean)))
			DomainMarkets.Columns.Add(*New DataColumn("Protect", *TypeOf(Boolean)))
			DomainMarkets.Columns.Add(*New DataColumn("VATcode", *TypeOf(String)))
			DomainMarkets.Columns.Add(*New DataColumn("Exchange",*TypeOf(Decimal)))
				
			// Set Master Markets to Ticketed and Protected
			SelectString = *New StringBuilder()
			SelectString.Append("Domain = '")
			SelectString.Append(Environment.Domain.Trim())
			SelectString.Append("'")
		
			drMarkets = SpiceDS.Tables("AllMarkets").Select(SelectString.ToString())
			ForEach MarketRow Collection(drMarkets) Type(DataRow)
				dr = DomainMarkets.NewRow()

				dr["Domain"]          = MarketRow["Domain"]
				dr["Status"]          = MarketRow["Status"]
				dr["IPMarket"]        = MarketRow["IPMarket"]
				dr["IPMarketDesc"]    = MarketRow["IPMarketDesc"]
				dr["IPCurrencyCode"]  = MarketRow["IPCurrencyCode"]
				dr["IPMasterMarket"]  = MarketRow["IPMasterMarket"]
				dr["ISOCountryCode"]  = MarketRow["ISOCountryCode"]
				dr["ISOCurrencyCode"] = MarketRow["ISOCurrencyCode"]
			
				If MarketRow["IPMasterMarket"] *As String = "Y"
					dr["Select"]  = *True
					dr["Protect"] = *True
					
					*this.pBaseCcy    = MarketRow["IPCurrencyCode"] *As String
					*this.pBaseMarket = MarketRow["IPMarket"] *As String
				Else
					dr["Select"]  = *False
					dr["Protect"] = *False
				EndIf
			
				DomainMarkets.Rows.Add(dr)
			EndFor
			
			SpiceDS.Tables.Add(DomainMarkets)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetAuthorisedMarketsTbl Type(DataSet) Access(*Public)
	
		DclFld AuthorisedMarketsTbl Type(DataTable)
		DclFld dv Type(DataView)
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("AuthorisedMarkets")
			If Not SpiceDS.Tables.Contains("DomainMarkets")
				GetDomainMarketsTbl()
			EndIf
		
			AuthorisedMarketsTbl = *New DataTable()
			AuthorisedMarketsTbl = SpiceDS.Tables("DomainMarkets").Clone()
			AuthorisedMarketsTbl.TableName = "AuthorisedMarkets"
			
			ForEach Market Collection(User.AuthorisedMarkets) Type(String)
				dv = *New DataView(SpiceDS.Tables("DomainMarkets"))
				dv.RowFilter = "IPMarket = '" + Market + "'"
				ForEach MarketRow Collection(dv) Type(DataRowView)
					dr = AuthorisedMarketsTbl.NewRow()

					dr.Item("Domain")          = MarketRow.Item("Domain")
					dr.Item("Status")          = MarketRow.Item("Status")
					dr.Item("IPMarket")        = MarketRow.Item("IPMarket")
					dr.Item("IPMarketDesc")    = MarketRow.Item("IPMarketDesc")
					dr.Item("IPCurrencyCode")  = MarketRow.Item("IPCurrencyCode")
					dr.Item("IPMasterMarket")  = MarketRow.Item("IPMasterMarket")
					dr.Item("ISOCountryCode")  = MarketRow.Item("ISOCountryCode")
					dr.Item("ISOCurrencyCode") = MarketRow.Item("ISOCurrencyCode")
					
					AuthorisedMarketsTbl.Rows.Add(dr)
				EndFor
			EndFor
			
			SpiceDS.Tables.Add(AuthorisedMarketsTbl)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetDepartmentTbl Type(DataSet) Access(*Private)
	
		DclFld IPdepts Type(IPdepts)
		
		If Not SpiceDS.Tables.Contains("AllDepartments")
			If IPdepts = *Nothing
				IPdepts = *New IPdepts(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(IPdepts.GetDepartmentTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetDepartment Type(Boolean) Access(*Public)
		DclSrParm DeptNum Type(Int16)
		
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("AllDepartments")
			GetDepartmentTbl()
		EndIf		
		
		dr = SpiceDS.Tables("AllDepartments").Rows.Find(DeptNum)
		If dr <> *Nothing
			pDept     = dr.Item["DepartmentCode"] *As Int16
			pDeptName = dr.Item["DepartmentName"] *As String
			pDeptDiv  = dr.Item["Division"]       *As Int16
		
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	
	BegFunc GetMarket Type(Boolean) Access(*Public)
		DclSrParm Market Type(String)
		
		DclFld drMarkets Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("DomainMarkets")
			GetDomainMarketsTbl()
		EndIf
		
		drMarkets = SpiceDS.Tables["DomainMarkets"].Rows.Find(Market)
		If drMarkets <> *Nothing
			pMarketName = drMarkets.Item["IPMarketDesc"].ToString()
			pMarketCcy  = drMarkets.Item["IPCurrencyCode"].ToString()
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Family
	BegFunc GetFamilyTbl Type(DataSet) Access(*Private)
	
		DclFld Family Type(DSFAMLYcls)
		
		If Not SpiceDS.Tables.Contains("Family")
			If Family = *Nothing
				Family = *New DSFAMLYcls(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(Family.GetFamilyTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetAllFamilyTbl Type(DataSet) Access(*Public)
	
		DclFld AllFamily Type(DataTable)
		DclFld dv        Type(DataView)
		DclFld dr        Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Family")
			GetFamilyTbl()
		EndIf
		
		If Not SpiceDS.Tables.Contains("AllFamily")
			AllFamily = SpiceDS.Tables("Family").Clone()
			AllFamily.TableName = "AllFamily"
			
			dr = AllFamily.NewRow()
			dr.Item("FamilyCode")        = "All"
			dr.Item("FamilyDescription") = "All Families"
			AllFamily.Rows.Add(dr)
			
			dv = *New DataView(SpiceDS.Tables("Family"))
			ForEach drv Collection(dv) Type(DataRowView)
				dr = AllFamily.NewRow()
				dr.Item("FamilyCode")        = drv.Item("FamilyCode")
				dr.Item("FamilyDescription") = drv.Item("FamilyDescription")
				AllFamily.Rows.Add(dr)
			EndFor
			
			SpiceDS.Tables.Add(AllFamily)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	/EndRegion
	
	/Region Character
	BegFunc GetCharTbl Type(DataSet) Access(*Public)
		
		DclFld Character Type(DSCHARScls)
		
		If Not SpiceDS.Tables.Contains("Chars")
			If Character = *Nothing
				Character = *New DSCHARScls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(Character.GetCharsTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetAllFamilyCharTbl Type(DataSet) Access(*Public)
		DclSrParm Family  Type(String)
	
		DclFld dv          Type(DataView)
		DclFld FamilyChars Type(DataTable)
		
		If Not SpiceDS.Tables.Contains("Chars")
			GetCharTbl()
		EndIf
		
		If Family = 'All Families'
			If SpiceDS.Tables.Contains("FamilyChars")
				SpiceDS.Tables.Remove("FamilyChars")
			EndIf
			
			dv = *New DataView(SpiceDS.Tables("Chars"))
			FamilyChars = dv.ToTable("FamilyChars")
			SpiceDS.Tables.Add(FamilyChars)
		Else
			If SpiceDS.Tables.Contains("FamilyChars")
				SpiceDS.Tables.Remove("FamilyChars")
			EndIf
			
			dv = *New DataView(SpiceDS.Tables("Chars"))
			dv.RowFilter = "FamilyCode = '" + Family + "'"
			FamilyChars = dv.ToTable("FamilyChars")
			SpiceDS.Tables.Add(FamilyChars)
		EndIf
		
		LeaveSR SpiceDS	
	EndFunc
	
	BegFunc GetChar Type(*Boolean) Access(*Public)
		DclSrParm Character Type(String)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Chars")
			GetCharTbl()
		EndIf
		
		dr = SpiceDS.Tables("Chars").Rows.Find(Character)
		If dr <> *Nothing
			pCharCode = dr.Item("CharCode")        *As String
			pCharName = dr.Item["CharDescription"] *As String
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Class
	BegFunc GetAllClassTbl Type(DataSet) Access(*Public)
	
		DclFld IPClass Type(IPCLASScls)
		
		Try 
			If Not SpiceDS.Tables.Contains("Class")
				If IPClass = *Nothing
					IPClass = *New IPCLASScls(PgmDB, Environment)
				EndIf
				
				SpiceDS.Tables.Add(IPClass.GetClassTbl())
			EndIf		
		Catch Name(exc) Type(Exception)
		
		EndTry

		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetClassTbl Type(DataSet) Access(*Public)
	
		DclFld FilteredClasses Type(DataTable)

		DclArray drClass Type(DataRow)  Rank(1)
		DclFld   dv      Type(DataView)

		If Not SpiceDS.Tables.Contains("Class")
			GetAllClassTbl()
		EndIf
		
		If Not SpiceDS.Tables.Contains("FilteredClasses")
			FilteredClasses = SpiceDS.Tables("Class").Clone()
			FilteredClasses.TableName = "FilteredClasses"
		
			dv = *New DataView(SpiceDS.Tables("AuthorisedDepts"))
			ForEach Name(drv) Collection(dv) Type(DataRowView)
				drClass = SpiceDS.Tables("Class").Select("Department = " + drv.Item("Department") *As String)
				ForEach Name(drClassRecord) Collection(drClass) Type(DataRow)
					FilteredClasses.ImportRow(drClassRecord)
				EndFor
			EndFor
			
			SpiceDS.Tables.Add(FilteredClasses)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetClassTbl Type(DataSet) Access(*Public)
		DclSrParm Dept Type(Int16)
	
		DclFld FilteredClasses Type(DataTable)

		DclArray drClass Type(DataRow)  Rank(1)

		If Not SpiceDS.Tables.Contains("Class")
			GetAllClassTbl()
		EndIf
		
		If Not SpiceDS.Tables.Contains("DeptClasses")
			FilteredClasses = SpiceDS.Tables("Class").Clone()
			FilteredClasses.TableName = "DeptClasses"

			drClass = SpiceDS.Tables("Class").Select("Department = " + Dept.ToString('00'))
			ForEach Name(drClassRecord) Collection(drClass) Type(DataRow)
				If drClassRecord["Status"] *As Boolean = *true
					FilteredClasses.ImportRow(drClassRecord)
				Endif
			EndFor
			
			SpiceDS.Tables.Add(FilteredClasses)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetClass Type(Boolean) Access(*Public)
		DclSrParm Class Type(Int16)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("FilteredClasses")
			GetClassTbl()
		EndIf
		
		dr = SpiceDS.Tables("FilteredClasses").Rows.Find(Class)
		If dr <> *Nothing And (dr["Status"] *As Boolean = *true)
			pClass      = dr["ClassCode"]  *As Int16
			pClassName  = dr["ClassName"]  *As String
			pDivision   = dr["Division"]   *As Int16
			pDepartment = dr["Department"] *As Int16
			pClassStatus= dr["Status"]     *As Boolean
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	
	BegFunc GetClass Type(Boolean) Access(*Public)
		DclSrParm Class Type(Int16)
		DclSrParm Dept  Type(Int16)
		
		DclArray dr Type(DataRow) Rank(1)
		
		If Not SpiceDS.Tables.Contains("Class")
			GetAllClassTbl()
		EndIf
		
		dr = SpiceDS.Tables("Class").Select("Department = " + Dept.ToString('00') + " and ClassCode = " + Class.ToString('0000'))
		ForEach drClass Collection(dr) Type(DataRow)
			If drClass["Status"] *As Boolean = *true
				pClass      = drClass["ClassCode"]  *As Int16
				pClassName  = drClass["ClassName"]  *As String
				pDivision   = drClass["Division"]   *As Int16
				pDepartment = drClass["Department"] *As Int16
				pClassStatus= drClass["Status"]     *As Boolean
			
				LeaveSR *True
			EndIf
		EndFor
		
		LeaveSR *False
	EndFunc
	/EndRegion
	
	/Region SubClass
	BegFunc GetSubClass Type(Boolean) Access(*Public)
		DclSrParm SubClass  Type(String)
		DclSrParm ClassCode Type(Int16)
		
		DclFld dv Type(DataView)
		DclFld RowFilterString Type(StringBuilder)

		If Not SpiceDS.Tables.Contains("SubClass")
			GetSubClassTbl()
		EndIf
		
		dv = *New DataView(SpiceDS.Tables("SubClass"))
		RowFilterString = *New StringBuilder()
		RowFilterString.Append("SubClassCode = '")
		RowFilterString.Append(Subclass)
		RowFilterString.Append("' and ClassCode = ")
		RowFilterString.Append(ClassCode.ToString())
		RowFilterString.Append(" and Status = true")
		
		dv.RowFilter = RowFilterString.ToString()
		If dv.Count > 0
			ForEach dvr Collection(dv) Type(DataRowView)
				pSubClass     = dvr.Item("SubClassCode") *As String
				pSubClassName = dvr.Item["Description"]  *As String
				
				LeaveSR *True
			EndFor
		Else
			LeaveSR *False
		EndIf		
	EndFunc
	
	//VATrates
	BegFunc GetVATRatesTbl Type(DataSet) Access(*Public)
	
		DclFld dsspivr Type(DSSPIVR)
		
		If Not SpiceDS.Tables.Contains("VATrates")
			If dsspivr = *Nothing
				dsspivr = *New DSSPIVR(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(dsspivr.GetVATratesTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	
	BegFunc GetSubClassTbl Type(DataSet) Access(*Public)
	
		DclFld SubClass Type(DSSBCLScls)
		
		If Not SpiceDS.Tables.Contains("SubClass")
			If SubClass = *Nothing
				SubClass = *New DSSBCLScls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(SubClass.GetSubClassTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetSubClassTbl Type(DataSet) Access(*Public)
		DclSrParm ClassCode Type(Int16)
		
		DclFld SubClass        Type(DSSBCLScls)
		DclFld SubClassByClass Type(DataTable)
		DclArray drSubClass    Type(DataRow) Rank(1)
		
		If Not SpiceDS.Tables.Contains("SubClass")
			If SubClass = *Nothing
				SubClass = *New DSSBCLScls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(SubClass.GetSubClassTbl())
		EndIf
		
		If SpiceDS.Tables.Contains("FilteredSubClass")
			SpiceDS.Tables.Remove("FilteredSubClass")
		EndIf
		
		If SpiceDs.Tables.Contains("SubClass")
			SubClassByClass = *New DataTable()
			SubClassByClass = SpiceDS.Tables("SubClass").Clone()
			SubClassByClass.TableName = "FilteredSubClass"

			drSubClass = SpiceDS.Tables("SubClass").Select("ClassCode = " + ClassCode.ToString())
			ForEach rowSubClass Collection(drSubClass) Type(DataRow)
				SubClassByClass.ImportRow(rowSubClass)
			EndFor
			
			SpiceDS.Tables.Add(SubClassByClass)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	/EndRegion
	
	/Region Vendor
	BegFunc GetVendorTbl Type(DataSet) Access(*Public)
	
		DclFld FilteredVendors Type(DataTable)
		DclFld Vendor      Type(IPMRVENcls)
		
		DclArray drVendor  Type(DataRow) Rank(1)
		DclFld   dv        Type(DataView)
		
		DclFld vv          Type(DataView)
		DclFld vt          Type(DataTable)
		DclFld dr          Type(DataRow)

		If Not SpiceDS.Tables.Contains("VendorXref")
			If Vendor = *Nothing
				Vendor = *New IPMRVENcls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(Vendor.GetVendorTbl())
		EndIf
		
		If Not SpiceDS.Tables.Contains("FilteredVendors")
			FilteredVendors = SpiceDS.Tables("VendorXref").Clone()
			FilteredVendors.TableName = "FilteredVendors"
			
			//DclArray Keys Type(DataColumn) Rank(1)
			//Keys = *New DataColumn[] {FilteredVendors.Columns("VendorNumber")}
			//FilteredVendors.PrimaryKey = Keys
			
			If Not SpiceDS.Tables.Contains("PaymentTerms")
				GetTermsTbl()
			EndIf
			
			dv = *New DataView(SpiceDS.Tables("AuthorisedDepts"))
			ForEach Name(drv) Collection(dv) Type(DataRowView)
				If (drv.Item("Department") *As Int16) <> 0
					drVendor = SpiceDS.Tables("VendorXref").Select("Department = " + drv.Item("Department") *As String)
					ForEach Name(drVendorRecord) Collection(drVendor) Type(DataRow)
						
						// Check for Unique Vendor number
						//dr = FilteredVendors.Rows.Find(drVendorRecord.Item("VendorNumber"))
						//If dr = *Nothing
							dr = SpiceDS.Tables("PaymentTerms").Rows.Find(drVendorRecord.Item("Terms"))
							If dr <> *Nothing
								drVendorRecord.Item("TermsDescription") = dr.Item("Description") *As String
							EndIf					
						
							FilteredVendors.ImportRow(drVendorRecord)
						//EndIf
					EndFor
				EndIf
			EndFor
			
			vv = *New DataView(FilteredVendors)
			vv.Sort = "VendorNumber ASC"
			vt = vv.ToTable()
			
			SpiceDS.Tables.Add(vt)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc

	BegFunc GetVendor Type(*Boolean) Access(*Public)
		DclSrParm Vendor Type(Int32)
		
		DclFld dv Type(DataView)
		
		If Not SpiceDS.Tables.Contains("FilteredVendors")
			GetVendorTbl()
		EndIf
		
		dv = *New DataView(SpiceDS.Tables("FilteredVendors"))
		dv.RowFilter = "VendorNumber = " + Vendor
		
		If dv.Count = 0
			LeaveSR *False
		Else
			ForEach dvr Collection(dv) Type(DataRowView)
				pVendor      = dvr.Item("VendorNumber") *As Int32
				pVendorName  = dvr.Item("VendorName")   *As String
				pVendorTerms = dvr.Item("Terms")        *As String
				pVendorCcy   = dvr.Item("Currency")     *As String
				pVendorShipV = dvr.Item("ShipVia")      *As String
				pVendorTermsDesc = dvr.Item("TermsDescription") *As String
				
				LeaveSR *True
			EndFor
		EndIf
	EndFunc
	/EndRegion
	
	/Region Seasons
	BegFunc GetSeasonsTbl Type(DataSet) Access(*Public)
	
		DclFld Seasons Type(DSCORGPcls)

		If Not SpiceDS.Tables.Contains("Seasons")
			If Seasons = *Nothing
				Seasons = *New DSCORGPcls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(Seasons.GetSeasonsTbl())
		EndIf
	
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetSeason Type(*Boolean) Access(*Public)
		DclSrParm Season Type(String)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Seasons")
			GetSeasonsTbl()
		EndIf
		
		dr = SpiceDS.Tables("Seasons").Rows.Find(Season)
		If dr <> *Nothing And (dr.Item["Status"]  *As Boolean = *true)
			pSeasonCode   = dr.Item["SeasonCode"] *As String
			pSeasonDesc   = dr.Item["SeasonDescription"] *As String
			pSeasonStatus = dr.Item["Status"]     *As Boolean
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	
	
	/Region Colour
	BegFunc GetColour Type(*Boolean) Access(*Public)
		DclSrParm Colour Type(Int16)

		DclFld dr Type(DataRow)

		If Not SpiceDS.Tables.Contains("Colour")
			GetColourTbl()
		EndIf
		
		dr = SpiceDS.Tables("Colour").Rows.Find(Colour)
		If dr <> *Nothing And (dr.Item["Status"] *As Boolean = *true)
			pColour     = dr.Item("ColourCode") *As Int16
			pColourName = dr.Item["ColourName"] *As String
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	
	BegFunc GetColourTbl Type(DataSet) Access(*Public)
	
		DclFld Colour Type(IPCOLORcls)
		
		If Not SpiceDS.Tables.Contains("Colour")
			If Colour = *Nothing
				Colour = *New IPCOLORcls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(Colour.GetColourTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	/EndRegion
	
	/Region Sizes
	BegFunc GetSizesTbl Type(DataSet) Access(*Public)
	
		DclFld Size Type(IPSIZEScls)
		
		If Not SpiceDS.Tables.Contains("IPsizes")
			If Size = *Nothing
				Size = *New IPSIZEScls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(Size.GetSizesTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetSize Type(*Boolean) Access(*Public)
		DclSrParm Size Type(Int16)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("IPsizes")
			GetSizesTbl()
		EndIf
		
		dr = SpiceDS.Tables("IPsizes").Rows.Find(Size)
		If dr <> *Nothing
			pSize     = dr.Item("SizeCode") *As Int16
			pSizeName = dr.Item["SizeDesc"] *As String
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region UPC
	BegFunc ChkUPCunique Type(Boolean) Access(*Public)
		DclSrParm UPC Type(Int64)
		
		DclFld IPitems Type(IPITHDRcls)
		
		If IPitems = *Nothing
			IPitems = *New IPITHDRcls(PgmDB)
		EndIf
		
		LeaveSR IPitems.ChkUPCunique(UPC)
	EndFunc
	
	BegFunc ChkUPCunique Type(Boolean) Access(*Public)
		DclSrParm UPC            Type(Int64)
		DclSrParm LongItemNumber Type(LongItemNumber)
		
		DclFld IPitems Type(IPITHDRcls)
		
		If IPitems = *Nothing
			IPitems = *New IPITHDRcls(PgmDB)
		EndIf
		
		LeaveSR IPitems.ChkUPCunique(UPC, LongItemNumber)
	EndFunc

	BegFunc ChkVendorUPCunique Type(Boolean) Access(*Public)
		DclSrParm UPC Type(Int64)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.ChkVendorUPCUnique(UPC)
	EndFunc
	
	BegFunc ChkVendorUPCunique Type(Boolean) Access(*Public)
		DclSrParm UPC Type(Int64)
		DclSrParm LongItemNumber Type(LongItemNumber)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.ChkVendorUPCUnique(UPC, LongItemNumber)
	EndFunc
	
	BegFunc ChkVendorUPCunique Type(Boolean) Access(*Public)
		DclSrParm UPC            Type(Int64)
		DclSrParm LongItemNumber Type(LongItemNumber)
		DclSrParm Market         Type(String)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.ChkVendorUPCUnique(UPC, LongItemNumber, Market)
	EndFunc

	BegFunc ChkDisneyUPCunique Type(Boolean) Access(*Public)
		DclSrParm UPC Type(Int64)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.ChkDisneyUPCUnique(UPC)
	EndFunc
	
	BegFunc ChkDisneyUPCunique Type(Boolean) Access(*Public)
		DclSrParm UPC            Type(Int64)
		DclSrParm LongItemNumber Type(LongItemNumber)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.ChkDisneyUPCUnique(UPC, LongItemNumber)
	EndFunc
	
	BegFunc ChkUPCUniqueMarket Type(Boolean) Access(*Public)
		DclSrParm UPC    Type(Int64)
		DclSrparm Market Type(String)
		
		If IPITHDRcls = *Nothing
			IPITHDRcls = *New IPITHDRcls(PgmDB)
		EndIf
				
		LeaveSR IPITHDRCLS.chkUPCuniqueMarket(UPC,Market)
	EndFunc
	
	BegFunc ChkUPCuniqueIMI Type(Boolean) Access(*Public)
		DclSrParm UPC    Type(Int64)
		DclSrParm Market Type(String)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.ChkUPCuniqueIMI(UPC,Market)
	EndFunc
		
	BegFunc ChkUPCcheckDigit Type(Boolean) Access(*Public)
		DclSrParm UPC Type(Int64)
		
		DclArray UPCArray    Dim(12) Type(*Zoned) Len(1,0)		
		DclFld   chkUPCCheckDigit    Type(Boolean)	
		DclFld   DigitIndex	 	     Type(Int16) 
		DclFld   UPCString           Type(*Char)  Len(12)
		DclFld   Sum1                Type(Int32)
		DclFld   Sum2                Type(Int32)
		DclFld   Sum3                Type(Int16) 
		
		//Convert UPC to String		
		UPCString = UPC.ToString('000000000000')
		
		//Move String into Array elements				
		For Index(DigitIndex = 0) to (11)
			UPCArray(DigitIndex) = %Int(%Subst(UPCString:DigitIndex +1:1))
		EndFor
		
		//Calculate CheckDigit....As the array starts at 0, this will be our first odd number.
		Sum1 = UPCArray(0) + UPCArray(2) + UPCArray(4) + UPCArray(6) + UPCArray(8) + UPCArray(10)
		Sum1 = Sum1 * 3
		Sum2 = UPCArray(1) + UPCArray(3) + UPCArray(5) + UPCArray(7) + UPCArray(9) + Sum1
		
		Sum3 = %Rem(Sum2:10)
		
		If Sum3 <> 0
			Sum3 = 10 - Sum3
		Endif
		
		//Compare Calculation to entered CheckDigit
		If Sum3 <> UPCArray(11)
			chkUPCCheckDigit = *False
		Else
			chkUPCCheckDigit = *True
		Endif
			
		LeaveSR chkUPCCheckDigit
	EndFunc
	/EndRegion
	
	/Region Licence
	BegFunc GetLicenceTbl Type(DataSet) Access(*Public)
	
		Dclfld Licence         Type(DSLCNSE)
		DclFld FilteredLicence Type(DataTable)
		DclArray drLicence     Type(DataRow) Rank(1)

		If Licence = *Nothing
			Licence = *New DSLCNSE(PgmDB, Environment)
		EndIf
		
		If Not SpiceDS.Tables.Contains("Licence")
			SpiceDS.Tables.Add(Licence.GetLicenceTbl())
		EndIf
		
		If Not SpiceDS.Tables.Contains("FilteredLicence")
			FilteredLicence = SpiceDS.Tables("Licence").Clone()
			FilteredLicence.TableName = "FilteredLicence"
		
			drLicence = SpiceDS.Tables("Licence").Select("Status = 'Y'")
			ForEach Name(drLicenceRecord) Collection(drLicence) Type(DataRow)
				FilteredLicence.ImportRow(drLicenceRecord)
			EndFor
			
			SpiceDS.Tables.Add(FilteredLicence)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetLicence Type(Boolean) Access(*Public)
		DclSrParm Licence Type(String)

		DclFld dr Type(DataRow)
		
		If SpiceDS.Tables("FilteredLicence") = *Nothing
			GetLicenceTbl()
		EndIf
		
		dr = SpiceDS.Tables("FilteredLicence").Rows.Find(Licence)
		If dr <> *Nothing
			pLicenceCode = dr.Item("Code")        *As String
			pLicenceDesc = dr.Item["Description"] *As String
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Commodity
	BegFunc GetCommodityTbl Type(DataSet) Access(*Public)
	
		DclFld Commodity Type(DSCOMODcls)

		If Not SpiceDS.Tables.Contains("Commodity")
			If Commodity = *Nothing
				Commodity = *New DSCOMODcls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(Commodity.GetCommodityTbl())
		EndIf
				
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetCommodityCode Type(Boolean) Access(*Public)
		DclSrParm Commodity Type(String)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Commodity")
			GetCommodityTbl()
		EndIf
		
		dr = SpiceDS.Tables("Commodity").Rows.Find(Commodity)
		If dr <> *Nothing
			pCommodityCode = dr.Item("Code")        *As String
			pCommodityDesc = dr.Item("Description") *As String
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc	
	/EndRegion
	
	/Region Composition Code
	BegFunc GetCompositionTbl Type(DataSet) Access(*Public)
		
		DclFld CompoCode Type(DSCOMPOcls)
		
		If Not SpiceDS.Tables.Contains("Composition")
			If CompoCode = *Nothing
				CompoCode = *New DSCOMPOcls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(CompoCode.GetCompositionTbl())
		EndIf
				
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetCompositionCode Type(Boolean) Access(*Public)
		DclSrParm CompoCode Type(String)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Composition")
			GetCompositionTbl()
		EndIf
		
		dr = SpiceDS.Tables("Composition").Rows.Find(CompoCode)
		If dr <> *Nothing And (dr.Item["Status"] *As Boolean = *true)
			pCompoCode     = dr.Item("Code")        *As String
			pCompoCodeDesc = dr.Item["Description"] *As String
			pCompoStatus   = dr.Item["Status"]      *As Boolean
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Promotion
	BegFunc GetPromotionTbl Type(DataSet) Access(*Public)
	
		DclFld Promotion Type(DSPROMOcls)

		If Not SpiceDS.Tables.Contains("Promotion")
			If Promotion = *Nothing
				Promotion = *New DSPROMOcls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(Promotion.GetPromotionTbl())
		EndIf
				
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetPromotion Type(Boolean) Access(*Public)
		DclSrParm PromotionCode Type(String)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Promotion")
			GetPromotionTbl()
		EndIf
		
		dr = SpiceDS.Tables("Promotion").Rows.Find(PromotionCode)
		If dr <> *Nothing And (dr.Item["Status"] *As Boolean = *true)
			pPromotion       = dr.Item["Code"]        *As String
			pPromotionDesc   = dr.Item["Description"] *As String
			pPromotionStatus = dr.Item["Status"]      *As Boolean
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Pending Case Pack Details
	BegFunc GetPendingCasePackDetails Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		
		DclFld chkPendingCasePack Type(Boolean)
						
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		chkPendingCasePack = SpiceItem.GetPendingCasePackDetails(Class,Vendor,Style,Colour,Size)
		
		If chkPendingCasePack = *True
			*This.PendingCasePackType   = SpiceItem.PendingCasePackType
			*This.PendingCasePackQty    = SpiceItem.PendingCasePackQty
			*This.PendingDistroInnerQty = SpiceItem.PendingDistroInnerQty
			*This.PendingWeight         = SpiceItem.PendingWeight
			*This.PendingHeight         = SpiceItem.PendingHeight
			*This.PendingLength         = SpiceItem.PendingLength
			*This.PendingWidth          = SpiceItem.PendingWidth
		Endif
				
		LeaveSR chkPendingCasePack
	EndFunc
	/EndRegion
	
	/Region APP Types
	BegFunc GetAPPTypesTbl Type(DataSet) Access(*Public)
		
		DclFld DSSPATYcls Type(DSSPATYcls)

		If Not SpiceDS.Tables.Contains("APPTypesTbl")
			If DSSPATYcls = *Nothing
				DSSPATYcls = *New DSSPATYcls(PgmDB, Environment)
			EndIf
		
			SpiceDS.Tables.Add(DSSPATYcls.GetAPPTypesTbl())
		EndIf

		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetAppType Type(Boolean) Access(*Public)
		DclSrParm AppType Type(String)

		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("APPTypesTbl")
			GetAPPTypesTbl()
		EndIf
		
		dr = SpiceDS.Tables("APPTypesTbl").Rows.Find(AppType)
		If dr <> *Nothing
			pAppType       = dr.Item["AppType"]       *As String
			pDescription   = dr.Item["Description"]   *As String
			pPrefix        = dr.Item("Prefix")        *As String
			pMaxComponents = dr.Item("MaxComponents") *As Decimal
			pProtectColour = dr.Item("ProtectColour") *As String
			pDefaultColour = dr.Item("DefaultColour") *As Decimal
			pProtectSize   = dr.Item("ProtectSize")   *As String
			pDefaultSize   = dr.Item("DefaultSize")   *As Decimal
						
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	
	BegFunc GetAppDescriptions Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrparm Style  Type(Int16)
		DclSrparm Colour Type(Int16)
		DclSrparm Size   Type(int16)

		If SpiceAPPItem = *Nothing
			SpiceAPPItem = *New SpiceAPPItem(PgmDB,User)
		EndIf
		
		If SpiceAPPItem.GetAPPMasterRead(Class, Vendor, Style, Colour, Size)
			*this.LongDescription  = SpiceAPPItem.LongDescription
			*this.ShortDescription = SpiceAPPItem.ShortDescription
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	
	/EndRegion
	
	/Region Size Groups
	BegFunc GetSizeGroupTbl Type(DataSet) Access(*Public)
		DclSrParm Class Type(Int16)
	
		DclFld   SizeGroups         Type(SizeGroups)
		DclArray drSizeGroups       Type(DataRow) Rank(1)
		DclFld   FilteredSizeGroups Type(DataTable)
		
		// Only build On-Change of Class, or If the Table does not exists
		If Class <> pClassSizeGroup Or (Not SpiceDs.Tables.Contains("FilteredSizeGroups"))
			If SpiceDS.Tables.Contains("SizeGroups")
				SpiceDS.Tables.Remove("SizeGroups")
			EndIf
			
			If SizeGroups = *Nothing
				SizeGroups = *New SizeGroups(PgmDB, Environment)
			EndIf
			SpiceDS.Tables.Add(SizeGroups.GetSizeGroupTbl())
			
			If SpiceDS.Tables.Contains("FilteredSizeGroups")
				SpiceDS.Tables.Remove("FilteredSizeGroups")
			EndIf
			
			FilteredSizeGroups = SpiceDS.Tables("SizeGroups").Clone()
			FilteredSizeGroups.TableName = "FilteredSizeGroups"
				
			drSizeGroups = SpiceDS.Tables("SizeGroups").Select("Class = " + Class.ToString())
			ForEach Name(drSizeGroupRecord) Collection(drSizeGroups) Type(DataRow)
				FilteredSizeGroups.ImportRow(drSizeGroupRecord)
			EndFor
			
			pClassSizeGroup = Class
			SpiceDS.Tables.Add(FilteredSizeGroups)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetSizeGroupDetailsTbl Type(DataSet) Access(*Public)

		DclFld SizeGroupDetails Type(SizeGroupDetails)
		DclFld IPsizescls       Type(IPsizescls)
		
		DclFld ItemSizes        Type(DataTable)
		DclFld dv               Type(DataView)
		DclArray drSizes        Type(DataRow)    Rank(1)
		DclFld drItemSizes      Type(DataRow)
		DclFld drIPsizes        Type(DataRow)
		//DclArray Keys           Type(DataColumn) Rank(1)
	
		If Not SpiceDS.Tables.Contains("SizeGroupDetails")
			If SizeGroupDetails = *Nothing
				SizeGroupDetails = *New SizeGroupDetails(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(SizeGroupDetails.GetSizeGroupTbl())
		EndIf
		
		If Not SpiceDS.Tables.Contains("IPsizes")
			If IPsizescls = *Nothing
				IPsizescls = *New IPsizescls(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(IPsizescls.GetSizesTbl())
		EndIf
	
		If SpiceDS.Tables.Contains("FilteredSizeGroups")
			
			If SpiceDS.Tables.Contains("ItemSizes")
				SpiceDS.Tables.Remove("ItemSizes")
			EndIf
			ItemSizes = CreateSizesTbl()
			
			dv = *New DataView(SpiceDS.Tables("FilteredSizeGroups"))
			dv.RowFilter = "Select = true"
			ForEach Name(drv) Collection(dv) Type(DataRowView)
				drSizes = SpiceDS.Tables["SizeGroupDetails"].Select("SizeGroup = " + drv["Group"].ToString())
				ForEach Name(drSizeRecord) Collection(drSizes) Type(DataRow)
					// Determine if size code already exists in table
					// If size is a default then switch on selection flag in table
					drItemSizes = ItemSizes.Rows.Find(drSizeRecord["SizeCode"])
					If drItemSizes <> *Nothing
						If drSizeRecord["DefaultInd"] *As String = "Y"
							drItemSizes["Select"] = *True
						EndIf
					Else
						drItemSizes = ItemSizes.NewRow()
						
						If drSizeRecord["DefaultInd"] *As String = "Y"
							drItemSizes["Select"] = *True
						EndIf
						
						drItemSizes["SizeCode"] = drSizeRecord["SizeCode"]
						
						drIPsizes = SpiceDS.Tables("IPsizes").Rows.Find(drSizeRecord["SizeCode"])
						If drIPsizes <> *Nothing
							drItemSizes["SizeName"] = drIPsizes["SizeDesc"]
						EndIf
						
						drItemSizes["PackQty"]      = pCaseQty
						drItemSizes["DistroQty"]    = pDistroQty
						drItemSizes["UPC"]          = pUPC
						drItemSizes["CasePackType"] = pPackCode
						drItemSizes["PackWeight"]   = pPackWeight
						drItemSizes["PackHeight"]   = pPackHeight
						drItemSizes["PackLength"]   = pPackLength
						drItemSizes["PackWidth"]    = pPackWidth
						drItemSizes["Description"]  = Description
						//drItemSizes["DescNonEnglish"]  = LocalDescription
						drItemSizes["SellingChannel"]    = SellingChannel
						drItemSizes["OfferEffectiveDate"]    = OfferEffectiveDate
						drItemSizes["SellOutControl"]    = SellOutControl
						drItemSizes["SuppressBackOrderCard"]    = SuppressBackOrderCard
										
						
						ItemSizes.Rows.Add(drItemSizes)
					EndIf
				EndFor
			EndFor
			
			DclFld dr Type(DataRow)
			
			If SpiceDS.Tables.Contains("CopyItemSizes")
				ForEach SizeRow Collection(SpiceDS.Tables["CopyItemSizes"].Rows) Type(DataRow)
					dr = ItemSizes.Rows.Find(SizeRow["SizeCode"])
					If dr <> *Nothing
						ItemSizes.Rows.Remove(dr)
						ItemSizes.ImportRow(SizeRow)
					EndIf
				EndFor
			EndIf
			
			DclFld fsv  Type(DataView)
			DclFld fst  Type(DataTable)

			fsv = *New DataView(ItemSizes)
			fsv.Sort = "SizeCode ASC"
			fst = fsv.ToTable()
			
			SpiceDS.Tables.Add(fst)
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetNoSizeTbl Type(DataSet) Access(*Public)
						
		DclFld ItemSizes    Type(DataTable)
		DclFld drItemSizes  Type(DataRow)
			
		If SpiceDS.Tables.Contains("ItemSizes")
			SpiceDS.Tables.Remove("ItemSizes")
		EndIf
		
		ItemSizes = CreateSizesTbl()
		
		drItemSizes = ItemSizes.NewRow()	
		drItemSizes["Select"]       = *True
		drItemSizes["SizeCode"]     = 0
		drItemSizes["SizeName"]     = 'NO SIZE'
		drItemSizes["PackQty"]      = pCaseQty
		drItemSizes["DistroQty"]    = pDistroQty
		drItemSizes["UPC"]          = pUPC
		drItemSizes["CasePackType"] = pPackCode
		drItemSizes["PackWeight"]   = pPackWeight
		drItemSizes["PackHeight"]   = pPackHeight
		drItemSizes["PackLength"]   = pPackLength
		drItemSizes["PackWidth"]    = pPackWidth
	
		drItemSizes["Description"]    = Description
		drItemSizes["SellingChannel"]    = SellingChannel
		drItemSizes["OfferEffectiveDate"]    = OfferEffectiveDate
		drItemSizes["SellOutControl"]    = SellOutControl
		drItemSizes["SuppressBackOrderCard"]    = SuppressBackOrderCard
	
	
		ItemSizes.Rows.Add(drItemSizes)
		SpiceDataSet.Tables.Add(ItemSizes)

		LeaveSR SpiceDS
	EndFunc
	
	BegFunc CreateSizesTbl Type(DataTable) Access(*Private)
	
		Dclfld ItemSizes Type(DataTable)
		DclArray Keys    Type(DataColumn) Rank(1)
		
		ItemSizes = *New DataTable("ItemSizes")
		ItemSizes.Columns.Add(*New DataColumn("Select",      *TypeOf(Boolean)))
		ItemSizes.Columns.Add(*New DataColumn("SizeCode",    *TypeOf(Int16)))
		ItemSizes.Columns["SizeCode"].ReadOnly = *True
		ItemSizes.Columns.Add(*New DataColumn("SizeName",    *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("PackQty",     *TypeOf(Int32)))
		ItemSizes.Columns.Add(*New DataColumn("DistroQty",   *TypeOf(Int32)))
		ItemSizes.Columns.Add(*New DataColumn("UPC",         *TypeOf(Int64)))
		ItemSizes.Columns.Add(*New DataColumn("CasePackType",*TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("PackWeight",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PackHeight",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PackLength",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PackWidth",   *TypeOf(Decimal)))
		
		//new columns 20/04/2010 Joseph Urbina
		ItemSizes.Columns.Add(*New DataColumn("PendingPackQty",     *TypeOf(Int32)))
		ItemSizes.Columns.Add(*New DataColumn("PendingDistroQty",   *TypeOf(Int32)))
		ItemSizes.Columns.Add(*New DataColumn("PendingCasePackType",*TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("PendingPackWeight",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PendingPackHeight",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PendingPackLength",  *TypeOf(Decimal)))
		ItemSizes.Columns.Add(*New DataColumn("PendingPackWidth",   *TypeOf(Decimal))) 
		ItemSizes.Columns.Add(*New DataColumn("PendingFlag",        *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("Description",        *TypeOf(String)))				 
		ItemSizes.Columns.Add(*New DataColumn("DescNonEnglish",     *TypeOf(String)))	
		ItemSizes.Columns.Add(*New DataColumn("SellingChannel",     *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("ForOnlineEcommerce", *TypeOf(Boolean))) 
		ItemSizes.Columns.Add(*New DataColumn("OfferEffectiveDate", *TypeOf(Int64)))
		ItemSizes.Columns.Add(*New DataColumn("SellOutControl",     *TypeOf(String)))
		ItemSizes.Columns.Add(*New DataColumn("SuppressBackOrderCard",   *TypeOf(Boolean))) 
		
		
		Keys = *New DataColumn[] {ItemSizes.Columns("SizeCode")}
		ItemSizes.PrimaryKey = Keys			
	
		LeaveSR ItemSizes
	EndFunc
	
	BegFunc GetConsolidatedSizesTbl Type(DataSet) Access(*Public)
		DclSrParm Class Type(Int16)
		
		DclFld SizeGroupDetails Type(SizeGroupDetails)
		DclFld FilteredSizes    Type(DataTable)
		DclArray drSizes        Type(DataRow) Rank(1)
		DclFld drFilteredSizes  Type(DataRow)
		DclFld IPsizescls       Type(IPsizescls)
		DclFld drIPsizes        Type(DataRow)
		DclFld dr               Type(DataRow)
		
		// Select Group headers
		GetSizeGroupTbl(Class)
		
		If Not SpiceDS.Tables.Contains("SizeGroupDetails")
			If SizeGroupDetails = *Nothing
				SizeGroupDetails = *New SizeGroupDetails(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(SizeGroupDetails.GetSizeGroupTbl())
		EndIf
		
		// Get IPsizes table to obtain Size descriptions
		If Not SpiceDS.Tables.Contains("IPsizes")
			If IPsizescls = *Nothing
				IPsizescls = *New IPsizescls(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(IPsizescls.GetSizesTbl())
		EndIf
		
		If SpiceDS.Tables.Contains("FilteredSizes")
			SpiceDS.Tables.Remove("FilteredSizes")
		EndIf
		
		FilteredSizes = *New DataTable("FilteredSizes")
		FilteredSizes.Columns.Add(*New DataColumn("Select",  *TypeOf(Boolean)))
		FilteredSizes.Columns.Add(*New DataColumn("SizeCode",*TypeOf(Int16)))
		FilteredSizes.Columns["SizeCode"].ReadOnly = *True
		FilteredSizes.Columns.Add(*New DataColumn("SizeName",*TypeOf(String)))
		FilteredSizes.Columns["SizeName"].ReadOnly = *True
		
		FilteredSizes.PrimaryKey = *New DataColumn[] {FilteredSizes.Columns("SizeCode")}
			
		ForEach SizeGroup Collection(SpiceDS.Tables["FilteredSizeGroups"].Rows) Type(DataRow)
			
			// Create an array of Sizes within size group
			drSizes = SpiceDS.Tables["SizeGroupDetails"].Select("SizeGroup = " + SizeGroup["Group"].ToString())		
			ForEach Size Collection(drSizes) Type(DataRow)
			
				// Add size to table if it's not there
				dr = FilteredSizes.Rows.Find(Size["SizeCode"].ToString())
				If dr = *Nothing
					drFilteredSizes = FilteredSizes.NewRow()
					drFilteredSizes["Select"] = *False
					
					drFilteredSizes["SizeCode"] = Size["SizeCode"]
				
					drIPsizes = SpiceDS.Tables["IPsizes"].Rows.Find(Size["SizeCode"])
					If drIPsizes <> *Nothing
						drFilteredSizes["SizeName"] = drIPsizes["SizeDesc"]
					EndIf
				
					FilteredSizes.Rows.Add(drFilteredSizes)
				EndIf
			EndFor
		EndFor
		
		SpiceDS.Tables.Add(FilteredSizes)
		LeaveSR SpiceDS
	EndFunc
	
	BegSR CopyFilteredSizes Access(*Public)
		
		DclFld CopyItemSizes Type(DataTable)
		DclArray Keys Type(DataColumn) Rank(1)
		
		If SpiceDS.Tables.Contains("CopyItemSizes")
			SpiceDS.Tables.Remove("CopyItemSizes")
		EndIf
		
		CopyItemSizes = SpiceDS.Tables["ItemSizes"].Copy()
		CopyItemSizes.TableName = "CopyItemSizes"
		Keys = *New DataColumn[] {CopyItemSizes.Columns("SizeCode")}
		CopyItemSizes.PrimaryKey = Keys
		SpiceDS.Tables.Add(CopyItemSizes)
	EndSR
	/EndRegion
	
	/Region Market Sizes
	BegFunc GetMarketSizeTbl Type(DataSet) Access(*Public)
		DclSrParm UserSelectedOnly Type(Boolean) 
				
		DclFld   dr              Type(DataRow)
		DclArray drItemSizes     Type(DataRow) Rank(1)
		DclArray drDomainMarkets Type(DataRow) Rank(1)
		DclFld   MktCcy          Type(String)
		DclFld   drCurrency      Type(DataRow)
		
		// Create a new MarketSizes table every time
		If SpiceDS.Tables.Contains("MarketSizes")
			SpiceDS.Tables.Remove("MarketSizes")
		EndIf
		
		CreateMarketSizesTbl()
		
		If (UserSelectedOnly = *False) // All domain markets
			drDomainMarkets = SpiceDS.Tables("DomainMarkets").Select()
		Else // only those markets that have been selected by user on the SelectMarket screen
			drDomainMarkets = SpiceDS.Tables("DomainMarkets").Select("Select = true")
		EndIf		
		
		If SpiceDs.Tables.Contains("ItemSizes")
			drItemSizes = SpiceDS.Tables("ItemSizes").Select("Select = true")
			ForEach Market Collection(drDomainMarkets) Type(DataRow)
				ForEach Sizes Collection(drItemSizes) Type(DataRow)
					dr = SpiceDS.Tables("MarketSizes").NewRow()
					
					dr.Item("Market")       = Market("IPMarket")
					MktCcy                  = Market("IPCurrencyCode") *As String
					dr.Item("CurrencyCode") = MktCcy
					dr.Item("SizeCode")     = Sizes("SizeCode")
					dr.Item("SizeName")     = Sizes("SizeName")
					
					dr.Item("Cost") = Math.Round(pStyleCost / (Market["Exchange"] *As Decimal),2)
					
					// Get from Table retail prices table
					drCurrency = SpiceDS.Tables("RetailPrice").Rows.Find(MktCcy)
					If drCurrency <> *Nothing
						dr.Item("Retail") = drCurrency["Retail"]
					Else
						dr.Item("Retail") = pStyleRetail
					EndIf
					
					dr["ListPrice"] = dr.Item("Retail")		
							
					/* validation for the VAT code - VAT code should not be blank */
					Try			
						If ((Market["VATcode"] *As String) = String.Empty)
							dr["VAT"] = DataCache.DefaultVATCode
						Else
							dr["VAT"] = Market["VATcode"]
						EndIf
					Catch ex Type(Exception)
						// trap any VAT code errors				
					EndTry
				
					SpiceDS.Tables("MarketSizes").Rows.Add(dr)
				EndFor
			EndFor
		Else
			ForEach Market Collection(drDomainMarkets) Type(DataRow)
				dr = SpiceDS.Tables("MarketSizes").NewRow()
				
				dr["Market"]       = Market("IPMarket")
				MktCcy             = Market("IPCurrencyCode") *As String
				dr["CurrencyCode"] = MktCcy
				dr["SizeCode"]     = 0
				dr["SizeName"]     = 'No Size'
				
				Try
					dr["Cost"]         = pStyleCost / (Market["Exchange"] *As Decimal)
				Catch Name(ex) Type(Exception)
				EndTry
				
				// Get from Table retail prices table
				drCurrency = SpiceDS.Tables("RetailPrice").Rows.Find(MktCcy)
				If drCurrency <> *Nothing
					dr["Retail"] = drCurrency["Retail"]
				Else
					dr["Retail"] = pStyleRetail
				EndIf				
				
				dr["VAT"] = Market["VATcode"]
				dr["ListPrice"] = dr.Item("Retail")	
				
				SpiceDS.Tables("MarketSizes").Rows.Add(dr)
			EndFor
		EndIf
					
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetChgMarketPricesTbl Type(DataSet) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		
		DclArray NewMarkets   Type(DataRow) Rank(1)
		DclArray BaseMktSizes Type(DataRow) Rank(1)
		//DclFld   MarketPrices Type(DataTable)
		DclFld   dr           Type(DataRow)
		DclFld   ExchangeRate Type(Decimal)
		DclArray Keys         Type(System.Object) Rank(1) New(2)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		If SpiceDS.Tables.Contains("MarketPrices")
			SpiceDS.Tables.Remove("MarketPrices")
		EndIf
		
		// Sizes are fixed, markets have been added
		SpiceDS.Tables.Add(SpiceItem.GetItemMarketPrices(Class,Vendor,Style,Colour))
		
		// We need a list of countries added (from DomainMarkets)
		NewMarkets = SpiceDS.Tables["DomainMarkets"].Select("Select = true and Protect = false")
		
		// Find Base market sizes
		BaseMktSizes = SpiceDS.Tables["MarketPrices"].Select("Market = '" + pBaseMarket + "'")
		SpiceDS.Tables["MarketPrices"].Columns.Add(*New DataColumn("Status",*TypeOf(String)))
		
				
		// Loop for each new country added and write into table using base country as template
		ForEach NewMarket Collection(NewMarkets) Type(DataRow)
		
			ForEach BaseMkt Collection(BaseMktSizes) Type(DataRow)
				
				Keys[0] = NewMarket["IPMarket"]
				Keys[1] = BaseMkt["Size"]
				dr = SpiceDS.Tables["MarketPrices"].Rows.Find(Keys)
				If dr = *Nothing
					dr = SpiceDS.Tables["MarketPrices"].NewRow()
										
					dr["Status"] = 'New'										
					dr["Class"]  = BaseMkt["Class"]
					dr["Vendor"] = BaseMkt["Vendor"]
					dr["Style"]  = BaseMkt["Style"]
					dr["Colour"] = BaseMkt["Colour"]
					dr["Size"]   = BaseMkt["Size"]
					dr["Market"] = NewMarket["IPMarket"]
					dr["CurrencyCode"] = NewMarket["IPCurrencyCode"] *As String
						
					ExchangeRate = GetExchangeRate(NewMarket["IPCurrencyCode"] *As String)
					
					dr["Cost"]        = (BaseMkt["Cost"]   *As Decimal) / ExchangeRate
					dr["Retail"]      = (BaseMkt["Retail"] *As Decimal) / ExchangeRate
					
					dr["VAT"]         = GetVatCode(NewMarket["IPMarket"] *As String, BaseMkt["Class"] *As Int16, BaseMkt["Size"] *As Int16)
					
					//New Markets Logic for VAT on Market, Class, Size
					If dr["VAT"].ToString()  = String.Empty
						dr["VAT"] = GetVatCode(NewMarket["IPMarket"] *As String, BaseMkt["Class"] *As Int16)
					Endif
					
					dr["PendingVAT"]  = String.Empty
					dr["PendingCost"]   = 0
					dr["PendingRetail"] = 0
					dr["VendorUPC"]     = 0
					
					SpiceDS.Tables["MarketPrices"].Rows.Add(dr)
				EndIf
			EndFor
		EndFor
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetChgSizePricesTbl Type(DataSet) Access(*Public)
		DclSrParm ItemStyle Type(Disney.DA.IP400.ItemStyle)
		DclSrParm Sizes     Type(DataTable)
		
		DclFld   ExistingMarketPrices Type(DataTable)
		DclFld   MarketPrices Type(DataTable)
		DclArray Markets      Type(DataRow)       Rank(1)
		DclFld   dr           Type(DataRow)
		DclArray Keys         Type(System.Object) Rank(1) New(2)
		DclFld   ExchangeRate Type(Decimal)
		DclArray findExistingRows  Type(DataRow) Rank(1)


		Try
			// We need a list of countries added (from DomainMarkets)
			Markets = SpiceDS.Tables["DomainMarkets"].Select("Select = true")

			If SpiceDS.Tables.Contains("MarketPrices")
				SpiceDs.Tables.Remove("MarketPrices")
			EndIf
			
			ExistingMarketPrices = SpiceItem.GetItemMarketPrices(ItemStyle.Class,ItemStyle.Vendor,ItemStyle.Style,ItemStyle.Colour)
			MarketPrices = ExistingMarketPrices.Clone()
			MarketPrices.Columns.Add(*New DataColumn("Status",*TypeOf(String)))
			
			// Create MarketPrices
			ForEach Market Collection(Markets) Type(DataRow)
				ForEach NewSize Collection(Sizes.Rows) Type(DataRow)
					
					Keys[0] = Market["IPMarket"]
					Keys[1] = NewSize["Size"]
					dr = ExistingMarketPrices.Rows.Find(Keys)
					If dr <> *Nothing
						MarketPrices.ImportRow(dr)
					Else
						dr = MarketPrices.NewRow()
						
						dr["Status"]        = 'New'
						dr["Class"]         = ItemStyle.Class
						dr["Vendor"]        = ItemStyle.Vendor
						dr["Style"]         = ItemStyle.Style
						dr["Colour"]        = ItemStyle.Colour
						dr["Size"]          = NewSize["Size"]
						dr["Market"]        = Market["IPMarket"]
						dr["CurrencyCode"]  = Market["IPCurrencyCode"]

						ExchangeRate        = (Market["Exchange"] *As Decimal)
						//dr["Cost"]          = ItemStyle.Cost   / ExchangeRate
						//dr["Retail"]        = ItemStyle.Retail / ExchangeRate						
						findExistingRows = ExistingMarketPrices.Select("retail > 0 AND Size <> 9999 AND Market ='" + Market["IPMarket"] + "'" )
						ForEach Name(drFoundRow) Collection(findExistingRows) Type(DataRow)
							dr["Retail"]        = drFoundRow["Retail"]
							dr["Cost"]          = drFoundRow["Cost"]
						EndFor
												
						dr["VAT"]           = GetVatCode(dr["Market"] *As String, dr["Class"] *As Int16, dr["Size"] *As Int16)
											
						//New Markets Logic for VAT on Market, Class, Size
						If dr["VAT"].ToString()  = String.Empty
							dr["VAT"]            = GetVatCode(dr["Market"] *As String, dr["Class"] *As Int16)
						Endif
											
						dr["PendingVAT"]    = String.Empty
						dr["PendingCost"]   = 0
						dr["PendingRetail"] = 0
						
						//dr["VendorUPC"]     = ItemStyle.UPC
						dr["VendorUPC"]     = 0
						
						MarketPrices.Rows.Add(dr)
					EndIf
				EndFor
			EndFor
			
			SpiceDS.Tables.Add(MarketPrices)
		Catch Name(ex) Type(Exception)
		
		EndTry

		LeaveSR SpiceDS
	EndFunc
	
	BegSr CreateMarketSizesTbl Access(*Private)
	
		DclFld MarketSizes Type(DataTable)

		MarketSizes = *New DataTable("MarketSizes")
		MarketSizes.Columns.Add(*New DataColumn("Market",      *TypeOf(String)))
		MarketSizes.Columns("Market").ReadOnly = *True
		MarketSizes.Columns.Add(*New DataColumn("CurrencyCode",*TypeOf(String)))
		MarketSizes.Columns("CurrencyCode").ReadOnly = *True
		MarketSizes.Columns.Add(*New DataColumn("SizeCode",    *TypeOf(Int16)))
		MarketSizes.Columns("SizeCode").ReadOnly = *True
		MarketSizes.Columns.Add(*New DataColumn("SizeName",    *TypeOf(String)))
		MarketSizes.Columns("SizeName").ReadOnly = *True
		MarketSizes.Columns.Add(*New DataColumn("Cost",   *TypeOf(Decimal)))
		MarketSizes.Columns("Cost").ReadOnly = *True
		MarketSizes.Columns.Add(*New DataColumn("Retail", *TypeOf(Decimal)))
		MarketSizes.Columns.Add(*New DataColumn("ListPrice", *TypeOf(Decimal)))
		MarketSizes.Columns.Add(*New DataColumn("VAT",    *TypeOf(String)))
		MarketSizes.Columns("VAT").ReadOnly = *True
		SpiceDS.Tables.Add(MarketSizes)
			
	EndSr
	/EndRegion
	
	/Region Ports Of Departure
	BegFunc GetPortsTbl Type(DataSet) Access(*Public)
		
		DclFld DSports Type(DSports)
		
		If Not SpiceDS.Tables.Contains("Ports")
			If Dsports = *Nothing
				DSports = *New DSports(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(DSports.GetPortsTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetPort Type(Boolean) Access(*Public)
		DclSrParm Port Type(Int32)
		
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Ports")
			GetPortsTbl()
		EndIf
		
		dr = SpiceDS.Tables("Ports").Rows.Find(Port)
		If dr <> *Nothing
			pPortCode = dr.Item("PortCode")    *As String
			pPortDesc = dr.Item["Description"] *As String
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Ship-Via
	BegFunc GetShipViaTbl Type(DataSet) Access(*Public)
	
		DclFld ShipVia Type(DSship)
		
		If Not SpiceDS.Tables.Contains("ShipVia")
			If ShipVia = *Nothing
				ShipVia = *New DSship(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(ShipVia.GetShipViaTbl())
		EndIf
	
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetShipVia Type(Boolean) Access(*Public)
		DclSrParm ShipVia Type(String)
		
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("ShipVia")
			GetShipViaTbl()
		EndIf
		
		dr = SpiceDS.Tables("ShipVia").Rows.Find(ShipVia)
		If dr <> *Nothing
			pShipVia     = dr.Item["ShipVia"]     *As String
			pShipViaDesc = dr.Item["Description"] *As String
			
			LeaveSR *true
		Else
			LeaveSR *false
		EndIf	
	EndFunc
	/EndRegion
	
	/Region Delivery Terms
	BegFunc GetDelTermsTbl Type(DataSet) Access(*Public)
	
		DclFld DelTerms Type(DSdelterms)
		
		If Not SpiceDS.Tables.Contains("DelTerms")
			If DelTerms = *Nothing
				DelTerms = *New DSdelterms(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(DelTerms.GetDelTermsTbl())
		EndIf
	
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetDelTerms Type(Boolean) Access(*Public)
		DclSrParm Terms Type(String)
		
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("DelTerms")
			GetDelTermsTbl()
		EndIf
		
		dr = SpiceDS.Tables("DelTerms").Rows.Find(Terms)
		If dr <> *Nothing
			pDelTerms     = dr.Item("DelTermsCode") *As String
			pDelTermsDesc = dr.Item("Description")  *As String
			
			LeaveSR *true
		Else
			LeaveSR *false
		EndIf	
	EndFunc
	/EndRegion
	
	/Region AgeGroup
	BegFunc GetAgeGroupTbl Type(DataSet) Access(*Public)
		
		DclFld AgeGroup Type(AgeGroup)
		
		If Not SpiceDS.Tables.Contains("AgeGroups")
			If AgeGroup = *Nothing
				AgeGroup = *New AgeGroup(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(AgeGroup.GetAgeGroupTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetAgeGroup Type(Boolean) Access(*Public)
		DclSrParm AgeGroup Type(String)
		
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("AgeGroups")
			GetAgeGroupTbl()
		EndIf
		
		dr = SpiceDS.Tables("AgeGroups").Rows.Find(AgeGroup)
		If dr <> *Nothing
			pAgeGroup   = dr["AgeGroupID"]  *As String
			pAgeGrpDesc = dr["Description"] *As String

			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Vendor Payment Terms
	BegFunc GetTermsTbl Type(DataSet) Access(*Public)
	
		DclFld PaymentTerms	Type(PaymentTerms)
		
		If Not SpiceDS.Tables.Contains("PaymentTerms")
			If PaymentTerms = *Nothing
				PaymentTerms = *New PaymentTerms(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(PaymentTerms.GetPaymentTermsTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetTerms Type(Boolean) Access(*Public)
		DclSrParm Terms Type(String)
	
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("PaymentTerms")
			GetTermsTbl()
		EndIf
		
		dr = SpiceDS.Tables("PaymentTerms").Rows.Find(Terms)
		If dr <> *Nothing
			pVendorTerms     = dr.Item("PayTerms")    *As String
			pVendorTermsDesc = dr.Item("Description") *As String

			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Country of Origin
	BegFunc GetCountryTbl Type(DataSet) Access(*Public)
	
		DclFld Country Type(Country)
		
		If Not SpiceDS.Tables.Contains("Country")
			If Country = *Nothing
				Country = *New Country(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(Country.GetCountryTbl())
		EndIf
	
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetCountry Type(Boolean) Access(*Public)
		DclSrParm Country Type(String)
		
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("Country")
			GetCountryTbl()
		EndIf
		
		dr = SpiceDS.Tables("Country").Rows.Find(Country)
		If dr <> *Nothing
			pCountryCode = dr.Item("CountryCode") *As String
			pCountryDesc = dr.Item("Description") *As String
			
			LeaveSR *true
		Else
			LeaveSR *false
		EndIf	
	EndFunc
	/EndRegion
	
	/Region Ticket Type
	BegFunc GetTicketTypeTbl Type(DataSet) Access(*Public)
	
		DclFld TicketType Type(TicketType)
		
		If Not SpiceDS.Tables.Contains("TicketType")
			If TicketType = *Nothing
				TicketType = *New TicketType(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(TicketType.GetTicketTypeTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc

	BegFunc GetSellingChannelTbl Type(DataSet) Access(*Public)
	
		DclFld SellingChannel Type(SellingChannel)
		
		Try
			If Not SpiceDS.Tables.Contains("SellingChannelTable")
				If SellingChannel = *Nothing
					SellingChannel = *New SellingChannel(PgmDB, Environment)
				EndIf
				
				SpiceDS.Tables.Add(SellingChannel.GetSellingChannelTbl())
			EndIf
		Catch Name(ex) Type(exception)
		
		Finally 
			SellingChannel = *Nothing
		EndTry
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetItemShippingOptions Type(DataSet) Access(*Public)
	
		DclFld ItemShipping Type(ItemShipping)
		
		If Not SpiceDS.Tables.Contains("ItemShippingTable")
			If ItemShipping = *Nothing
				ItemShipping = *New ItemShipping(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(ItemShipping.GetItemShippingOptions())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetThirdPartySellerTbl Type(DataSet) Access(*Public)
	
		DclFld ThirdPartySeller Type(ThirdPartySeller)
		
		If Not SpiceDS.Tables.Contains("ThirdPartySellerTable")
			If ThirdPartySeller = *Nothing
				ThirdPartySeller = *New ThirdPartySeller(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(ThirdPartySeller.GetThirdPartySellerTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc

	BegFunc GetSellOutControlTbl Type(DataSet) Access(*Public)
	
		DclFld SellOutControl Type(SellOutControl)
		
		If Not SpiceDS.Tables.Contains("SellOutControlTable")
			If SellOutControl = *Nothing
				SellOutControl = *New SellOutControl(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(SellOutControl.GetSellOutControlTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
		
	BegFunc GetSpecialHandlingCodesTbl Type(DataSet) Access(*Public)
	
		DclFld SpecialHandlingCodes Type(SpecialHandlingCodes)
		
		If Not SpiceDS.Tables.Contains("SpecialHandlingCodesTable")
			If SpecialHandlingCodes = *Nothing
				SpecialHandlingCodes = *New SpecialHandlingCodes(PgmDB, Environment)
			EndIf
			
			SpiceDS.Tables.Add(SpecialHandlingCodes.GetSpecialHandlingCodesTbl())
		EndIf
		
		LeaveSR SpiceDS
	EndFunc
	
	BegFunc GetTicketType Type(Boolean) Access(*Public)
		DclSrParm TicketType Type(String)
		
		DclFld dr Type(DataRow)
		
		If Not SpiceDS.Tables.Contains("TicketType")
			GetTicketTypeTbl()
		EndIf
		
		dr = SpiceDS.Tables("TicketType").Rows.Find(TicketType)
		If dr <> *Nothing
			pTicketType     = dr.Item("TicketTypeCode") *As String
			pTicketTypeDesc = dr.Item("Description")    *As String

			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Pricing
	BegFunc GenerateRetailPriceTbl Type(DataTable) Access(*Public)
		DclSrParm Retail Type(Decimal)
		DclSrParm IncludeBaseCurrency Type(Boolean)
		DclSrParm All Type(Boolean)
	
		DclFld RetailPriceTbl Type(DataTable)
		DclFld dr             Type(DataRow)
		DclFld dv             Type(DataView)
		DclFld DSSPPRCMcls    Type(DSSPPRCMcls)
		DclArray Keys         Type(DataColumn) Rank(1) New(1)
		
		If DSSPPRCMcls = *Nothing
			DSSPPRCMcls = *New DSSPPRCMcls(PgmDB)
		EndIf
		
		If SpiceDS.Tables.Contains("RetailPrice")
			SpiceDS.Tables.Remove("RetailPrice")
		EndIf
		
		RetailPriceTbl = *New DataTable("RetailPrice")
		
		RetailPriceTbl.Columns.Add("Currency",*TypeOf(String))
		RetailPriceTbl.Columns("Currency").ReadOnly = *True
		RetailPriceTbl.Columns.Add("Retail",*TypeOf(Decimal))
		
		Keys[0] = RetailPriceTbl.Columns("Currency")
		RetailPriceTbl.PrimaryKey = Keys
		
		dv = *New DataView(SpiceDS.Tables("DomainMarkets"))
		If (All = *False)
			dv.RowFilter = "Select = true"
		EndIf
		ForEach SelectedMkts Collection(dv) Type(DataRowView)
			If (IncludeBaseCurrency = *False)
				If (SelectedMkts.Item("IPCurrencyCode") *As String) <> *this.BaseCurrency
					dr = RetailPriceTbl.NewRow()
					dr.Item("Currency") = SelectedMkts.Item("IPCurrencyCode")
					
					dr.Item("Retail") = DSSPPRCMcls.GetRetailPrice(*this.BaseCurrency,SelectedMkts.Item("IPCurrencyCode") *As String,Retail)
					RetailPriceTbl.Rows.Add(dr)
				EndIf
			Else
				dr = RetailPriceTbl.NewRow()
				dr.Item("Currency") = SelectedMkts.Item("IPCurrencyCode")
				
				dr.Item("Retail") = DSSPPRCMcls.GetRetailPrice(*this.BaseCurrency,SelectedMkts.Item("IPCurrencyCode") *As String,Retail)
				RetailPriceTbl.Rows.Add(dr)
			EndIf
		EndFor
		
		*this.StyleRetail = Retail
		SpiceDS.Tables.Add(RetailPriceTbl)
		
		LeaveSR SpiceDS.Tables("RetailPrice")
	EndFunc
	
	BegFunc GenerateCopyRetailPriceTbl Type(DataTable) Access(*Public)
		DclSrParm Retail Type(Decimal)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrparm Size   Type(Int16)
	
		DclFld CopyRetailPriceTbl Type(DataTable)
		DclFld dr                 Type(DataRow)
		DclFld dv                 Type(DataView)
		DclFld DSSPPRCMcls        Type(DSSPPRCMcls)
		DclArray Keys             Type(DataColumn) Rank(1) New(1)
		DclFld Market             Type(String)
		DclFld RetailPrice        Type(Decimal)
		DclFld CostPrice          Type(Decimal)
		
		If DSSPPRCMcls = *Nothing
			DSSPPRCMcls = *New DSSPPRCMcls(PgmDB)
		EndIf
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		If SpiceDS.Tables.Contains("CopyRetailPrice")
			SpiceDS.Tables.Remove("CopyRetailPrice")
		EndIf
		
		CopyRetailPriceTbl = *New DataTable("RetailPrice")
		
		CopyRetailPriceTbl.Columns.Add("Currency",*TypeOf(String))
		CopyRetailPriceTbl.Columns("Currency").ReadOnly = *True
		CopyRetailPriceTbl.Columns.Add("Retail",*TypeOf(Decimal))
		
		Keys[0] = CopyRetailPriceTbl.Columns("Currency")
		CopyRetailPriceTbl.PrimaryKey = Keys
		
		dv = *New DataView(SpiceDS.Tables("DomainMarkets"))
		dv.RowFilter = "Select = true"
		ForEach SelectedMkts Collection(dv) Type(DataRowView)
			If (SelectedMkts.Item("IPCurrencyCode") *As String) <> *this.BaseCurrency
				dr = CopyRetailPriceTbl.NewRow()
				dr.Item("Currency") = SelectedMkts.Item("IPCurrencyCode")
				Market = SelectedMkts.Item("IPmarket").ToString()            
				
				//Get Current Retail Price if it exists
				RetailPrice = SpiceItem.GetMarketRetailPrice(Class,Vendor,Style,Colour,Size,Market)				
				If RetailPrice <> *Zero
					dr.Item("Retail") = RetailPrice
				Else 
					dr.Item("Retail") = DSSPPRCMcls.GetRetailPrice(*this.BaseCurrency,SelectedMkts.Item("IPCurrencyCode") *As String,Retail)
				Endif
			
				CopyRetailPriceTbl.Rows.Add(dr)
			Else
				Market = SelectedMkts.Item("IPmarket").ToString()   
				RetailPrice = SpiceItem.GetMarketRetailPrice(Class,Vendor,Style,Colour,Size,Market)
				If RetailPrice <> *Zero
					*this.ItemRetail =  RetailPrice
				EndIf
				CostPrice = SpiceItem.GetMarketCostPrice(Class,Vendor,Style,Colour,Size,Market)
				If CostPrice <> *Zero
					*this.ItemCost =  CostPrice
				EndIf
			EndIf
		EndFor
		
		*this.StyleRetail = Retail
		SpiceDS.Tables.Add(CopyRetailPriceTbl)
		
		LeaveSR SpiceDS.Tables("CopyRetailPrice")
	EndFunc
		
	/EndRegion
	
	/Region VAT code
	BegFunc GetVATcode Type(String) Access(*Public)
		DclSrParm Market Type(String)
		DclSrParm Class  Type(Int16)
		
		DclFld DSSPIDV Type(DSSPIDV)
		
		If DSSPIDV = *Nothing
			DSSPIDV = *New DSSPIDV(PgmDB)
		EndIf
		
		LeaveSR DSSPIDV.GetVatCode(Market,Class)
	EndFunc
	
	BegFunc GetVATcode Type(String) Access(*Public)
		DclSrParm Market Type(String)
		DclSrParm Class  Type(Int16)
		DclSrParm Size   Type(Int16)
		
		DclFld DSSPIDW Type(DSSPIDW)
		
		If DSSPIDW = *Nothing
			DSSPIDW = *New DSSPIDW(PgmDB)
		EndIf
		
		LeaveSR DSSPIDW.GetVatCode(Market,Class, Size)
	EndFunc
	/EndRegion
	
	/Region Exchange Rate
	BegFunc GetExchangeRate Type(Decimal) Access(*Public)
		DclSrParm CurrencyCode Type(String)
		
		DclFld IPCURCY Type(IPCURCY)
		
		If IPCURCY = *Nothing
			IPCURCY = *New IPCURCY(PgmDB, Environment)
		EndIf
		
		If IPCURCY.GetCurrency(CurrencyCode)
			LeaveSR IPCURCY.CurrencyRate
		Else
			LeaveSR 1
		EndIf
	EndFunc
	/EndRegion
	
	/Region Currency Name
	BegFunc GetCurrency Type(String) Access(*Public)
		DclSrParm Currency Type(String)
	
		DclFld IPCURCY Type(IPCURCY)
		
		If IPCURCY = *Nothing
			IPCURCY = *New IPCURCY(PgmDB, Environment)
		EndIf
		
		If IPCURCY.GetCurrency(Currency)
			pCurrencyCode = IPCURCY.CurrencyCode
			pCurrencyName = IPCURCY.CurrencyName
			pCurrencyRate = IPCURCY.CurrencyRate
		
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	/EndRegion
	
	/Region Search methods
	BegFunc SearchByItemNumber Type(DataTable) Access(*Public)
		DclSrParm Worker Type(System.ComponentModel.BackgroundWorker)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
	
		DclFld ItemsTbl  Type(DataTable)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		ItemsTbl = SpiceItem.SearchByItemNumber(Worker,Class,Vendor)
		ItemsTbl = EnrichItemTbl(ItemsTbl)
		
		LeaveSR ItemsTbl
	EndFunc
	
	BegFunc SearchByItemNumber Type(DataTable) Access(*Public)
		DclSrParm Worker Type(System.ComponentModel.BackgroundWorker)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
	
		DclFld ItemsTbl  Type(DataTable)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		ItemsTbl = SpiceItem.SearchByItemNumber(Worker,Class,Vendor,Style)
		ItemsTbl = EnrichItemTbl(ItemsTbl)
		
		LeaveSR ItemsTbl
	EndFunc
	
	BegFunc SearchByItemNumber Type(DataTable) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
	
		DclFld ItemsTbl  Type(DataTable)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		ItemsTbl = SpiceItem.SearchByItemNumber(Class,Vendor,Style,Colour)
		ItemsTbl = EnrichItemTbl(ItemsTbl)
		
		LeaveSR ItemsTbl
	EndFunc
	
	BegFunc SearchByItemNumber Type(DataTable) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
	
		DclFld ItemsTbl  Type(DataTable)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		ItemsTbl = SpiceItem.SearchByItemNumber(Class,Vendor,Style,Colour,Size)
		ItemsTbl = EnrichItemTbl(ItemsTbl)
		
		LeaveSR ItemsTbl
	EndFunc
	
	BegFunc SearchByVendorStyle Type(DataTable) Access(*Public)
		DclSrParm VendorStyle Type(String)
		
		DclFld ItemsTbl Type(DataTable)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		ItemsTbl = SpiceItem.SearchByVendorStyle(VendorStyle)
		ItemsTbl = EnrichItemTbl(ItemsTbl)
		
		LeaveSR ItemsTbl
	EndFunc
	
	BegFunc SearchByUPC Type(DataTable) Access(*Public)
		DclSrParm UPC Type(Int64)
		
		DclFld ItemsTbl Type(DataTable)
	    
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
			
		ItemsTbl = SpiceItem.SearchByUPC(UPC)
		ItemsTbl = EnrichItemTbl(ItemsTbl)
				
		LeaveSR ItemsTbl
	EndFunc
	
	BegFunc EnrichItemTbl Type(DataTable) Access(*Private)
		DclSrParm ItemsTbl Type(DataTable)
		
		DclFld dv        Type(DataView)
		DclFld dr        Type(DataRow)
		DclFld dvVendors Type(DataView)
		DclFld dvr       Type(DataRowView)
		
		DclFld LastVendor Type(Int32) Inz(*Zero)
		DclFld ThisVendor Type(Int32)
		DclFld LastVendorName Type(String)
	
		GetColourTbl()
		GetVendorTbl()
		GetSizesTbl()
		GetSeasonsTbl()
		GetCharTbl()
		
		dv = *New DataView(ItemsTbl)
		ForEach dvr Collection(dv)
		
			// Is the item within the list of authorised departments
			dr = SpiceDS.Tables("AuthorisedDepts").Rows.find(dvr.Item("Department") *As Int16)
			If dr = *Nothing
				dvr.Row.Delete()
			Else

				// Get Colour descriptions
				dr = SpiceDS.Tables("Colour").Rows.Find(dvr.Item("Colour") *As Int16)
				If dr <> *Nothing
					dvr.Item("ColourName") = dr.Item("ColourName")
				EndIf

				// Get Vendor name
				ThisVendor = dvr.Item("Vendor") *As Int32
				If LastVendor <> ThisVendor 
					dvVendors = *New DataView(SpiceDS.Tables("FilteredVendors"))
					dvVendors.RowFilter = "VendorNumber = " + ThisVendor.ToString()
					If dvVendors.Count > *Zero
						ForEach drvVendor Collection(dvVendors) Type(DataRowView)
							dvr.Item("VendorName") = drvVendor.Item("VendorName")
						EndFor
					EndIf
					
					LastVendor = ThisVendor
					LastVendorName = dvr.Item("VendorName") *As String
				Else
					dvr.Item("VendorName") = LastVendorName
				EndIf
			
				// Get Sizes descriptions
				dr = SpiceDS.Tables("IPsizes").Rows.Find(dvr.Item("Size") *As Int16)
				If dr <> *Nothing
					dvr.Item("SizeDesc") = dr.Item("SizeDesc")
				EndIf
				
				// Get Character descriptions
				dr = SpiceDS.Tables("Chars").Rows.Find(dvr.Item("CharCode") *As String)
				If dr <> *Nothing
					dvr.Item("CharDescription") = dr.Item("CharDescription")
				EndIf
				
				// Get Season descriptions
				dr = SpiceDS.Tables("Seasons").Rows.Find(dvr.Item("SeasonCode") *As String)
				If dr <> *Nothing
					dvr.Item("SeasonDescription") = dr.Item("SeasonDescription")
				Else
					dvr.Item("SeasonDescription") = (dvr.Item("SeasonCode") *As String)
				EndIf
			EndIf
		EndFor
		
		ItemsTbl.AcceptChanges()
		LeaveSR ItemsTbl
	EndFunc
	/EndRegion
	
	/Region Item PO Enquiry
	BegFunc GetItemPosTable Type(DataTable) Access(*Public)
		DclSrparm Class     Type(Int16)
		DclSrparm Vendor    Type(Int32)
		DclSrParm Style     Type(Int16)
		DclSrparm Colour    Type(Int16)
		DclSrParm Size		Type(int16)
		
		DclFld ItemPosTbl	Type(DataTable)
		
		If ItemPos = *Nothing
			ItemPos = *New ItemPos(PgmDB,Environment)
		EndIf
		
		ItemPosTbl = ItemPos.GetItemPosTable(Class, Vendor, Style, Colour, Size)	
		
		LeaveSr ItemPosTbl
	EndFunc
	/EndRegion
	
	/Region Replace Invalid Chars
	BegFunc ReplaceInvalidChrs Type(String) Access(*Public)
		DclSrParm EntryText	Type(String)
				
		DclFld Length     Type(Int32)
		DclFld Count      Type(Int32) 
		DclFld CheckPos   Type(Int16)
		DclFld QryString  Type(StringBuilder)
		DclFld ValidChars Type(String)
		
		QryString = *New StringBuilder()
		
		QryString.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
		QryString.Append("-:/!'.&()#+")
		QryString.Append('"')
		QryString.Append(" ")
		
		ValidChars = QryString.ToString()						
		Length = %Len(EntryText)
				
		Dowhile Count <= Length
			Count +=1
			CheckPos = %Check(ValidChars, EntryText)
			If CheckPos > 0
				EntryText = %Replace(' ', EntryText, CheckPos, 1)
			Endif
		Enddo	
				
		LeaveSr EntryText
	EndFunc
	/EndRegion
	
	/Region APP Master Check
	BegFunc ChkAPPMaster Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
		
		DclFld APPCheck  Type(Boolean)
				
		If SpiceAPPItem  = *Nothing
			SpiceAPPItem = *New SpiceAPPItem(Pgmdb, User) 
		Endif
		
		APPCheck = SpiceAPPItem.ChkAPPMaster(Class, Vendor, Style, Colour, Size)
				
		LeaveSr APPCheck
	EndFunc
	/EndRegion
	
	/Region Import Vendor
		BegFunc GetImportDoemstic Type(String) Access(*Public)
		DclSrParm VendorCode Type(Int32) 
		
		DclFld ImportDomesticFlag Type(String)
								
		If IPMRVENcls  = *Nothing
			IPMRVENcls = *New IPMRVENcls(PgmDB, Environment) 
		Endif
		
		ImportDomesticFlag = IPMRVENcls.GetImportDomestic(VendorCode)
		
		LeaveSr ImportDomesticFlag
	EndFunc
	/EndRegion
	
	BegFunc GetAdvSearchData Type(DataSet) Access(*Public)
		DclSrParm PassedDept Type(Int16)
		
		GetAllFamilyTbl()
		GetAllFamilyCharTbl("All Families")
		
		If PassedDept <> *Zero
			GetClassTbl(PassedDept)
		Else
			GetClassTbl()
		EndIf
		
		GetVendorTbl()
		GetSeasonsTbl()
		
		LeaveSR SpiceDS
	EndFunc

	BegFunc GetAdvSearchItems Type(DataTable) Access(*Public)
		DclSrParm Worker       Type(System.ComponentModel.BackgroundWorker)
		DclSrParm clbCharacter Type(System.Windows.Forms.CheckedListBox)
		DclSrParm clbClass     Type(System.Windows.Forms.CheckedListBox)
		DclSrParm clbVendor    Type(System.Windows.Forms.CheckedListBox)
		DclSrParm clbSeason    Type(System.Windows.Forms.CheckedListBox)
		DclSrParm PromoSelect    Type(String)
		DclSrParm OnlineSelect   Type(String)
		DclSrParm LocationSelect Type(String)
		DclSrParm APPselect      Type(String)
		
		DclFld ItemsTbl  Type(DataTable)
		DclFld QryString Type(StringBuilder) New()
		DclFld FirstTime Type(Boolean)
		DclFld CheckedListItem Type(DataRowView)
		DclFld dv        Type(DataView)
		
		FirstTime = *True
		dv = *New DataView(SpiceDS.Tables("AuthorisedDepts"))
		ForEach Dept Collection(dv) Type(DataRowView)
			If FirstTime = *True
				QryString.Append("(ISADPT = ")
				QryString.Append(Dept.Item("Department"))
				
				FirstTime = *False
			Else
				QryString.Append(" *Or ISADPT = ")
				QryString.Append(Dept.Item("Department"))
			EndIf
		EndFor
		
		FirstTime = *True
	    ForEach	CheckedListItem Collection(clbCharacter.CheckedItems)
			If FirstTime = *True
				If QryString.Length <> *Zero
					QryString.Append(") *And ")
				EndIf
				
				QryString.Append("(ISACHR = '")
				QryString.Append(CheckedListItem.Item("CharCode").ToString())
				QryString.Append("'")
				
				FirstTime = *False
			Else
				QryString.Append(" *Or ISACHR = '")
				QryString.Append(CheckedListItem.Item("CharCode").ToString())
				QryString.Append("'")
			EndIf
	    EndFor
	    		
		FirstTime = *True
	    ForEach	CheckedListItem Collection(clbClass.CheckedItems)
			If FirstTime = *True
				If QryString.Length <> *Zero
					QryString.Append(") *And ")
				EndIf
				
				QryString.Append("(ISACLS = ")
				QryString.Append(CheckedListItem.Item("ClassCode").ToString())
				
				FirstTime = *False
			Else
				QryString.Append(" *Or ISACLS = ")
				QryString.Append(CheckedListItem.Item("ClassCode").ToString())
			EndIf
	    EndFor
	    
		FirstTime = *True
	    ForEach	CheckedListItem Collection(clbVendor.CheckedItems)
			If FirstTime = *True
				If QryString.Length <> *Zero
					QryString.Append(") *And ")
				EndIf
				
				QryString.Append("(ISAVEN = ")
				QryString.Append(CheckedListItem.Item("VendorNumber").ToString())
				
				FirstTime = *False
			Else
				QryString.Append(" *Or ISAVEN = ")
				QryString.Append(CheckedListItem.Item("VendorNumber").ToString())
			EndIf
	    EndFor
	    
		FirstTime = *True
	    ForEach	CheckedListItem Collection(clbSeason.CheckedItems)
			If FirstTime = *True
				If QryString.Length <> *Zero
					QryString.Append(") *And ")
				EndIf
				
				QryString.Append("(ISACGP = '")
				QryString.Append(CheckedListItem.Item("SeasonCode").ToString())
				QryString.Append("'")
				
				FirstTime = *False
			Else
				QryString.Append(" *Or ISACGP = '")
				QryString.Append(CheckedListItem.Item("SeasonCode").ToString())
				QryString.Append("'")
			EndIf
	    EndFor
	    
	    If QryString.Length <> *Zero
			QryString.Append(")")
		EndIf
		
		// Promo Radio Buttons
		If PromoSelect <> String.Empty
			If QryString.Length <> *Zero
				QryString.Append(" *And ")
			EndIf
			
			QryString.Append(PromoSelect)
		EndIf
			
		// Online Radio Buttons
		If OnlineSelect <> String.Empty
			If QryString.Length <> *Zero
				QryString.Append(" *And ")
			EndIf
			
			QryString.Append(OnlineSelect)
		EndIf

		// Location specific Radio Buttons
		If LocationSelect <> String.Empty
			If QryString.Length <> *Zero
				QryString.Append(" *And ")
			EndIf
			
			QryString.Append(LocationSelect)
		EndIf
	    
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf

		If APPselect <> String.Empty
			ItemsTbl = SpiceItem.SearchByQueryString(Worker,QryString.ToString(),APPselect)
			ItemsTbl = EnrichItemTbl(ItemsTbl)
		Else
			ItemsTbl = SpiceItem.SearchByQueryString(Worker,QryString.ToString())
			ItemsTbl = EnrichItemTbl(ItemsTbl)
		EndIf
		
		LeaveSR ItemsTbl
	EndFunc
	
	/Region Item CRUD
	BegFunc GetItem Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		DclSrParm Market Type(String)

		DclFld CasePack Type(CasePack)
				
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		If SpiceItem.GetItem(Class,Vendor,Style,Colour,Size,Market)
			pLongDescription	 = SpiceItem.ItemLongDescription
			LocalDescription  = SpiceItem.ItemLocalDescription
			pShortDescription = SpiceItem.ItemShortDescription
			pAPP              = SpiceItem.APP
			pUPC              = SpiceItem.UPC
			
			pCaseQty          = SpiceItem.CaseQuantity
			pDistroQty        = SpiceItem.DistroQuantity
			
			pPackCode         = SpiceItem.CasePackCode
			pPackHeight       = SpiceItem.PackHeight
			pPackLength       = SpiceItem.PackLength
			pPackWeight       = SpiceItem.PackWeight
			pPackWidth        = SpiceItem.PackWidth
			
			pVendorStyle      = SpiceItem.VendorStyle
			pSubClass         = SpiceItem.SubClass
			pTicketType       = SpiceItem.TicketType
			pVAT              = SpiceItem.VatCode
			pPendVAT          = SpiceItem.PendingVatCode
			pItemCost         = SpiceItem.ItemCost
			pItemRetail       = SpiceItem.ItemRetail
			pListPrice        = SpiceItem.ListPrice
			pStyleCost        = SpiceItem.StyleCost
			pStyleRetail      = SpiceItem.StyleRetail
			pSKU              = SpiceItem.SKU
			pSKUchk           = SpiceItem.SKUcheck
			pSubClass         = SpiceItem.SubClass
			
			// Get Character Code Description
			GetChar(SpiceItem.CharacterCode)
			
			// Get Season Code Description
			GetSeason(SpiceItem.SeasonCode)
			
			// Get Case Pack Description
			If CasePack = *Nothing
				CasePack = *New CasePack(PgmDB, Environment)
			EndIf
			
			pPackDesc = CasePack.GetPackDescription(SpiceItem.CasePackCode)
			
			LeaveSR *True
		Else
			If SpiceItem.ItemLongDescription <> *Nothing
				pLongDescription  = SpiceItem.ItemLongDescription
			Else
				pLongDescription = '*** Description Not Found ***'
			Endif
			
			LeaveSR *False
		EndIf
	EndFunc
	
	BegFunc GetItemStyle Type(ItemStyle) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		
		DclFld ItemStyle Type(ItemStyle)
		
		Try
			If SpiceItem = *Nothing
				SpiceItem = *New SpiceItem(PgmDB,User)
			EndIf
			
			ItemStyle = SpiceItem.GetItemStyle(Class,Vendor,Style,Colour)
				
			GetClass(ItemStyle.Class)
			ItemStyle.ClassName = pClassName
			
			GetVendor(ItemStyle.Vendor)
			ItemStyle.VendorName = pVendorName
			
			GetColour(ItemStyle.Colour)
			ItemStyle.ColourDesc = pColourName
			
			// Set the BO with Item Style Key
			*this.pStyle = Style
		Catch e Exception
			LeaveSR ItemStyle
		EndTry

		LeaveSR ItemStyle
	EndFunc
	
	BegSr SaveStyleDetails Access(*Public)
		DclSrParm ItemStyle Type(ItemStyle)
		
		DclArray ItemStylePI    Type(System.Reflection.PropertyInfo) Rank(1)
		DclFld   SaveItemStyleT Type(System.Type)
		
		DclFld PropertyValue Type(System.Object)
		DclFld PIofSaveObj   Type(System.Reflection.PropertyInfo)
		
		SaveItemStyle = *New ItemStyle()
		
		Try
			ItemStylePI = ItemStyle.GetType().GetProperties()
			SaveItemStyleT = SaveItemStyle.GetType()
			
			ForEach Property Collection(ItemStylePI) Type(System.Reflection.PropertyInfo)

				PropertyValue = Property.GetValue(ItemStyle,*Nothing)
				PIofSaveObj = SaveItemStyleT.GetProperty(Property.Name)
				If PIofSaveObj <> *Nothing
					PIofSaveObj.SetValue(SaveItemStyle,PropertyValue,*Nothing)
				EndIf
			EndFor
		Catch e Exception
			LeaveSR
		EndTry	

	EndSr
	
	BegFunc GetItemMarkets Type(ArrayList) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.GetItemMarkets(Class,Vendor,Style,Colour,Size)
	EndFunc
	
	BegFunc GetItemSize Type(ItemSize) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		
		DclFld ItemSize Type(ItemSize)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		ItemSize = SpiceItem.GetItemSize(Class,Vendor,Style,Colour,Size)
										
		LeaveSR ItemSize
	EndFunc

	BegFunc GetItemSizesAPP Type(DataTable) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		
		DclFld Sizes Type(DataTable)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		Sizes = SpiceItem.GetItemSizesAPP(Class,Vendor,Style,Colour)
		
		ForEach Size Collection(Sizes.Rows) Type(DataRow)
			If GetSize(Convert.ToInt16(Size["Size"]))
				Size["SizeDesc"] = pSizeName
			EndIf
		EndFor
		
		LeaveSR Sizes
	EndFunc
			
	BegFunc GetItemSizes Type(DataTable) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		
		DclFld Sizes Type(DataTable)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		Sizes = SpiceItem.GetItemSizes(Class,Vendor,Style,Colour)
		
		ForEach Size Collection(Sizes.Rows) Type(DataRow)
			If GetSize(Convert.ToInt16(Size["Size"]))
				Size["SizeDesc"] = pSizeName
			EndIf
		EndFor
		
		LeaveSR Sizes
	EndFunc
	
	BegFunc UpdateItem Type(Boolean) Access(*Public)
		DclSrParm ItemStyle Type(Disney.DA.IP400.ItemStyle)
	
		DclFld ReturnStatus Type(Boolean)
	
		If ItemStyle <> (SaveItemStyle *As ItemStyle)
			ReturnStatus = SpiceItem.UpdateItemStyle(ItemStyle)
		EndIf
		
		If SpiceDS.Tables.Contains("ItemSizes")
			SpiceItem.UpdateItemSizes(ItemStyle,SpiceDS.Tables["ItemSizes"])
		EndIf
	
		// Update or Add Markets
		SpiceItem.UpdateMarketPrices(ItemStyle,SpiceDS.Tables["MarketPrices"])
		
		// Write sizes to DTAQ
		If SpiceDS.Tables.Contains("ItemSizes")
			SpiceItem.WriteChgSizeToDtaQ(SpiceDS.Tables["ItemSizes"])
		Else
			// Generate a list of sizes in the primary market and pass this to the 
			// DTAQ DA function
			SpiceItem.WriteChgSizeToDtaQ(SpiceItem.GetItemSizes(ItemStyle.Class,ItemStyle.Vendor,ItemStyle.Style,ItemStyle.Colour))
		EndIf
		
		LeaveSR ReturnStatus
	EndFunc
	
	BegFunc UpdateAPPItem Type(Boolean) Access(*Public)
		DclSrParm ItemStyle Type(Disney.DA.IP400.ItemStyle)
	
		DclFld ReturnStatus Type(Boolean)
		DclFld rowIndex     Type(Int16) 
		DclFld dataView     Type(DataView) 
		DclFld proceed      Type(Boolean) Inz(*False) 
		
		If(LocalDescription = *Nothing)
			LocalDescription = ""
		EndIf
		SpiceItem.SaveLocalStyleDescription(ItemStyle.Class,ItemStyle.Vendor,ItemStyle.Style,ItemStyle.Colour,LocalDescription)
		
		// todo: this will need tidying up at some point!!
		Try
			If SpiceDS.Tables.Contains("ItemSizes")		
				Dowhile proceed = *False
					proceed = *True
					// todo: this will need tidying up at some point!!
					ForEach row Collection(SpiceDS.Tables["ItemSizes"].Rows) Type(DataRow)
						If (SpiceDS.Tables["ItemSizes"].Columns.Contains("SizeCode"))
							If(row["SizeCode"].ToString() = '9999' *OR row["SizeCode"].ToString() = '9998')
							Else
								row.Delete()
								proceed = *False
								Leave
							EndIf
						EndIf
						If (SpiceDS.Tables["ItemSizes"].Columns.Contains("Size"))
							If(row["Size"].ToString() = '9999' *OR row["Size"].ToString() = '9998')
							Else
								row.Delete()
								proceed = *False
								Leave
							EndIf
						EndIf
					EndFor	
				Enddo	
			
				SpiceItem.UpdateItemSizes(ItemStyle,SpiceDS.Tables["ItemSizes"])
			EndIf
			
			If SpiceDS.Tables.Contains("MarketPrices")	
				Dowhile proceed = *False
					proceed = *True
					ForEach row Collection(SpiceDS.Tables["MarketPrices"].Rows) Type(DataRow)
						If (SpiceDS.Tables["MarketPrices"].Columns.Contains("Size"))
							If(row["Size"].ToString() = '9999' *OR row["Size"].ToString() = '9998')
							Else
								row.Delete()
								proceed = *False
								Leave
							EndIf
						EndIf
						If (SpiceDS.Tables["MarketPrices"].Columns.Contains("SizeCode"))
							If(row["SizeCode"].ToString() = '9999' *OR row["SizeCode"].ToString() = '9998')
							Else
								row.Delete()
								proceed = *False
								Leave
							EndIf
						EndIf

					EndFor
				Enddo	
				
				// Update or Add Markets
				SpiceItem.UpdateMarketPrices(ItemStyle,SpiceDS.Tables["MarketPrices"])
			EndIf
		Catch Name(exc) Type(Exception)
			Throw exc
		EndTry

		LeaveSR ReturnStatus
	EndFunc
	
	BegFunc WriteItem Type(Boolean) Access(*Public)
	
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		With SpiceItem
			.Division   = pDivision
			.Department = pDepartment
			.Class      = pClass
			.VendorCode = pVendor
			.Style      = pStyle
			.Colour     = pColour
			.Size       = pSize
		
			.ItemLongDescription  = pLongDescription
			.ItemLocalDescription = LocalDescription
			.ItemShortDescription = pShortDescription
		
			.CasePackCode    = pPackCode
			.UPC             = pUPC
			.CaseQuantity    = pCaseQty
			.DistroQuantity  = pDistroQty
			.PackHeight      = pPackHeight
			.PackLength      = pPackLength
			.PackWeight      = pPackWeight
			.PackWidth       = pPackWidth
			.CommodityCode   = pCommodityCode
			.CompositionCode = pCompoCode
			.CountryCode     = pCountryCode
			.CharacterCode   = pCharCode
			.SeasonCode      = pSeasonCode
			.GenderCode      = pGenderCode
			.OnlineInd       = pOnlineInd
			.LocationInd     = pLocationInd
			.ImportDomesticInd = pImpDomInd
			.PromotionCode   = pPromotion
			.SeasonCode      = pSeasonCode
			.StyleCost       = pStyleCost
			.StyleRetail     = pStyleRetail
			.TicketType      = pTicketType
			.VendorStyle     = pVendorStyle
			.LicenceCode     = pLicenceCode
			.AgeGroup        = pAgeGroup
			.SubClass        = pSubClass
			.SellingChannel  = SellingChannel
			.ForOnlineEcommerce = ForOnlineEcommerce
			.OfferEffectiveDate = OfferEffectiveDate
			.DropShip = DropShip
			.ItemShipAlone = ItemShipAlone
			.SpecialHandling = SpecialHandling
			.SpecialHandlingCode = SpecialHandlingCode
			.SellOutControl = SellOutControl
			.SuppressBackOrderCard = SuppressBackOrderCard
			.ThirdPartySeller = ThirdPartySeller
			.UserField1 = UserField1
			.UserField2 = UserField2
			.DCNotes = DCNotes
			
			CheckDescriptionOnStyleSize(.ItemLongDescription)
			.SelectedSizesTable   = SpiceDS.Tables["ItemSizes"]
		
			DclFld obj Type(Object)
			ForEach Row Collection(SpiceDS.Tables["MarketSizes"].Rows) Type(DataRow)
				obj = Row
			EndFor
		
			.SelectedMarketsTable = SpiceDS.Tables["MarketSizes"]
		EndWith
		
		LeaveSR (SpiceItem.WriteItem())
	EndFunc
	
	BegSR CheckDescriptionOnStyleSize Access(*Private)
		DclSrParm Description Type(String)
		
		DclFld itemDesc Type(String)
		
		//SpiceDS.Tables.Contains("FilteredSubClass")
		
		ForEach row Collection(SpiceDS.Tables["ItemSizes"].Rows) Type(DataRow)
			itemDesc = row["Description"] *AS String
			
			If (itemDesc = *Nothing *OR itemDesc = String.Empty)
				row["Description"] = Description
			EndIf			
		EndFor
	EndSR
	
	BegFunc WriteAPPItem Type(Boolean) Access(*Public)
	
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		With SpiceItem
			.Division   = ClassDivision
			.Department = ClassDepartment
			.Class      = Class
			.VendorCode = VendorCode
			.Style      = Style
			.Colour     = Colour
			.Size       = Size
		
			.ItemLongDescription  = LongDescription
			.ItemLocalDescription = LocalDescription
			.ItemShortDescription = ShortDescription
		
			.CasePackCode    = PackCode
			.UPC             = UPC
			.CaseQuantity    = CaseQuantity
			.DistroQuantity  = DistroQuantity
			.PackHeight      = PackHeight
			.PackLength      = PackLength
			.PackWeight      = PackWeight
			.PackWidth       = PackWidth
			.CommodityCode   = CommodityCode
			.CompositionCode = CompositionCode
			.CountryCode     = CountryCode
			.CharacterCode   = CharacterCode
			.SeasonCode      = SeasonCode
			.GenderCode      = GenderCode
			.OnlineInd       = OnlineInd
			.LocationInd     = LocationInd
			.ImportDomesticInd = ImportDomesticInd
			.PromotionCode   = PromotionCode
			.SeasonCode      = SeasonCode
			.StyleCost       = StyleCost
			.StyleRetail     = StyleRetail
			.TicketType      = TicketType
			.VendorStyle     = VendorStyle
			.LicenceCode     = LicenceCode
			.AgeGroup        = AgeGroupID
			.SubClass        = SubClass
			.SellingChannel  = SellingChannel
			.OfferEffectiveDate = OfferEffectiveDate
			.DropShip = DropShip
			.ItemShipAlone = ItemShipAlone
			.SpecialHandling = SpecialHandling
			.SpecialHandlingCode = SpecialHandlingCode
			.SellOutControl = SellOutControl
			.SuppressBackOrderCard = SuppressBackOrderCard
			.ThirdPartySeller = ThirdPartySeller
			.UserField1 = UserField1
			.UserField2 = UserField2
			.DCNotes = DCNotes
			
			CheckDescriptionOnStyleSize(.ItemLongDescription)
			.SelectedSizesTable   = SpiceDS.Tables["ItemSizes"]
		
			.SelectedMarketsTable = SpiceDS.Tables["MarketSizes"]
		EndWith
		
		LeaveSR (SpiceItem.WriteAPPItem())
	EndFunc
		
	BegFunc ChkItemExists Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		DclSrParm Market Type(String)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB, User)
		EndIf
		
		LeaveSR SpiceItem.ChkItemExists(Class, Vendor, Style, Colour, Size, Market)
	EndFunc
			
	/EndRegion
	
	BegFunc ChkItemStyleColourUnique Type(Boolean) Access(*Public)
	
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR (SpiceItem.ChkItemStyleColourUnique(pClass,pVendor,pStyle,pColour))
	EndFunc
	
	BegFunc ChkItemStyleColourUnique Type(Boolean) Access(*Public)
		DclSrParm	APPColour Type(Int16)
			
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR (SpiceItem.ChkItemStyleColourUnique(pClass,pVendor,pStyle,APPColour))
	EndFunc

	BegFunc IIARecordExists Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
			
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR (SpiceItem.IIARecordExists(Class,Vendor,Style,Colour,Size))
	EndFunc

	BegFunc IMIRecordExists Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		DclSrParm Market Type(String)
			
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR (SpiceItem.IMIRecordExists(Class,Vendor,Style,Colour,Size,Market))
	EndFunc
			
	BegFunc GetItemStyleColour Type(Int16) Access(*Public)
		DclSrparm Class    Type(Int16) 
		DclSrParm Vendor   Type(Int32)  
		DclSrparm Style    Type(Int16)
			
		DclFld StyleColour Type(Int16)
		
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		StyleColour = SpiceItem.GetItemStyleColour(Class, Vendor, Style)
		
		LeaveSR StyleColour
	EndFunc
	
	BegFunc ChkItemStyleUnique Type(Boolean) Access(*Public)
	
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR (SpiceItem.ChkItemStyleUnique(pClass,pVendor,pStyle))
	EndFunc
	
	BegFunc ChkItemShipped Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		
		DclFld ChkShipped Type(Disney.DA.IP400.IPITHDRcls)
		
		If ChkShipped = *Nothing
			ChkShipped = *New Disney.DA.IP400.IPITHDRcls(PgmDB)
		EndIf
		
		LeaveSR ChkShipped.ChkItemShipped(Class,Vendor,Style,Colour,Size)
	EndFunc
	
	BegFunc ChkLineOrderStatus Type(Boolean) Access(*Public)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
	
		DclFld OrderLines  Type(DSSPPOIcls)
		DclFld OrderHeader Type(DSSPPOHcls)
		DclFld Lines       Type(DataTable)
		DclFld OrderStatus Type(String)
		
		If OrderLines = *Nothing
			OrderLines = *New DSSPPOIcls(PgmDB)
		EndIf
		
		Lines = OrderLines.GetItemLines(Class,Vendor,Style,Colour,Size)
		If Lines = *Nothing
			LeaveSR *True
		EndIf
		
		If OrderHeader = *Nothing
			OrderHeader = *New DSSPPOHcls(PgmDB,User)
		EndIf
		
		ForEach OrderLine Collection(Lines.Rows) Type(DataRow)

			OrderStatus = OrderHeader.GetPOStatus(OrderLine["POnumber"] *As String)
			If  OrderStatus <> 'OP' +
			And OrderStatus <> 'RP' +
			And OrderStatus <> 'OC' +
			And OrderStatus <> 'RC' +
			And OrderStatus <> 'OR' +
			And OrderStatus <> 'RR'
				LeaveSR *False
			EndIf
		EndFor
		
		LeaveSR *True
	EndFunc
	
	BegFunc ChkStItemyleSubClass Type(Boolean) Access(*Public)
		DclSrParm Class      Type(Int16)
		DclSrParm Vendor     Type(Int32)
		DclSrParm Style      Type(Int16)
		DclSrParm SubClass   Type(String)
			
		If SpiceItem = *Nothing
			SpiceItem = *New SpiceItem(PgmDB,User)
		EndIf
		
		LeaveSR SpiceItem.ChkItemStyleSubClass(Class, Vendor, Style, SubClass)
		
	EndFunc
		
	/EndRegion

EndClass
