Using System
Using System.Text
Using System.Drawing

Using Disney.SRR

DclNameSpace Disney.SRR

BegClass SRRgrid1 Access(*Public)
	
	DclFld SRRuplift    Type(Disney.SRR.SRRuplift)
	DclFld SRRsmooth    Type(Disney.SRR.SRRsmooth)
	DclFld SRRcutOff    Type(Disney.SRR.SRRcutOff)
	DclFld SRRalloc     Type(Disney.SRR.SRRalloc)
	
	DclFld  ErrorCount      Type(*Integer2)
	//DclFld  _SelectedRow    Type(*Integer4)
	DclFld  _GridCleared    Type(*Boolean)

	DclEvent UpLift_Changed Access(*Public)
	DclEvent Smooth_Changed Access(*Public)
	DclEvent CutOff_Changed Access(*Public)
	DclEvent Alloc_Changed  Access(*Public)
	
	/Region Constructor & Destructor
	BegConstructor Access(*Public)
		DclSrParm SRRuplift    Type(Disney.SRR.SRRuplift)
		DclSrParm SRRsmooth    Type(Disney.SRR.SRRsmooth)
		DclSrParm SRRcutOff    Type(Disney.SRR.SRRcutOff)
		DclSrParm SRRalloc     Type(Disney.SRR.SRRalloc)
				
		*this.SRRuplift  = SRRuplift
		*this.SRRsmooth  = SRRsmooth
		*this.SRRcutOff  = SRRcutOff
		*this.SRRalloc   = SRRalloc
		
		*this.ErrorCount = *Zero
	EndConstructor
	/EndRegion

	/Region Property definitions
	BegProp HasValidationErrors Type(*Boolean) Access(*Public)
		BegGet
			If ErrorCount > *Zero
				LeaveSR *True
			Else
				LeaveSR *False
			EndIf
		EndGet
	EndProp
	
	BegProp GridCleared Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _GridCleared
		EndGet
	EndProp
	/EndRegion
	
	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid1      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
	
		Grid1.Rows.Clear()
		Grid1.Rows.Add()
		
		
		// Uplift factor
		SRRuplift.GetUplift()
		If SRRuplift.IsFound
			Grid1.Item['G1UpLift',0].Value = SRRuplift.Value
		EndIf
		If SRRuplift.IsChanged
			Grid1.Item['G1UpLift',0].Style.ForeColor = Color.Red
		EndIf
		If SRRuplift.ExceptionsBelow
			Grid1.Item['G1UpLift',0].Style.BackColor = Color.Yellow
		EndIf
		
		
		// Smoothing Factor
		SRRsmooth.GetSmooth()
		If SRRsmooth.IsFound
			Grid1.Item['G1Smooth',0].Value = SRRsmooth.Value
		EndIf
		If SRRsmooth.IsChanged
			Grid1.Item['G1Smooth',0].Style.ForeColor = Color.Red
		EndIf
		If SRRsmooth.ExceptionsBelow
			Grid1.Item['G1Smooth',0].Style.BackColor = Color.Yellow
		EndIf
		
		
		// Cover Cut-Off Factor
		SRRcutOff.GetCutOff()
		If SRRcutOff.IsFound
			Grid1.Item['G1CutOff',0].Value = SRRcutOff.Value
		EndIf
		If SRRcutOff.IsChanged
			Grid1.Item['G1CutOff',0].Style.ForeColor = Color.Red
		EndIf
		If SRRcutOff.ExceptionsBelow
			Grid1.Item['G1CutOff',0].Style.BackColor = Color.Yellow
		EndIf
		
		
		// Allocation flag
		SRRalloc.GetAlloc()
		If SRRalloc.IsFound
			Grid1.Item['G1Alloc',0].Value = SRRalloc.Value
		EndIf
		If SRRalloc.IsChanged
			Grid1.Item['G1Alloc',0].Style.ForeColor = Color.Red
		EndIf
		If SRRalloc.ExceptionsBelow
			Grid1.Item['G1Alloc',0].Style.BackColor = Color.Yellow
		EndIf
		
		
		// Stock requirement
		If SRRdetails <> *Nothing
			SRRdetails.GetStkReq()
			If SRRdetails.StockReq <> *Zero
				Grid1.Item['G1StkReq',0].Value = SRRdetails.StockReq
			EndIf
			
			If SRRdetails.IdealQty <> *Zero
				Grid1.Item['G1IdealQty',0].Value = SRRdetails.IdealQty
			EndIf
			
			If SRRdetails.ProposedQty <> *Zero
				Grid1.Item['G1PropQty',0].Value = SRRdetails.ProposedQty
			EndIf
		EndIf
		
		_GridCleared = *False

		DoEvents
	EndSR
	
	BegSR ClearGrid Access(*Public)
		DclSrParm Grid1  Type(System.Windows.Forms.DataGridView)
		
		Grid1.Rows.Clear()	
		_GridCleared = *True
	EndSR

	BegSR CellValueChanged Access(*Public)
		DclSrParm sender Type(*Object)
		DclSrParm e      Type(System.Windows.Forms.DataGridViewCellEventArgs)
		DclSrParm Grid1  Type(System.Windows.Forms.DataGridView)

		DclFld ColumnName Type( *String )
		DclFld CellValue  Type( *String )
		
		DclFld Column Type(*Integer4)
		DclFld Row    Type(*Integer4)
		
		DclFld Uplift Type(*Zoned) Len(5,2)
		DclFld Smooth Type(*Zoned) Len(5,2)
		DclFld CutOff Type(*Zoned) Len(5,2)
		DclFld Alloc  Type(*Char)  Len(1)

		Column = e.ColumnIndex
		Row    = e.RowIndex
		
		If Column >= *Zero and Row >= *Zero
			ColumnName = Grid1.Columns[Column].Name.ToUpper()
			
			Try
				CellValue = Grid1.Item[Column, Row].Value.ToString().Trim()
			Catch Err Exception
				CellValue = String.Empty
			EndTry
			
			Select
			When ColumnName = 'G1UPLIFT'
				If Grid1.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid1.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid1.Item[Column,Row].ErrorText = 'Please enter a number'
					ErrorCount += 1
					LeaveSR
				EndIf
				
				Try
					Uplift = Convert.ToDecimal( CellValue )
				Catch Err Exception
					Grid1.Item[Column,Row].ErrorText = 'Invalid Number'
					ErrorCount += 1
					LeaveSR
				EndTry
				
				If Uplift < 0.01 Or Uplift > 9.99
					Grid1.Item[Column,Row].ErrorText = 'Value must be greater than Zero and less than Ten'
					ErrorCount += 1
					LeaveSR
				EndIf
					
				Grid1.Item[Column,Row].Style.ForeColor = Color.Red
				SRRuplift.UpdateUplift(Uplift)
				
				// Ripple change down the grids 
				ExSr UpLift_Changed


			// Note. Smoothing factor can be zero				
			When ColumnName = 'G1SMOOTH'
				If Grid1.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid1.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					grid1.Item[Column,Row].ErrorText = 'Please enter a number'
					ErrorCount +=1
					LeaveSR
				EndIf

				Try
					Smooth = Convert.ToDecimal( CellValue )
				Catch Err Exception
					grid1.Item[Column,Row].ErrorText = 'Invalid Number'
					ErrorCount +=1
					LeaveSR
				EndTry
				
				If Smooth > 1 Or Smooth < *Zero
					grid1.Item[Column,Row].ErrorText = 'Number must be Greater than 0 and less than 1'
					ErrorCount += 1
					LeaveSR
				EndIf
					
				Grid1.Item[Column,Row].Style.ForeColor = Color.Red
				SRRsmooth.UpdateSmooth(Smooth)
			
				// Ripple change down the grids 
				ExSr Smooth_Changed
				
				
			When ColumnName = 'G1CUTOFF'
				If Grid1.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid1.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					grid1.Item[Column,Row].ErrorText = 'Please enter a number'
					ErrorCount +=1
					LeaveSR
				EndIf
				
				Try
					CutOff = Convert.ToDecimal( CellValue )
				Catch Err Exception
					grid1.Item[Column,Row].ErrorText = 'Invalid Number'
					ErrorCount +=1
					LeaveSR
				EndTry
				
				If CutOff <= *Zero
					grid1.Item[Column,Row].ErrorText = 'Value must be greater than zero'
					ErrorCount +=1
					LeaveSR
				EndIf
				
				Grid1.Item[Column,Row].Style.ForeColor = Color.Red
				SRRcutoff.UpdateCutOff(CutOff)
				
				// Ripple change down the grids 
				ExSr CutOff_Changed
				
			When ColumnName = 'G1ALLOC'
				If Grid1.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid1.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				Alloc = CellValue.ToUpper().Trim()
				If Alloc = 'Y' Or Alloc = 'N'
					Grid1.Item[Column,Row].Style.ForeColor = Color.Red
					Grid1.Item[Column, Row].Value = Alloc
					
					SRRalloc.UpdateAlloc(Alloc)
					
					// Ripple change down the grids 
					ExSr Alloc_Changed
				Else
					grid1.Item[Column,Row].ErrorText = 'Invalid Flag (Must be Y or N)'
					ErrorCount +=1
					LeaveSR
				EndIf
			EndSL
		EndIf
	EndSR
EndClass