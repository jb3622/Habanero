Using System
Using System.Text
Using System.Drawing

Using Disney.SRR

DclNameSpace Disney.SRR

BegClass SRRgrid5 Access(*Public)

	/Region Declare DataBase
	DclDB Name(SRR) DBName("TDST")
	
	DclDiskFile Name(IPCLASSB) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/IPCLASSB') ImpOpen(*No)
		
	DclDiskFile Name(DSCLASS) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/DSCLASS') ImpOpen(*No)
	/EndRegion
	
	DclFld SRRuplift    Type(Disney.SRR.SRRuplift)
	DclFld SRRsmooth    Type(Disney.SRR.SRRsmooth)
	DclFld SRRcutOff    Type(Disney.SRR.SRRcutOff)
	DclFld SRRalloc     Type(Disney.SRR.SRRalloc)

	DclArray ClassArray    Type(*Zoned)    Len(4,0) Dim(50)
	DclFld   NoOfClasses   Type(*Integer4)
	DclFld   Department    Type(*Zoned)    Len(3,0)
	DclFld   ErrorCount    Type(*Integer2)          Inz(*Zero)
	DclFld   _GridCleared  Type(*Boolean)
	DclFld   _SelectedRow  Type(*Integer4)
	DclFld  Filtering      Type(*Boolean)
	
	DclEvent UpLift_Changed Access(*Public)
	DclEvent Smooth_Changed Access(*Public)
	DclEvent CutOff_Changed Access(*Public)
	DclEvent Alloc_Changed  Access(*Public)

	/Region Constructor & Destructor
	BegConstructor Access(*Public)
		DclSrParm SRR        Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm Department Type(*Zoned) Len(3,0)
		DclSrParm SRRuplift  Type(Disney.SRR.SRRuplift)
		DclSrParm SRRsmooth  Type(Disney.SRR.SRRsmooth)
		DclSrParm SRRcutOff  Type(Disney.SRR.SRRcutOff)
		DclSrParm SRRalloc   Type(Disney.SRR.SRRalloc)

		*this.SRR = SRR
		*this.Department = Department
		*this.SRRuplift  = SRRuplift
		*this.SRRsmooth  = SRRsmooth
		*this.SRRcutOff  = SRRcutoff
		*this.SRRalloc   = SRRalloc
		
		LoadClassArray()
	EndConstructor
	/EndRegion
	
	/Region Property definitions
	BegProp HasValidationErrors Type(*Boolean) Access(*Public)
		BegGet
			If ErrorCount > *Zero
				LeaveSR *True
			Else
				LeaveSR *False
			EndIf
		EndGet
	EndProp
	
	BegProp GridCleared Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _GridCleared
		EndGet
	EndProp
		
	BegProp SelectedRow Type(*Integer4) Access(*Public)
		BegGet
			LeaveSR _SelectedRow
		EndGet
		BegSet
			_SelectedRow = *PropVal
		EndSet
	EndProp
	
	BegProp isFiltered Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR Filtering
		EndGet
	EndProp
	/EndRegion

	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid5      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
		
		DclFld BoldFont    Type(System.Drawing.Font) New(Grid5.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid5.Font, FontStyle.Regular)

		DclFld _Uplift Type(*Zoned)  Len(3,2)
		DclFld _Smooth Type(*Zoned)  Len(5,2)
		DclFld _CutOff Type(*Zoned)  Len(5,2)
		DclFld _Alloc  Type(*Char)   Len(1)
	
		DclFld Row      Type(*Integer4)
		DclFld RowCount Type(*Integer4)
		
		DclFld Class      Type(*Zoned) Len(4,0)
		DclFld ClassIndex Type(*Integer4)
		
		// Find Class defaults (Department level)
		_UpLift = SRRuplift.GetDftUplift()
		_Smooth = SRRsmooth.GetDftSmooth()
		_CutOff = SRRcutoff.GetDftCutOff()
		_Alloc  = SRRalloc.GetDftAlloc()
		
		Grid5.Rows.Clear()
		
		Do FromVal(0) ToVal(NoOfClasses) Index(ClassIndex)
			Class = ClassArray(ClassIndex)
			
			Grid5.Rows.Add()
			RowCount = Grid5.Rows.Count
			Row = RowCount - 1

			Grid5 = Populate_Row(Grid5, Row, Class, +
				_UpLift, _Smooth, _CutOff, _Alloc)

								
			// Stock requirement - by Store
			If SRRdetails <> *Nothing
				SRRdetails.GetClsReq(Class)
				If SRRdetails.StockReq <> *Zero
					Grid5.Item['G5StkReq',Row].Value = SRRdetails.StockReq
				EndIf
				
				If SRRdetails.IdealQty <> *Zero
					Grid5.Item['G5IdealQty',Row].Value = SRRdetails.IdealQty
				EndIf
				
				If SRRdetails.ProposedQty <> *Zero
					Grid5.Item['G5PropQty',Row].Value = SRRdetails.ProposedQty
				EndIf
			EndIf
		EndDo
		
		_GridCleared = *False

		DoEvents
	EndSR
	
	BegSR ClearGrid Access(*Public)
		DclSrParm Grid5  Type(System.Windows.Forms.DataGridView)
		
		Grid5.Rows.Clear()
		_GridCleared = *True
	EndSR
	
	BegFunc Populate_Row Type(system.Windows.Forms.DataGridView)
		DclSrParm Grid5   Type(system.Windows.Forms.DataGridView)
		DclSrParm Row     Type(*Integer4)
		DclSrParm Class   Type(*Zoned)  Len(4,0)
		DclSrParm _UpLift Type(*Zoned)  Len(3,2)
		DclSrParm _Smooth Type(*Zoned)  Len(5,2)
		DclSrParm _CutOff Type(*Zoned)  Len(5,2)
		DclSrParm _Alloc  Type(*Char)   Len(1)
		
		DclFld BoldFont    Type(System.Drawing.Font) New(Grid5.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid5.Font, FontStyle.Regular)
		
		DclFld Uplift Type(*Zoned)  Len(3,2)
		DclFld CutOff Type(*Zoned)  Len(5,2)
		DclFld Alloc  Type(*Char)   Len(1)
		

		Grid5.Rows[Row].Cells['G5Class'].Value = Class
		
		// Uplift factor
		SRRuplift.GetUplift(Class)
		If SRRuplift.IsFound
			UpLift = SRRuplift.Value
			Grid5.Item['G5UpLift', Row].Style.Font = RegularFont
			
			If SRRuplift.IsChanged
				Grid5.Item['G5UpLift',Row].Style.ForeColor = Color.Red
			Else
				Grid5.Item['G5UpLift',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			UpLift = _Uplift
			Grid5.Item['G5UpLift',Row].Style.ForeColor = Color.Blue
			Grid5.Item['G5UpLift',Row].Style.Font      = BoldFont
		EndIf
		If Uplift <> *Zero
			Grid5.Item['G5UpLift',Row].Value = Uplift
		EndIf
		If SRRuplift.ExceptionsBelow
			Grid5.Item['G5UpLift',Row].Style.BackColor = Color.Yellow
		EndIf

			
		// Smoothing factor
		SRRsmooth.GetSmooth(Class)
		If SRRsmooth.IsFound
			Grid5.Item['G5Smooth',Row].Value      = SRRsmooth.Value
			Grid5.Item['G5Smooth',Row].Style.Font = RegularFont
			
			If SRRsmooth.IsChanged
				Grid5.Item['G5Smooth',Row].Style.ForeColor = Color.Red
			Else
				Grid5.Item['G5Smooth',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			Grid5.Item['G5Smooth',Row].Value           = _Smooth
			Grid5.Item['G5Smooth',Row].Style.ForeColor = Color.Blue
			Grid5.Item['G5Smooth',Row].Style.Font      = BoldFont
		EndIf
		If SRRsmooth.ExceptionsBelow
			Grid5.Item['G5Smooth',Row].Style.BackColor = Color.Yellow
		EndIf
			
					
		// Cover Cut-Off factor
		SRRcutoff.GetCutOff(Class)
		If SRRcutoff.IsFound
			CutOff = SRRcutoff.Value
			Grid5.Item['G5CutOff',Row].Style.Font = RegularFont
			
			If SRRcutoff.IsChanged
				Grid5.Item['G5CutOff',Row].Style.ForeColor = Color.Red
			Else
				Grid5.Item['G5CutOff',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			CutOff = _CutOff
			Grid5.Item['G5CutOff',Row].Style.ForeColor = Color.Blue
			Grid5.Item['G5CutOff',Row].Style.Font      = BoldFont
		EndIf
		If CutOff <> *Zero
			Grid5.Item['G5CutOff',Row].Value = CutOff
		EndIf
		If SRRcutoff.ExceptionsBelow
			Grid5.Item['G5CutOff',Row].Style.BackColor = Color.Yellow
		EndIf
			
				
		// Allocation flag
		SRRalloc.GetAlloc(Class)
		If SRRalloc.IsFound
			Alloc = SRRalloc.Value
			Grid5.Item['G5Alloc',Row].Style.Font = RegularFont
			
			If SRRalloc.IsChanged
				Grid5.Item['G5Alloc',Row].Style.ForeColor = Color.Red
			Else
				Grid5.Item['G5Alloc',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			Alloc = _Alloc
			Grid5.Item['G5Alloc',Row].Style.ForeColor = Color.Blue
			Grid5.Item['G5Alloc',Row].Style.Font      = BoldFont
		EndIf
		If Alloc <> *Blank
			Grid5.Item['G5Alloc',Row].Value = Alloc
		EndIf
		If SRRalloc.ExceptionsBelow
			Grid5.Item['G5Alloc',Row].Style.BackColor = Color.Yellow
		EndIf
		
		LeaveSR Grid5
	EndFunc
	
	BegSR CellValueChanged Access(*Public)
		DclSrParm sender Type(*Object)
		DclSrParm e      Type(System.Windows.Forms.DataGridViewCellEventArgs)
		DclSrParm Grid5  Type(System.Windows.Forms.DataGridView)

		DclFld BoldFont    Type(System.Drawing.Font) New(Grid5.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid5.Font, FontStyle.Regular)
		
		DclFld ColumnName Type( *String )
		DclFld CellValue  Type( *String )
		
		DclFld Column Type(*Integer4)
		DclFld Row    Type(*Integer4)

		DclFld Class  Type(*Zoned) Len(4,0)
		DclFld Uplift Type(*Zoned) Len(5,2)
		DclFld Smooth Type(*Zoned) Len(5,2)
		DclFld CutOff Type(*Zoned) Len(5,2)
		DclFld Alloc  Type(*Char)  Len(1)

		Column = e.ColumnIndex
		Row    = e.RowIndex
		
		If Column >= *Zero and Row >= *Zero
			ColumnName = Grid5.Columns[Column].Name.ToUpper()
			Try
				CellValue = Grid5.Item[Column, Row].Value.ToString().Trim()
			Catch Err Exception
				CellValue = String.Empty
			EndTry
			
			// Get Market value from grid
			Class = Convert.ToInt32(Grid5.Item['G5Class', Row].Value.ToString().Trim())

			Select
			When ColumnName = 'G5UPLIFT'
				If Grid5.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid5.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid5.Item[Column, Row].Value           = SRRuplift.GetDftUplift()
					Grid5.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid5.Item[Column, Row].Style.Font      = BoldFont

					SRRuplift.DeleteUplift(Class)
				Else
					Try
						Uplift = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid5.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Uplift < 0.01 Or Uplift > 9.99
						Grid5.Item[Column,Row].ErrorText = 'Value must be between Zero and Ten'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid5.Item[Column, Row].Style.ForeColor = Color.Red
					Grid5.Item[Column, Row].Style.Font      = RegularFont
					
					SRRuplift.UpdateUplift(Class, UpLift)
					ExSr UpLift_Changed
				EndIf
				
					
			When ColumnName = 'G5SMOOTH'
				If Grid5.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid5.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid5.Item[Column, Row].Value           = SRRsmooth.GetDftSmooth()
					Grid5.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid5.Item[Column, Row].Style.Font      = BoldFont
					
					SRRsmooth.DeleteSmooth(Class)
				Else
					Try
						Smooth = Convert.ToDecimal( CellValue )
					Catch Err Exception
						Grid5.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Smooth > 1 Or Smooth < *Zero
						Grid5.Item[Column,Row].ErrorText = 'Value must be between 0 and 1'
						ErrorCount += 1
						LeaveSR
					EndIf
				
					Grid5.Item[Column, Row].Style.ForeColor = Color.Red
					Grid5.Item[Column, Row].Style.Font      = RegularFont
				
					SRRsmooth.UpdateSmooth(Class, Smooth)
					ExSr Smooth_Changed
				EndIf
				
				
			When ColumnName = 'G5CUTOFF'
				If Grid5.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					grid5.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid5.Item[Column, Row].Value           = SRRcutoff.GetDftCutOff()
					Grid5.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid5.Item[Column, Row].Style.Font      = BoldFont
					
					SRRcutoff.DeleteCutOff(Class)
				Else
					Try
						CutOff = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid5.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If CutOff <= *Zero
						grid5.Item[Column,Row].ErrorText = 'Value must be greater than zero'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid5.Item[Column, Row].Style.ForeColor = Color.Red
					Grid5.Item[Column, Row].Style.Font      = RegularFont
					
					SRRcutoff.UpdateCutOff(Class, CutOff)
					ExSr CutOff_Changed
				EndIf
				
				
			When ColumnName = 'G5ALLOC'
				If Grid5.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					grid5.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid5.Item[Column, Row].Value           = SRRalloc.GetDftAlloc()
					Grid5.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid5.Item[Column, Row].Style.Font      = BoldFont
					
					SRRalloc.DeleteAlloc(Class)
				Else
					Alloc = CellValue.ToUpper().Trim()
					If Alloc = 'Y' Or Alloc = 'N'
						Grid5.Item[Column, Row].Value = Alloc
						Grid5.Item[Column, Row].Style.ForeColor = Color.Red
						Grid5.Item[Column, Row].Style.Font      = RegularFont 
					
						SRRalloc.UpdateAlloc(Class, Alloc)
						ExSr Alloc_Changed
					Else
						grid5.Item[Column,Row].ErrorText = 'Invalid Flag (Must be Y or N)'
						ErrorCount += 1
						LeaveSR
					EndIf
				EndIf
			EndSL
		EndIf
	EndSR
	
	BegSR RmvExceptions Access(*Public)
		DclSrParm Grid5 Type(System.Windows.Forms.DataGridView)
	
		DclFld Class  Type(*Zoned)  Len(4,0)
		DclFld Row    Type(*Integer2)
		
		Do FromVal(0) ToVal(Grid5.Rows.Count -1) Index(Row)
			Class = Convert.ToInt32(Grid5.Item['G5Class', Row].Value)

			// Find Dept/Market/DeptGrade/Store level records and delete
			SRRuplift.DeleteUpLift(Class)
			SRRsmooth.DeleteSmooth(Class)
			SRRcutoff.DeleteCutOff(Class)
			SRRalloc.DeleteAlloc(Class)
			
			ErrorCount = *Zero
		EndDo
	EndSr

	BegSR LoadClassArray
			
		If Not IPCLASSB.IsOpen
			Open IPCLASSB
		EndIf
		
		If Not DSCLASS.IsOpen
			Open DSCLASS
		EndIf
		
		NoOfClasses = -1
		SetRange IPCLASSB FirstKey(Department)
		DoUntil IPCLASSB.IsEof
			Read IPCLASSB
			If Not IPCLASSB.IsEof
				Chain DSCLASS Key(CCLS)
				If DSCLASS.IsFound And CCODE = 'Y'
					NoOfClasses += 1
					ClassArray(NoOfClasses) = CCLS
				EndIf
			EndIf
		EndDo
		
		Close IPCLASSB
		Close DSCLASS
	EndSr
EndClass