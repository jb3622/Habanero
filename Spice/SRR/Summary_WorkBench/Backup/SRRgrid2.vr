Using System
Using System.Text
Using System.Drawing

Using Disney.SRR

DclNameSpace Disney.SRR

BegClass SRRgrid2 Access(*Public)

	/Region Declare DataBase
	DclDB Name(SRR) DBName("TDST")

	DclDiskFile Name(DSCNTAP) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/DSCNTAP3') ImpOpen(*No)
	/EndRegion
	
	DclFld SRRkeyColor  Type(Disney.SRR.SRRkeyColor)
	DclFld SRRuplift    Type(Disney.SRR.SRRuplift)
	DclFld SRRsmooth    Type(Disney.SRR.SRRsmooth)
	DclFld SRRcutOff    Type(Disney.SRR.SRRcutOff)
	DclFld SRRalloc     Type(Disney.SRR.SRRalloc)
	
	DclArray MarketArray     Type(*Char)   Len(2)    Dim(9) 
	DclFld   NumberOfMarkets Type(*Integer4)
	DclFld   ErrorCount      Type(*Integer2) Inz(*Zero)
	DclFld   _SelectedRow    Type(*Integer4)
	DclFld   _GridCleared    Type(*Boolean)
	
	DclEvent UpLift_Changed Access(*Public)
	DclEvent Smooth_Changed Access(*Public)
	DclEvent CutOff_Changed Access(*Public)
	DclEvent Alloc_Changed  Access(*Public)

	/Region Constructor & Destructor
	BegConstructor Access(*Public)
		DclSrParm SRR         Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm SRRkeyColor Type(Disney.SRR.SRRkeyColor)
		DclSrParm SRRuplift   Type(Disney.SRR.SRRuplift)
		DclSrParm SRRsmooth   Type(Disney.SRR.SRRsmooth)
		DclSrParm SRRcutOff   Type(Disney.SRR.SRRcutOff)
		DclSrParm SRRalloc    Type(Disney.SRR.SRRalloc)

		*this.SRR          = SRR
		*this.SRRkeyColor  = SRRkeyColor
		*this.SRRuplift    = SRRuplift
		*this.SRRsmooth    = SRRsmooth
		*this.SRRcutOff    = SRRcutoff
		*this.SRRalloc     = SRRalloc
				
		LoadMarketArray()
	EndConstructor
	/EndRegion
	
	/Region Property definitions
	BegProp HasValidationErrors Type(*Boolean) Access(*Public)
		BegGet
			If ErrorCount > *Zero
				LeaveSR *True
			Else
				LeaveSR *False
			EndIf
		EndGet
	EndProp
	
	BegProp SelectedRow Type(*Integer4) Access(*Public)
		BegGet
			LeaveSR _SelectedRow
		EndGet
		BegSet
			_SelectedRow = *PropVal
		EndSet
	EndProp
	
	BegProp GridCleared Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _GridCleared
		EndGet
	EndProp
	/EndRegion

	/Region Methods
	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid2 Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
		
		DclFld BoldFont    Type(System.Drawing.Font) New(Grid2.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid2.Font, FontStyle.Regular)
		
		DclFld _UpLift Type(*Zoned) Len(3,2)
		DclFld _Smooth Type(*Zoned) Len(5,2)
		DclFld _CutOff Type(*Zoned) Len(5,2)
		DclFld _Alloc  Type(*Char)  Len(1)
	
		DclFld Uplift Like(_UpLift)
		DclFld CutOff Like(_CutOff)
		DclFld Alloc  Like(_Alloc)
	
		DclFld MarketIndex Like(NumberOfMarkets)
		DclFld Market Type(*Char) Len(2)
		DclFld Row    Type(*Integer4)
		DclFld RowCount Type(*Integer4)
		
		_UpLift = SRRuplift.GetDftUplift()
		_Smooth = SRRsmooth.GetDftSmooth()
		_CutOff = SRRcutoff.GetDftCutOff()
		_Alloc =  SRRalloc.GetDftAlloc()
		
		Grid2.Rows.Clear()
					
		Do FromVal(0) ToVal(NumberOfMarkets) Index(MarketIndex)
			Grid2.Rows.Add()
			RowCount = Grid2.Rows.Count
			Row = RowCount - 1
			
			Market = MarketArray(MarketIndex)
			Grid2.Rows[Row].Cells['G2Market'].Value = Market
			Grid2.Item['G2Market',Row].Style.BackColor + 
			            = Color.FromArgb(Convert.ToInt32(SRRkeyColor.MarketColor(Market)))
			
			
			// Uplift factor
			SRRuplift.GetUplift(Market)
			If SRRuplift.IsFound
				Uplift = SRRuplift.Value
				Grid2.Item['G2UpLift',Row].Style.Font = RegularFont
				
				If SRRuplift.IsChanged
					Grid2.Item['G2UpLift',Row].Style.ForeColor = Color.Red
				Else
					Grid2.Item['G2UpLift',Row].Style.ForeColor = Color.Black
				EndIf
			Else
				UpLift = _Uplift
				Grid2.Item['G2UpLift',Row].Style.ForeColor = Color.Blue
				Grid2.Item['G2UpLift',Row].Style.Font      = BoldFont
			EndIf
			If Uplift <> *Zero
				Grid2.Item['G2UpLift',Row].Value = Uplift
			EndIf
			If SRRuplift.ExceptionsBelow
				Grid2.Item['G2UpLift',Row].Style.BackColor = Color.Yellow
			EndIf
			
			
			// Smoothing factor
			SRRsmooth.GetSmooth(Market)
			If SRRsmooth.IsFound
				Grid2.Item['G2Smooth',Row].Value      = SRRsmooth.Value
				Grid2.Item['G2Smooth',Row].Style.Font = RegularFont
				
				If SRRsmooth.IsChanged
					Grid2.Item['G2Smooth',Row].Style.ForeColor = Color.Red
				Else
					Grid2.Item['G2Smooth',Row].Style.ForeColor = Color.Black
				EndIf
			Else
				Grid2.Item['G2Smooth',Row].Value           = _Smooth
				Grid2.Item['G2Smooth',Row].Style.ForeColor = Color.Blue
				Grid2.Item['G2Smooth',Row].Style.Font      = BoldFont
			EndIf
			If SRRsmooth.ExceptionsBelow
				Grid2.Item['G2Smooth',Row].Style.BackColor = Color.Yellow
			EndIf
			
			
			// Cover Cut-Off factor
			SRRcutoff.GetCutOff(Market)
			If SRRcutoff.IsFound
				CutOff = SRRcutoff.Value
				Grid2.Item['G2CutOff',Row].Style.Font = RegularFont
				
				If SRRcutoff.IsChanged
					Grid2.Item['G2CutOff',Row].Style.ForeColor = Color.Red
				Else
					Grid2.Item['G2CutOff',Row].Style.ForeColor = Color.Black
				EndIf
			Else
				CutOff = _CutOff
				Grid2.Item['G2CutOff',Row].Style.ForeColor = Color.Blue
				Grid2.Item['G2CutOff', Row].Style.Font     = BoldFont
			EndIf
			If CutOff <> *Zero
				Grid2.Rows[Row].Cells['G2CutOff'].Value = CutOff
			EndIf
			If SRRcutoff.ExceptionsBelow
				Grid2.Item['G2CutOff',Row].Style.BackColor = Color.Yellow
			EndIf
			
			
			// Allocation flag
			SRRalloc.GetAlloc(Market)
			If SRRalloc.IsFound
				Alloc = SRRalloc.Value
				Grid2.Item['G2Alloc',Row].Style.Font = RegularFont
				
				If SRRalloc.IsChanged
					Grid2.Item['G2Alloc',Row].Style.ForeColor = Color.Red
				Else
					Grid2.Item['G2Alloc',Row].Style.ForeColor = Color.Black
				EndIf
			Else
				Alloc = _Alloc
				Grid2.Item['G2Alloc',Row].Style.ForeColor = Color.Blue
				Grid2.Item['G2Alloc',Row].Style.Font     = BoldFont
			EndIf
			If Alloc <> *Blank
				Grid2.Item['G2Alloc',Row].Value = Alloc
			EndIf
			If SRRalloc.ExceptionsBelow
				Grid2.Item['G2Alloc',Row].Style.BackColor = Color.Yellow
			EndIf			
			
			
			// Stock requirement
			If SRRdetails <> *Nothing
				SRRdetails.GetStkReq(Market)
				If SRRdetails.StockReq <> *Zero
					Grid2.Item['G2StkReq',Row].Value = SRRdetails.StockReq
				EndIf
				
				If SRRdetails.IdealQty <> *Zero
					Grid2.Item['G2IdealQty',Row].Value = SRRdetails.IdealQty
				EndIf
				
				If SRRdetails.ProposedQty <> *Zero
					Grid2.Item['G2PropQty',Row].Value = SRRdetails.ProposedQty
				EndIf
			EndIf
		EndDo
		
		
		// After filling the grid, set the selected row field to -1 to indicated that no row is
		// currently selected, selection occurs in LeverForm2 in the the MouseUp method
		_SelectedRow = -1
		_GridCleared = *False
		
		DoEvents
	EndSR
	
	BegSR ClearGrid Access(*Public)
		DclSrParm Grid2  Type(System.Windows.Forms.DataGridView)
		
		Grid2.Rows.Clear()
		_GridCleared = *True
	EndSR
	
	BegSR CellValueChanged Access(*Public)
		DclSrParm sender Type(*Object)
		DclSrParm e      Type(System.Windows.Forms.DataGridViewCellEventArgs)
		DclSrParm Grid2  Type(System.Windows.Forms.DataGridView)
		DclSrParm Department Type(*Zoned) Len(3,0)
		
		DclFld BoldFont    Type(System.Drawing.Font) New(Grid2.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid2.Font, FontStyle.Regular)

		DclFld ColumnName Type( *String )
		DclFld CellValue  Type( *String )
		
		DclFld Column Type( *Integer4 )
		DclFld Row    Type( *Integer4 )
		
		DclFld Market Type( *Char )  Len(2)
		DclFld Uplift Type( *Zoned ) Len(5,2)
		DclFld Smooth Type( *Zoned ) Len(5,2)
		DclFld CutOff Type( *Zoned ) Len(5,2)
		DclFld Alloc  Type( *Char )  Len(1)

		Column = e.ColumnIndex
		Row    = e.RowIndex
		
		If Column >= *Zero and Row >= *Zero
			ColumnName = Grid2.Columns[Column].Name.ToUpper()
			Try
				CellValue = Grid2.Item[Column, Row].Value.ToString().Trim()
			Catch Err Exception
				CellValue = String.Empty
			EndTry
			
			// Get Market value from grid
			Market = Grid2.Item['G2Market', Row].Value.ToString().Trim()
		
			Select
			When ColumnName = 'G2UPLIFT'
				If Grid2.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid2.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					// Inherit from Department level
					Grid2.Item[Column, Row].Value           = SRRuplift.GetDftUpLift()
					Grid2.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid2.Item[Column, Row].Style.Font      = BoldFont

					// Flag record as deleted that was found at this level
					SRRuplift.DeleteUplift(Market)
				Else
					Try
						Uplift = Convert.ToDecimal( CellValue )
					Catch Err Exception
						Grid2.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Uplift < 0.01 Or Uplift > 9.99
						grid2.Item[Column,Row].ErrorText = 'Value must be between Zero and Ten'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid2.Item[Column,Row].Style.ForeColor = Color.Red
					Grid2.Item[Column,Row].Style.Font      = RegularFont
					
					SRRuplift.UpdateUplift(Market, Uplift)
					ExSr UpLift_Changed
				EndIf
				
			When ColumnName = 'G2SMOOTH'
				If Grid2.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
				EndIf
				Grid2.Item[Column,Row].ErrorText = String.Empty
				
				If CellValue = String.Empty
					Grid2.Item[Column, Row].Value           = SRRsmooth.GetDftSmooth()
					Grid2.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid2.Item[Column, Row].Style.Font      = BoldFont
					
					SRRsmooth.DeleteSmooth(Market)
				Else
					Try
						Smooth = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid2.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Smooth > 1 Or Smooth < *Zero
						Grid2.Item[Column,Row].ErrorText = 'Value must be between 0 and 1'
						ErrorCount += 1
						LeaveSR
					EndIf
				
					Grid2.Item[Column,Row].Style.ForeColor = Color.Red
					Grid2.Item[Column,Row].Style.Font      = RegularFont
				
					SRRsmooth.UpdateSmooth(Market, Smooth)
					ExSr Smooth_Changed
				EndIf
								
			When ColumnName = 'G2CUTOFF'
				If Grid2.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
				EndIf
				Grid2.Item[Column,Row].ErrorText = String.Empty
				
				If CellValue = String.Empty
					Grid2.Item[Column, Row].Value           = SRRcutoff.GetDftCutOff()
					Grid2.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid2.Item[Column, Row].Style.Font      = BoldFont
					
					SRRcutoff.DeleteCutOff(Market)
				Else
					Try
						CutOff = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid2.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If CutOff <= *Zero
						grid2.Item[Column,Row].ErrorText = 'Value must be greater than zero'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid2.Item[Column,Row].Style.ForeColor = Color.Red
					Grid2.Item[Column,Row].Style.Font      = RegularFont
					
					SRRcutoff.UpdateCutOff(Market, CutOff)
					ExSr CutOff_Changed
				EndIf
						
			When ColumnName = 'G2ALLOC'
				If Grid2.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
				EndIf
				Grid2.Item[Column,Row].ErrorText = String.Empty
				
				If CellValue = String.Empty
					Grid2.Item[Column, Row].Value           = SRRalloc.GetDftAlloc()
					Grid2.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid2.Item[Column, Row].Style.Font      = BoldFont
					
					SRRalloc.DeleteAlloc(Market)
				Else
					Alloc = CellValue.ToUpper().Trim()
					If Alloc = 'Y' Or Alloc = 'N'
						Grid2.Item[Column, Row].Value = Alloc
						Grid2.Item[Column,Row].Style.ForeColor = Color.Red
						Grid2.Item[Column,Row].Style.Font      = RegularFont
						
						SRRalloc.UpdateAlloc(Market, Alloc)
						ExSr UpLift_Changed
					Else
						grid2.Item[Column,Row].ErrorText = 'Invalid Flag (Must be Y or N)'
						ErrorCount += 1
						LeaveSR
					EndIf
				EndIf
			EndSL
		EndIf
	EndSR
	
	BegSr RmvExceptions Access(*Public)
		DclSrParm Grid2 Type(System.Windows.Forms.DataGridView)
	
		DclFld Market Type(*Char) Len(2)
		DclFld Row    Type(*Integer2)
		
		Do FromVal(0) ToVal(Grid2.Rows.Count-1) Index(Row)
			Market = Grid2.Item['G2Market', Row].Value.ToString().Trim()
			
			// Find Dept/Market level records and delete
			
			SRRuplift.DeleteUpLift(Market)
			SRRsmooth.DeleteSmooth(Market)
			SRRcutoff.DeleteCutOff(Market)
			SRRalloc.DeleteAlloc(Market)
			
			ErrorCount = *Zero
		EndDo
	EndSr
	
	// Load array of Markets
	BegSr LoadMarketArray
		If Not DSCNTAP.IsOpen
			Open DSCNTAP
		EndIf
		
		NumberOfMarkets = -1
		SetLL DSCNTAP Key(*Start)
		DoUntil DSCNTAP.IsEof
			Read DSCNTAP
			If Not DSCNTAP.IsEof
				If CSDGRP <> *Blank And CSBGRP <> *Blank And CSCODE <> 'CA'
					NumberOfMarkets += 1
					MarketArray(NumberOfMarkets) = CSCODE
				EndIf
			EndIf
		EndDo
		
		Close DSCNTAP
	EndSr
	/EndRegion
EndClass