Using System
Using System.Text
Using System.Drawing

Using Disney.SRR

DclNameSpace Disney.SRR

BegClass SRRgrid3 Access(*Public)
	
	/Region Declare DataBase
	DclDB Name(SRR) DBName("TDST")
			
	DclDiskFile Name(DSCNTAP3) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/DSCNTAP3') ImpOpen(*No)
	/EndRegion

	DclFld SRRkeyColor  Type(Disney.SRR.SRRkeyColor)
	DclFld SRRuplift    Type(Disney.SRR.SRRuplift)
	DclFld SRRsmooth    Type(Disney.SRR.SRRsmooth)
	DclFld SRRcutOff    Type(Disney.SRR.SRRcutOff)
	DclFld SRRalloc     Type(Disney.SRR.SRRalloc)
	DclFld SRRgradeList Type(Disney.SRR.SRRGradeList)
	
	DclFld ErrorCount   Type(*Integer2) Inz(*Zero)
		
	DclFld   _SelectedRow   Type(*Integer4)
	DclFld   Filtering      Type(*Boolean)
	DclFld   _GridCleared   Type(*Boolean)

	DclArray MarketArray Type(*Char)   Len(2)     Dim(9)
	DclFld   NoOfMarkets Type(*Integer4)

	DclEvent UpLift_Changed Access(*Public)
		DclSrParm GridName Type(*String)
		
	DclEvent Smooth_Changed Access(*Public)
		DclSrParm GridName Type(*String)
		
	DclEvent CutOff_Changed Access(*Public)
		DclSrParm GridName Type(*String)
		
	DclEvent Alloc_Changed  Access(*Public)
		DclSrParm GridName Type(*String)

	DclDS GradeList
		DclDsFld Buffer    Type(*Char)  Len(58)
		DclDsFld Market    Type(*Char)  Len(2)    Overlay(Buffer, 1)
		DclDsFld DeptGrade Type(*Char)  Len(3)    Overlay(Buffer, 3)
		DclDsFld Store     Type(*Zoned) Len(3,0)  Overlay(Buffer, 6)
		DclDsFld StoreNm   Type(*Char)  Len(25)   Overlay(Buffer, 9)
		DclDsFld GradeNm   Type(*Char)  Len(25)   Overlay(Buffer, 34)
		
	/Region Constructor & Destructor
	BegConstructor Access(*Public)
		DclSrParm SRR          Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm SRRkeyColor  Type(Disney.SRR.SRRkeyColor)
		DclSrParm SRRuplift    Type(Disney.SRR.SRRuplift)
		DclSrParm SRRsmooth    Type(Disney.SRR.SRRsmooth)
		DclSrParm SRRcutOff    Type(Disney.SRR.SRRcutOff)
		DclSrParm SRRalloc     Type(Disney.SRR.SRRalloc)
		DclSrParm SRRgradeList Type(Disney.SRR.SRRGradeList)

		*this.SRR          = SRR
		*this.SRRkeyColor  = SRRkeyColor
		*this.SRRuplift    = SRRuplift
		*this.SRRsmooth    = SRRsmooth
		*this.SRRcutOff    = SRRcutoff
		*this.SRRalloc     = SRRalloc
		*this.SRRgradeList = SRRgradeList
		
		LoadMarketArray()
	EndConstructor
	/EndRegion
	
	/Region Property definitions
	BegProp HasValidationErrors Type(*Boolean) Access(*Public)
		BegGet
			If ErrorCount > *Zero
				LeaveSR *True
			Else
				LeaveSR *False
			EndIf
		EndGet
	EndProp
	
	BegProp isFiltered Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR Filtering
		EndGet
	EndProp
	
	BegProp SelectedRow Type(*Integer4) Access(*Public)
		BegGet
			LeaveSR _SelectedRow
		EndGet
		BegSet
			_SelectedRow = *PropVal
		EndSet
	EndProp
	
	BegProp GridCleared Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _GridCleared
		EndGet
	EndProp

	/EndRegion

	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid3      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
		
		DclFld _Uplift   Type(*Zoned)  Len(3,2)
		DclFld _Smooth   Type(*Zoned)  Len(5,2)
		DclFld _CutOff   Type(*Zoned)  Len(5,2)
		DclFld _Alloc    Type(*Char)   Len(1)
		
		DclFld StkReq      Type(*Packed)   Len(9,0)
		DclFld Ideal       Type(*Packed)   Len(9,0)
		DclFld Proposed    Type(*Packed)   Len(9,0)
		
		DclFld Row         Type(*Integer4)
		DclFld RowCount    Type(*Integer4)
		DclFld MarketIndex Type(*Integer4)

		DclFld ColorChar   Type(*String)
		
		DclFld CurrentGrade   Type(*Char)  Len(3)
		DclFld CurrentGradeNm Type(*Char)  Len(25)
		
		Grid3.Rows.Clear()
		
		Do FromVal(0) ToVal(NoOfMarkets) Index(MarketIndex)
			Market = MarketArray(MarketIndex)
			
			// Set First Key values
			If Not SRRgradeList.SetMarket(Market)
				Iterate
			EndIf
			
			GradeList      = SRRgradeList.GetDetails(Market)
			CurrentGrade   = GradeList.DeptGrade
			CurrentGradeNm = GradeList.GradeNm

			// Accumulate first Store's Stock Requirement
			If SRRdetails <> *Nothing
				SRRdetails.GetStkReq(GradeList.Store)
				StkReq   = SRRdetails.StockReq
				Ideal    = SRRdetails.IdealQty
				Proposed = SRRdetails.ProposedQty
			EndIf
		
			DoUntil SRRgradeList.IsEoMkt
				GradeList = SRRgradeList.GetDetails(Market)
				If Not SRRgradeList.IsEoMkt
				
					// If we have the same key as previous record then just accumulate the Stock requirement
					If GradeList.DeptGrade = CurrentGrade
						If SRRdetails <> *Nothing
							SRRdetails.GetStkReq(GradeList.Store)
							StkReq   += SRRdetails.StockReq
							Ideal    += SRRdetails.IdealQty
							Proposed += SRRdetails.ProposedQty
						EndIf
					Else
						Grid3.Rows.Add()
						RowCount = Grid3.Rows.Count
						Row = RowCount - 1
						
						// Find Market default
						_UpLift = SRRuplift.GetDftUplift(Market)
						_Smooth = SRRsmooth.GetDftSmooth(Market)
						_CutOff = SRRcutoff.GetDftCutOff(Market)
						_Alloc  = SRRalloc.GetDftAlloc(Market)

						ColorChar = SRRkeyColor.MarketColor(Market)
						
						Grid3.Rows[Row].Cells['G3Market'].Value    = Market
						Grid3.Item['G3Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
						Grid3.Rows[Row].Cells['G3DeptGrad'].Value    = CurrentGrade
						Grid3.Item['G3DeptGrad',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
						Grid3.Rows[Row].Cells['G3GradeNm'].Value    = CurrentGradeNm
						Grid3.Item['G3GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
						Grid3 = Populate_Row(Grid3, Row, Market, CurrentGrade, +
								_UpLift, _Smooth, _CutOff, _Alloc)
						
						// Stock requirement
						If SRRdetails <> *Nothing
							If StkReq <> *Zero
								Grid3.Item['G3StkReq',Row].Value = StkReq
							EndIf
			
							If Ideal <> *Zero
								Grid3.Item['G3IdealQty',Row].Value = Ideal
							EndIf
								
							If Proposed <> *Zero
								Grid3.Item['G3PropQty',Row].Value = Proposed
							EndIf
						EndIf
					
						//_____________________________________________
						// Reset to new Grade values
						CurrentGrade   = GradeList.DeptGrade
						CurrentGradeNm = GradeList.GradeNm
						
						// Accumulate Stock Requirements for New Store
						If SRRdetails <> *Nothing
							SRRdetails.GetStkReq(GradeList.Store)
							StkReq   = SRRdetails.StockReq
							Ideal    = SRRdetails.IdealQty
							Proposed = SRRdetails.ProposedQty
						EndIf
					EndIf
				EndIf
			EndDo
			
			// Write the last record
			Grid3.Rows.Add()
			RowCount = Grid3.Rows.Count
			Row = RowCount - 1
						
			Grid3.Rows[Row].Cells['G3Market'].Value    = Market
			ColorChar = SRRkeyColor.MarketColor(Market)
			
			Grid3.Item['G3Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
			
			Grid3.Rows[Row].Cells['G3DeptGrad'].Value    = CurrentGrade
			Grid3.Item['G3DeptGrad',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
			
			Grid3.Rows[Row].Cells['G3GradeNm'].Value    = CurrentGradeNm
			Grid3.Item['G3GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

			// Find Market default
			_UpLift = SRRuplift.GetDftUplift(Market)
			_Smooth = SRRsmooth.GetDftSmooth(Market)
			_CutOff = SRRcutoff.GetDftCutOff(Market)
			_Alloc  = SRRalloc.GetDftAlloc(Market)

			Grid3 = Populate_Row(Grid3, Row, Market, CurrentGrade, +
					_UpLift, _Smooth, _CutOff, _Alloc)

			// Stock requirement
			If SRRdetails <> *Nothing
				If StkReq <> *Zero
					Grid3.Item['G3StkReq',Row].Value = StkReq
				EndIf

				If Ideal <> *Zero
					Grid3.Item['G3IdealQty',Row].Value = Ideal
				EndIf
					
				If Proposed <> *Zero
					Grid3.Item['G3PropQty',Row].Value = Proposed
				EndIf
			EndIf
		EndDo
		
		Filtering    = *False
		_SelectedRow = -1
		_GridCleared = *False
	EndSR
	
	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid3      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
		DclSrParm Market     Type(*Char) Len(2)
		
		DclFld _Uplift Type(*Zoned) Len(3,2)
		DclFld _Smooth Type(*Zoned) Len(5,2)
		DclFld _CutOff Type(*Zoned) Len(5,2)
		DclFld _Alloc  Type(*Char)  Len(1)
		
		DclFld ColorChar    Type(*String)
		
		DclFld CurrentGrade   Type(*Char)  Len(3)
		DclFld CurrentGradeNm Type(*Char)  Len(25)

		DclFld StkReq     Type(*Packed)   Len(9,0)
		DclFld Ideal      Type(*Packed)   Len(9,0)
		DclFld Proposed   Type(*Packed)   Len(9,0)
		
		DclFld Row        Type(*Integer4)
		DclFld RowCount   Type(*Integer4)

		If Not SRRgradeList.SetMarket(Market)
			LeaveSR
		EndIf
		
		// Set First Key values
		GradeList = SRRgradeList.GetDetails(Market)
		CurrentGrade   = GradeList.DeptGrade
		CurrentGradeNm = GradeList.GradeNm
		
		// Accumulate first Store's Stock Requirement
		If SRRdetails <> *Nothing
			SRRdetails.GetStkReq(GradeList.Store)
			StkReq   = SRRdetails.StockReq
			Ideal    = SRRdetails.IdealQty
			Proposed = SRRdetails.ProposedQty
		EndIf
		
		// Find Market default
		_UpLift = SRRuplift.GetDftUplift(Market)
		_Smooth = SRRsmooth.GetDftSmooth(Market)
		_CutOff = SRRcutoff.GetDftCutOff(Market)
		_Alloc  = SRRalloc.GetDftAlloc(Market)
		
		ColorChar = SRRkeyColor.MarketColor(Market)
		Grid3.Rows.Clear()
		
		DoUntil SRRgradeList.IsEoMkt
			GradeList = SRRgradeList.GetDetails(Market)
			If Not SRRgradeList.IsEoMkt
			
				// If we have the same key as previous record then just accumulate the Stock requirement
				If GradeList.DeptGrade = CurrentGrade
					If SRRdetails <> *Nothing
						SRRdetails.GetStkReq(GradeList.Store)
						StkReq   += SRRdetails.StockReq
						Ideal    += SRRdetails.IdealQty
						Proposed += SRRdetails.ProposedQty
					EndIf
				Else
					Grid3.Rows.Add()
					RowCount = Grid3.Rows.Count
					Row = RowCount - 1
					
					Grid3.Rows[Row].Cells['G3Market'].Value    = Market
					Grid3.Item['G3Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
					Grid3.Rows[Row].Cells['G3DeptGrad'].Value    = CurrentGrade
					Grid3.Item['G3DeptGrad',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

					Grid3.Rows[Row].Cells['G3GradeNm'].Value    = CurrentGradeNm
					Grid3.Item['G3GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

					Grid3 = Populate_Row(Grid3, Row, Market, CurrentGrade, +
						_UpLift, _Smooth, _CutOff, _Alloc)
						
					// Stock requirement
					If SRRdetails <> *Nothing
						If StkReq <> *Zero
							Grid3.Item['G3StkReq',Row].Value = StkReq
						EndIf
		
						If Ideal <> *Zero
							Grid3.Item['G3IdealQty',Row].Value = Ideal
						EndIf
							
						If Proposed <> *Zero
							Grid3.Item['G3PropQty',Row].Value = Proposed
						EndIf
					EndIf
					
					//_____________________________________________________
					// Reset to new Grade values
					CurrentGrade   = GradeList.DeptGrade
					CurrentGradeNm = GradeList.GradeNm
					
					// Accumulate Stock Requirements for New Store 
					If SRRdetails <> *Nothing
						SRRdetails.GetStkReq(GradeList.Store)
						StkReq   = SRRdetails.StockReq
						Ideal    = SRRdetails.IdealQty
						Proposed = SRRdetails.ProposedQty
					EndIf
				EndIf
			EndIf
		EndDo
		
		
		Grid3.Rows.Add()
		RowCount = Grid3.Rows.Count
		Row = RowCount - 1
					
		Grid3.Rows[Row].Cells['G3Market'].Value    = Market
		ColorChar = SRRkeyColor.MarketColor(Market)

		Grid3.Item['G3Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
			
		Grid3.Rows[Row].Cells['G3DeptGrad'].Value    = CurrentGrade
		Grid3.Item['G3DeptGrad',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

		Grid3.Rows[Row].Cells['G3GradeNm'].Value    = CurrentGradeNm
		Grid3.Item['G3GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

		Grid3 = Populate_Row(Grid3, Row, Market, CurrentGrade, +
			_UpLift, _Smooth, _CutOff, _Alloc)
						
		// Stock requirement
		If SRRdetails <> *Nothing
			If StkReq <> *Zero
				Grid3.Item['G3StkReq',Row].Value = StkReq
			EndIf

			If Ideal <> *Zero
				Grid3.Item['G3IdealQty',Row].Value = Ideal
			EndIf
				
			If Proposed <> *Zero
				Grid3.Item['G3PropQty',Row].Value = Proposed
			EndIf
		EndIf
		
		// Filtering by Market
		Filtering    = *True
		_SelectedRow = -1
		_GridCleared = *False

	EndSr
	
	BegSR ClearGrid Access(*Public)
		DclSrParm Grid3  Type(System.Windows.Forms.DataGridView)
		
		Grid3.Rows.Clear()
		_GridCleared = *True
	EndSR
	
	BegFunc Populate_Row Type(system.Windows.Forms.DataGridView)
		DclSrParm Grid3   Type(system.Windows.Forms.DataGridView)
		DclSrParm Row     Type(*Integer4)
		DclSrParm Market  Type(*Char)  Len(2)
		DclSrParm Grade   Type(*Char)  Len(3)
		DclSrParm _UpLift Type(*Zoned) Len(3,2)
		DclSrParm _Smooth Type(*Zoned) Len(5,2)
		DclSrParm _CutOff Type(*Zoned) Len(5,2)
		DclSrParm _Alloc  Type(*Char)  Len(1)
		
		DclFld BoldFont    Type(System.Drawing.Font) New(Grid3.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid3.Font, FontStyle.Regular)
		
		DclFld Uplift Type(*Zoned)  Len(3,2)
		DclFld CutOff Type(*Zoned)  Len(5,2)
		DclFld Alloc  Type(*Char)   Len(1)
		
		
		// Uplift factor
		SRRuplift.GetUpLift(Market, Grade)
		If SRRuplift.IsFound
			UpLift = SRRuplift.Value
			Grid3.Item['G3UpLift',Row].Style.Font = RegularFont
			
			If SRRuplift.IsChanged
				Grid3.Item['G3UpLift',Row].Style.ForeColor = Color.Red
			Else
				Grid3.Item['G3UpLift',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			UpLift = _Uplift
			Grid3.Item['G3UpLift',Row].Style.ForeColor = Color.Blue
			Grid3.Item['G3UpLift',Row].Style.Font      = BoldFont
		EndIf
		If Uplift <> *Zero
			Grid3.Item['G3UpLift',Row].Value = Uplift
		EndIf
		If SRRuplift.ExceptionsBelow
			Grid3.Item['G3UpLift',Row].Style.BackColor = Color.Yellow
		EndIf


		// Smoothing factor
		SRRsmooth.GetSmooth(Market, Grade)
		If SRRsmooth.IsFound
			Grid3.Item['G3Smooth',Row].Value      = SRRsmooth.Value
			Grid3.Item['G3Smooth',Row].Style.Font = RegularFont
						
			If SRRsmooth.IsChanged
				Grid3.Item['G3Smooth',Row].Style.ForeColor = Color.Red
			Else
				Grid3.Item['G3Smooth',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			Grid3.Item['G3Smooth',Row].Value           = _Smooth
			Grid3.Item['G3Smooth',Row].Style.ForeColor = Color.Blue
			Grid3.Item['G3Smooth',Row].Style.Font      = BoldFont
		EndIf
		If SRRsmooth.ExceptionsBelow
			Grid3.Item['G3Smooth', Row].Style.BackColor = Color.Yellow
		EndIf
						
						
		// Cover Cut-Off factor
		SRRcutoff.GetCutOff(Market, Grade)
		If SRRcutoff.IsFound
			CutOff = SRRcutoff.Value
			Grid3.Item['G3CutOff', Row].Style.Font = RegularFont
			
			If SRRcutoff.IsChanged
				Grid3.Item['G3CutOff',Row].Style.ForeColor = Color.Red
			Else
				Grid3.Item['G3CutOff',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			CutOff = _CutOff
			Grid3.Item['G3CutOff', Row].Style.ForeColor = Color.Blue
			Grid3.Item['G3CutOff', Row].Style.Font      = BoldFont
		EndIf
		If CutOff <> *Zero
			Grid3.Rows[Row].Cells['G3CutOff'].Value = CutOff
		EndIf
		If SRRcutoff.ExceptionsBelow
			Grid3.Item['G3CutOff', Row].Style.BackColor = Color.Yellow
		EndIf
					
					
		// Allocation flag
		SRRalloc.GetAlloc(Market, Grade)
		If SRRalloc.IsFound
			Alloc = SRRalloc.Value
			Grid3.Item['G3Alloc',Row].Style.Font = RegularFont
			
			If SRRalloc.IsChanged
				Grid3.Item['G3Alloc',Row].Style.ForeColor = Color.Red
			Else
				Grid3.Item['G3Alloc',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			Alloc = _Alloc
			Grid3.Item['G3Alloc',Row].Style.ForeColor = Color.Blue
			Grid3.Item['G3Alloc',Row].Style.Font      = BoldFont
		EndIf
		If Alloc <> *Blank
			Grid3.Item['G3Alloc',Row].Value = Alloc
		EndIf
		If SRRalloc.ExceptionsBelow
			Grid3.Item['G3Alloc', Row].Style.BackColor = Color.Yellow
		EndIf	
		
		LeaveSR Grid3
	EndFunc
	
	BegSR CellValueChanged Access(*Public)
		DclSrParm sender Type(*Object)
		DclSrParm e      Type(System.Windows.Forms.DataGridViewCellEventArgs)
		DclSrParm Grid3  Type(System.Windows.Forms.DataGridView)
		
		DclFld BoldFont    Type(System.Drawing.Font) New(Grid3.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid3.Font, FontStyle.Regular)
		
		DclFld ColumnName Type( *String )
		DclFld CellValue  Type( *String )
		
		DclFld Column Type(*Integer4)
		DclFld Row    Type(*Integer4)
		
		DclFld Market    Type(*Char) Len(2)
		DclFld DeptGrade Type(*Char) Len(3)
		
		DclFld Uplift Type(*Zoned) Len(5,2)
		DclFld Smooth Type(*Zoned) Len(5,2)
		DclFld CutOff Type(*Zoned) Len(5,2)
		DclFld Alloc  Type(*Char)  Len(1)

		Column = e.ColumnIndex
		Row    = e.RowIndex
		
		If Column >= *Zero and Row >= *Zero
			ColumnName = Grid3.Columns[Column].Name.ToUpper()
			Try
				CellValue = Grid3.Item[Column, Row].Value.ToString().Trim()
			Catch Err Exception
				CellValue = String.Empty
			EndTry
			
			// Get Market value from grid
			Market    = Grid3.Item['G3Market', Row].Value.ToString().Trim()
			DeptGrade = Grid3.Item['G3DeptGrad', Row].Value.ToString().Trim()

			Select
			When ColumnName = 'G3UPLIFT'
				If Grid3.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid3.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid3.Item[Column, Row].Value           = SRRuplift.GetDftUplift(Market)
					Grid3.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid3.Item[Column, Row].Style.Font      = BoldFont
					
					SRRuplift.DeleteUplift(Market, DeptGrade)
				Else
					Try
						Uplift = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid3.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Uplift < 0.01 Or Uplift > 9.99
						grid3.Item[Column,Row].ErrorText = 'Value must be between Zero and Ten'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid3.Item[Column,Row].Style.ForeColor = Color.Red
					Grid3.Item[Column,Row].Style.Font      = RegularFont
					
					SRRuplift.UpdateUplift(Market, DeptGrade, UpLift)
					UpLift_Changed('Grid3')
				EndIf
									
			When ColumnName = 'G3SMOOTH'
				If Grid3.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid3.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid3.Item[Column, Row].Value           = SRRsmooth.GetDftSmooth(Market)
					Grid3.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid3.Item[Column, Row].Style.Font      = BoldFont
					
					SRRsmooth.DeleteSmooth(Market, DeptGrade)		
				Else
					Try
						Smooth = Convert.ToDecimal( CellValue )
					Catch Err Exception
						Grid3.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Smooth > 1 Or Smooth < *Zero
						Grid3.Item[Column,Row].ErrorText = 'Value must be between 0 and 1'
						ErrorCount += 1
						LeaveSR
					EndIf
				
					Grid3.Item[Column, Row].Style.ForeColor = Color.Red
					Grid3.Item[Column, Row].Style.Font      = RegularFont
				
					SRRsmooth.UpdateSmooth(Market, DeptGrade, Smooth)
					Smooth_Changed('Grid3')
				EndIf
				
				
			When ColumnName = 'G3CUTOFF'
				If Grid3.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid3.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid3.Item[Column, Row].Value           = SRRcutoff.GetDftCutOff(Market)
					Grid3.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid3.Item[Column, Row].Style.Font      = BoldFont
					
					SRRcutoff.DeleteCutOff(Market, DeptGrade)
				Else
					Try
						CutOff = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid3.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If CutOff <= *Zero
						grid3.Item[Column,Row].ErrorText = 'Value must be greater than zero'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid3.Item[Column,Row].Style.ForeColor = Color.Red
					Grid3.Item[Column,Row].Style.Font      = RegularFont
					
					SRRcutoff.UpdateCutOff(Market, DeptGrade, CutOff)
					CutOff_Changed('Grid3')
				EndIf
				
				
			When ColumnName = 'G3ALLOC'
				If Grid3.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid3.Item[Column,Row].ErrorText = String.Empty
				EndIf

				If CellValue = String.Empty
					Grid3.Item[Column, Row].Value           = SRRalloc.GetDftAlloc(Market)
					Grid3.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid3.Item[Column, Row].Style.Font      = BoldFont
					
					SRRalloc.DeleteAlloc(Market, DeptGrade)
				Else
					Alloc = CellValue.ToUpper().Trim()
					If Alloc = 'Y' Or Alloc = 'N'
						Grid3.Item[Column, Row].Value = Alloc
						Grid3.Item[Column,Row].Style.ForeColor = Color.Red
						Grid3.Item[Column,Row].Style.Font      = RegularFont
				
						SRRalloc.UpdateAlloc(Market, DeptGrade, Alloc)
						Alloc_Changed('Grid3')
					Else
						grid3.Item[Column,Row].ErrorText = 'Invalid Flag (Must be Y or N)'
						ErrorCount += 1
						LeaveSR
					EndIf
				EndIf
			EndSL
		EndIf
	EndSR
		
	BegSR RmvExceptions Access(*Public)
		DclSrParm Grid3 Type(System.Windows.Forms.DataGridView)
	
		DclFld Market    Type(*Char) Len(2)
		DclFld DeptGrade Type(*Char) Len(3)
		DclFld Row       Type(*Integer2)
		
		Do FromVal(0) ToVal(Grid3.Rows.Count-1) Index(Row)
			Market = Grid3.Item['G3Market', Row].Value.ToString().Trim()
			DeptGrade = Grid3.Item['G3DeptGrad', Row].Value.ToString().Trim()
			
			// Find Dept/Market/DeptGrade level records and delete
			SRRuplift.DeleteUpLift(Market, DeptGrade)
			SRRsmooth.DeleteSmooth(Market, DeptGrade)
			SRRcutoff.DeleteCutOff(Market, DeptGrade)
			SRRalloc.DeleteAlloc(Market, DeptGrade)
			
			ErrorCount = *Zero
		EndDo
	EndSr
	
	// Load array of Markets
	BegSr LoadMarketArray
			
		If Not DSCNTAP3.IsOpen
			Open DSCNTAP3
		EndIf
		
		NoOfMarkets = -1
		SetLL DSCNTAP3 Key(*Start)
		DoUntil DSCNTAP3.IsEof
			Read DSCNTAP3
			If Not DSCNTAP3.IsEof
				If CSDGRP <> *Blank And CSBGRP <> *Blank
					NoOfMarkets += 1
					MarketArray(NoOfMarkets) = CSCODE
				EndIf
			EndIf
		EndDo
		
		Close DSCNTAP3
	EndSr
EndClass
