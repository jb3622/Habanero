Using System
Using System.Text
Using System.Drawing

Using Disney.SRR

DclNameSpace Disney.SRR

BegClass SRRgrid8 Access(*Public)

	/Region Declare DataBase
	DclDB Name(SRR) DBName("TDST")
			
	DclDiskFile Name(DSCNTAP) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/DSCNTAP3') ImpOpen(*No)
	
	DclDiskFile Name(IPCLASSB) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/IPCLASSB') ImpOpen(*No)
		
	DclDiskFile Name(DSCLASS) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/DSCLASS') ImpOpen(*No)
	/EndRegion
	
	DclFld  SRRkeyColor  Type(Disney.SRR.SRRkeyColor)
	DclFld  SRRuplift    Type(Disney.SRR.SRRuplift)
	DclFld  SRRsmooth    Type(Disney.SRR.SRRsmooth)
	DclFld  SRRcutOff    Type(Disney.SRR.SRRcutOff)
	DclFld  SRRalloc     Type(Disney.SRR.SRRalloc)
	DclFld  SRRgradeList Type(Disney.SRR.SRRGradeList)
	
	DclArray ClassArray  Type(*Zoned)  Len(4,0)   Dim(50)
	DclFld   NoOfClasses Type(*Integer4)
	DclArray MarketArray Type(*Char)   Len(2)     Dim(9)
	DclFld   NoOfMarkets Type(*Integer4)  
	DclFld   Department  Type(*Zoned)  Len(3,0)
	DclFld   ErrorCount  Type(*Integer2)
	
	DclFld   _SelectedRow Type(*Integer4)
	DclFld   Filtering    Type(*Boolean)
	DclFld   _GridCleared Type(*Boolean)
	
	DclEvent UpLift_Changed Access(*Public)
		DclSrParm GridName Type(*String)
	
	DclEvent Smooth_Changed Access(*Public)
		DclSrParm GridName Type(*String)
	
	DclEvent CutOff_Changed Access(*Public)
		DclSrParm GridName Type(*String)
	
	DclEvent Alloc_Changed  Access(*Public)
		DclSrParm GridName Type(*String)

	DclDS GradeList
		DclDsFld Market    Type(*Char)  Len(2)
		DclDsFld DeptGrade Type(*Char)  Len(3)
		DclDsFld Store     Type(*Zoned) Len(3,0)
		DclDsFld StrName   Type(*Char)  Len(25)
		DclDsFld GradeNm   Type(*Char)  Len(25)

	/Region Constructor & Destructor
	BegConstructor Access(*Public)
		DclSrParm SRR         Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm Department  Type(*Zoned) Len(3,0)
		DclSrParm SRRkeyColor Type(Disney.SRR.SRRkeyColor)
		DclSrParm SRRuplift   Type(Disney.SRR.SRRuplift)
		DclSrParm SRRsmooth   Type(Disney.SRR.SRRsmooth)
		DclSrParm SRRcutOff   Type(Disney.SRR.SRRcutOff)
		DclSrParm SRRalloc    Type(Disney.SRR.SRRalloc)
		DclSrParm SRRgradeList Type(Disney.SRR.SRRGradeList)

		*this.SRR = SRR
		*this.Department  = Department
		*this.SRRkeyColor = SRRkeyColor
		*this.SRRuplift   = SRRuplift
		*this.SRRsmooth   = SRRsmooth
		*this.SRRcutOff   = SRRcutoff
		*this.SRRalloc    = SRRalloc
		*this.SRRgradeList = SRRgradeList
		
		LoadClassArray()
		LoadMarketArray()
	EndConstructor
	/EndRegion
	
	/Region Property definitions
	BegProp HasValidationErrors Type(*Boolean) Access(*Public)
		BegGet
			If ErrorCount > *Zero
				LeaveSR *True
			Else
				LeaveSR *False
			EndIf
		EndGet
	EndProp
	
	BegProp isFiltered Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR Filtering
		EndGet
	EndProp
	
	BegProp SelectedRow Type(*Integer4) Access(*Public)
		BegGet
			LeaveSR _SelectedRow
		EndGet
		BegSet
			_SelectedRow = *PropVal
		EndSet
	EndProp
	
	BegProp GridCleared Type(*Boolean) Access(*Public)
		BegGet
			LeaveSR _GridCleared
		EndGet
	EndProp
	/EndRegion

	// Select all Stores
	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid8      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)

		DclFld _Uplift Type(*Zoned) Len(3,2)
		DclFld _Smooth Type(*Zoned) Len(5,2)
		DclFld _CutOff Type(*Zoned) Len(5,2)
		DclFld _Alloc  Type(*Char)  Len(1)
	
		DclFld Row       Type(*Integer4)
		DclFld RowCount  Type(*Integer4)
		DclFld ColorChar Type(*String)
		
		DclFld Class      Type(*Zoned) Len(4,0)
		DclFld ClassIndex Type(*Integer4)
		DclFld Market     Type(*Char)  Len(2)
		DclFld MarketIndex Type(*Integer4)
		DclFld Grade      Type(*Char)  Len(3)
		DclFld Store      Type(*Zoned) Len(3,0)
				
		Grid8.Rows.Clear()
		
		// Enumerate Classes
		Do FromVal(0) ToVal(NoOfClasses) Index(ClassIndex)
			Class = ClassArray(ClassIndex)
			
			// Enumerate Markets
			Do FromVal(0) ToVal(NoOfMarkets) Index(MarketIndex)
				Market = MarketArray(MarketIndex)
				
				SRRgradeList.SetMarket(Market)
				
				DoUntil SRRgradeList.IsEoMkt
					GradeList = SRRgradeList.GetDetails(Market)
					If Not SRRgradeList.IsEoMkt
					
						Grade = GradeList.DeptGrade
						Store = GradeList.Store
						
						// Find Grade defaults
						_UpLift = SRRuplift.GetDftUplift(Class, Market, Grade, Store)
						_Smooth = SRRsmooth.GetDftSmooth(Class, Market, Grade, Store)
						_CutOff = SRRcutoff.GetDftCutOff(Class, Market, Grade, Store)
						_Alloc  = SRRalloc.GetDftAlloc(Class, Market, Grade, Store)
						
						Grid8.Rows.Add()
						RowCount = Grid8.Rows.Count
						Row = RowCount - 1
						
						ColorChar = SRRkeyColor.MarketColor(Market)

						Grid8.Rows[Row].Cells['G8Class'].Value = Class
						Grid8.Item['G8Class',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
						Grid8.Rows[Row].Cells['G8Market'].Value = Market
						Grid8.Item['G8Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
						Grid8.Rows[Row].Cells['G8Grade'].Value = Grade
						Grid8.Item['G8Grade',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
						Grid8.Rows[Row].Cells['G8GradeNm'].Value = GradeNm
						Grid8.Item['G8GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
						
						Grid8.Rows[Row].Cells['G8Store'].Value = Store
						Grid8.Item['G8Store',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
	
						Grid8.Rows[Row].Cells['G8StoreNm'].Value = StrName
						Grid8.Item['G8StoreNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

						Grid8 = Populate_Row(Grid8, Row, Class, Market, Grade, Store, +
							_UpLift, _Smooth, _CutOff, _Alloc)

						// Stock requirement - by Store
						If SRRdetails <> *Nothing
							SRRdetails.GetClsReq(Class, Store)
							If SRRdetails.StockReq <> *Zero
								Grid8.Item['G8StkReq',Row].Value = SRRdetails.StockReq
							EndIf
			
							If SRRdetails.IdealQty <> *Zero
								Grid8.Item['G8IdealQty',Row].Value = SRRdetails.IdealQty
							EndIf
								
							If SRRdetails.ProposedQty <> *Zero
								Grid8.Item['G8PropQty',Row].Value = SRRdetails.ProposedQty
							EndIf
						EndIf
					EndIf
				EndDo
			EndDo
		EndDo
		
		DoEvents
		
		Filtering     = *False
		_SelectedRow  = -1
		_GridCleared  = *False
	EndSR
	
	// Class Market
	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid8      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
		DclSrParm Class      Type(*Zoned) Len(4,0)
		DclSrParm Market     Type(*Char)  Len(2)
	
		DclFld _Uplift Type(*Zoned) Len(3,2)
		DclFld _Smooth Type(*Zoned) Len(5,2)
		DclFld _CutOff Type(*Zoned) Len(5,2)
		DclFld _Alloc  Type(*Char)  Len(1)
	
		DclFld Row       Type(*Integer4)
		DclFld RowCount  Type(*Integer4)
		DclFld ColorChar Type(*String)
		
		DclFld Grade   Type(*Char)  Len(3)
		DclFld Store   Type(*Zoned) Len(3,0)
				
		Grid8.Rows.Clear()
		
		SRRgradeList.SetMarket(Market)
				
		DoUntil SRRgradeList.IsEoMkt
			GradeList = SRRgradeList.GetDetails(Market)
			If Not SRRgradeList.IsEoMkt
			
				Grade = GradeList.DeptGrade
				Store = GradeList.Store
				
				// Find Grade defaults
				_UpLift = SRRuplift.GetDftUplift(Class, Market, Grade, Store)
				_Smooth = SRRsmooth.GetDftSmooth(Class, Market, Grade, Store)
				_CutOff = SRRcutoff.GetDftCutOff(Class, Market, Grade, Store)
				_Alloc  = SRRalloc.GetDftAlloc(Class, Market, Grade, Store)
						
				Grid8.Rows.Add()
				RowCount = Grid8.Rows.Count
				Row = RowCount - 1
				
				ColorChar = SRRkeyColor.MarketColor(Market)

				Grid8.Rows[Row].Cells['G8Class'].Value = Class
				Grid8.Item['G8Class',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8Market'].Value = Market
				Grid8.Item['G8Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8Grade'].Value = Grade
				Grid8.Item['G8Grade',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8GradeNm'].Value = GradeNm
				Grid8.Item['G8GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8Store'].Value = Store
				Grid8.Item['G8Store',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

				Grid8.Rows[Row].Cells['G8StoreNm'].Value = StrName
				Grid8.Item['G8StoreNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

				Grid8 = Populate_Row(Grid8, Row, Class, Market, Grade, Store, +
					_UpLift, _Smooth, _CutOff, _Alloc)

				// Stock requirement - by Store
				If SRRdetails <> *Nothing
					SRRdetails.GetClsReq(Class, Store)
					If SRRdetails.StockReq <> *Zero
						Grid8.Item['G8StkReq',Row].Value = SRRdetails.StockReq
					EndIf
	
					If SRRdetails.IdealQty <> *Zero
						Grid8.Item['G8IdealQty',Row].Value = SRRdetails.IdealQty
					EndIf
						
					If SRRdetails.ProposedQty <> *Zero
						Grid8.Item['G8PropQty',Row].Value = SRRdetails.ProposedQty
					EndIf
				EndIf
			EndIf
		EndDo
		
		DoEvents
		
		Filtering     = *True
		_SelectedRow  = -1
		_GridCleared  = *False
	EndSR
	
	// Class Market Grade
	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid8      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
		DclSrParm Class      Type(*Zoned) Len(4,0)
		DclSrParm Market     Type(*Char)  Len(2)
		DclSrParm Grade      Type(*Char)  Len(3)
		
		DclFld _Uplift Type(*Zoned) Len(3,2)
		DclFld _Smooth Type(*Zoned) Len(5,2)
		DclFld _CutOff Type(*Zoned) Len(5,2)
		DclFld _Alloc  Type(*Char)  Len(1)
	
		DclFld Row       Type(*Integer4)
		DclFld RowCount  Type(*Integer4)
		DclFld ColorChar Type(*String)
		
		DclFld Store      Type(*Zoned) Len(3,0)
				
		Grid8.Rows.Clear()
		
		SRRgradeList.SetMarket(Market)
				
		DoUntil SRRgradeList.IsEoMkt
			GradeList = SRRgradeList.GetDetails(Market)
			If Not SRRgradeList.IsEoMkt
			
				If Grade <> GradeList.DeptGrade		// Select required grade
					Iterate
				EndIf
				
				Store = GradeList.Store
				
				// Find Grade defaults
				_UpLift = SRRuplift.GetDftUplift(Class, Market, Grade, Store)
				_Smooth = SRRsmooth.GetDftSmooth(Class, Market, Grade, Store)
				_CutOff = SRRcutoff.GetDftCutOff(Class, Market, Grade, Store)
				_Alloc  = SRRalloc.GetDftAlloc(Class, Market, Grade, Store)
						
				Grid8.Rows.Add()
				RowCount = Grid8.Rows.Count
				Row = RowCount - 1
				
				ColorChar = SRRkeyColor.MarketColor(Market)

				Grid8.Rows[Row].Cells['G8Class'].Value = Class
				Grid8.Item['G8Class',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8Market'].Value = Market
				Grid8.Item['G8Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8Grade'].Value = Grade
				Grid8.Item['G8Grade',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8GradeNm'].Value = GradeNm
				Grid8.Item['G8GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
				Grid8.Rows[Row].Cells['G8Store'].Value = Store
				Grid8.Item['G8Store',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

				Grid8.Rows[Row].Cells['G8StoreNm'].Value = StrName
				Grid8.Item['G8StoreNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

				Grid8 = Populate_Row(Grid8, Row, Class, Market, Grade, Store, +
					_UpLift, _Smooth, _CutOff, _Alloc)

				// Stock requirement - by Store
				If SRRdetails <> *Nothing
					SRRdetails.GetClsReq(Class, Store)
					If SRRdetails.StockReq <> *Zero
						Grid8.Item['G8StkReq',Row].Value = SRRdetails.StockReq
					EndIf
	
					If SRRdetails.IdealQty <> *Zero
						Grid8.Item['G8IdealQty',Row].Value = SRRdetails.IdealQty
					EndIf
						
					If SRRdetails.ProposedQty <> *Zero
						Grid8.Item['G8PropQty',Row].Value = SRRdetails.ProposedQty
					EndIf
				EndIf
			EndIf
		EndDo
		
		DoEvents
		
		Filtering     = *True
		_SelectedRow  = -1
		_GridCleared  = *False
	EndSR
	
	// Market Grade Store
	BegSR Fill_Grid Access(*Public)
		DclSrParm Grid8      Type(System.Windows.Forms.DataGridView)
		DclSrParm SRRdetails Type(Disney.SRR.SRRdetails)
		DclSrParm Market     Type(*Char)  Len(2)
		DclSrParm Grade      Type(*Char)  Len(3)
		DclSrParm Store      Type(*Zoned) Len(3,0)
		
		DclFld _Uplift Type(*Zoned) Len(3,2)
		DclFld _Smooth Type(*Zoned) Len(5,2)
		DclFld _CutOff Type(*Zoned) Len(5,2)
		DclFld _Alloc  Type(*Char)  Len(1)
	
		DclFld Row       Type(*Integer4)
		DclFld RowCount  Type(*Integer4)
		DclFld ColorChar Type(*String)
		
		DclFld Class      Type(*Zoned) Len(4,0)
		DclFld ClassIndex Type(*Integer4)

						
		Grid8.Rows.Clear()
		
		// Enumerate Classes
		Do FromVal(0) ToVal(NoOfClasses) Index(ClassIndex)
			Class = ClassArray(ClassIndex)

			SRRgradeList.SetMarket(Market)
				
			DoUntil SRRgradeList.IsEoMkt
				GradeList = SRRgradeList.GetDetails(Market)
				If Not SRRgradeList.IsEoMkt
				
					If Grade <> GradeList.DeptGrade		// Select required grade
						Iterate
					EndIf
					
					If Store <> GradeList.Store		    // Select required grade
						Iterate
					EndIf
						
				
					// Find Grade defaults
					_UpLift = SRRuplift.GetDftUplift(Class, Market, Grade, Store)
					_Smooth = SRRsmooth.GetDftSmooth(Class, Market, Grade, Store)
					_CutOff = SRRcutoff.GetDftCutOff(Class, Market, Grade, Store)
					_Alloc  = SRRalloc.GetDftAlloc(Class, Market, Grade, Store)
							
					Grid8.Rows.Add()
					RowCount = Grid8.Rows.Count
					Row = RowCount - 1
					
					ColorChar = SRRkeyColor.MarketColor(Market)

					Grid8.Rows[Row].Cells['G8Class'].Value = Class
					Grid8.Item['G8Class',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
					
					Grid8.Rows[Row].Cells['G8Market'].Value = Market
					Grid8.Item['G8Market',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
					
					Grid8.Rows[Row].Cells['G8Grade'].Value = Grade
					Grid8.Item['G8Grade',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
				
					Grid8.Rows[Row].Cells['G8GradeNm'].Value = GradeNm
					Grid8.Item['G8GradeNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))
					
					Grid8.Rows[Row].Cells['G8Store'].Value = Store
					Grid8.Item['G8Store',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

					Grid8.Rows[Row].Cells['G8StoreNm'].Value = StrName
					Grid8.Item['G8StoreNm',Row].Style.BackColor = Color.FromArgb(Convert.ToInt32(ColorChar))

					Grid8 = Populate_Row(Grid8, Row, Class, Market, Grade, Store, +
						_UpLift, _Smooth, _CutOff, _Alloc)

					// Stock requirement - by Store
					If SRRdetails <> *Nothing
						SRRdetails.GetClsReq(Class, Store)
						If SRRdetails.StockReq <> *Zero
							Grid8.Item['G8StkReq',Row].Value = SRRdetails.StockReq
						EndIf
		
						If SRRdetails.IdealQty <> *Zero
							Grid8.Item['G8IdealQty',Row].Value = SRRdetails.IdealQty
						EndIf
							
						If SRRdetails.ProposedQty <> *Zero
							Grid8.Item['G8PropQty',Row].Value = SRRdetails.ProposedQty
						EndIf
					EndIf
				EndIf
			EndDo
		EndDo
		
		DoEvents
		
		Filtering     = *True
		_SelectedRow  = -1
		_GridCleared  = *False
	EndSR
	
	BegSR ClearGrid Access(*Public)
		DclSrParm Grid8  Type(System.Windows.Forms.DataGridView)
		
		Grid8.Rows.Clear()
		_GridCleared = *True
	EndSR

	BegFunc Populate_Row Type(system.Windows.Forms.DataGridView)
		DclSrParm Grid8    Type(system.Windows.Forms.DataGridView)
		DclSrParm Row      Type(*Integer4)
		DclSrParm Class    Type(*Zoned)  Len(4,0)
		DclSrParm Market   Type(*Char)   Len(2)
		DclSrParm Grade    Type(*Char)   Len(3)
		DclSrParm Store    Type(*Zoned)  Len(3,0)
		DclSrParm _UpLift  Type(*Zoned)  Len(3,2)
		DclSrParm _Smooth  Type(*Zoned)  Len(5,2)
		DclSrParm _CutOff  Type(*Zoned)  Len(5,2)
		DclSrParm _Alloc   Type(*Char)   Len(1)
		
		DclFld BoldFont    Type(System.Drawing.Font) New(Grid8.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid8.Font, FontStyle.Regular)
		
		DclFld Uplift Type(*Zoned) Len(3,2)
		DclFld CutOff Type(*Zoned) Len(5,2)
		DclFld Alloc  Type(*Char)  Len(1)
		
		
		// Uplift factor
		SRRuplift.GetUplift(Class, Market, Grade, Store)
		If SRRuplift.IsFound
			UpLift = SRRuplift.Value
			Grid8.Item['G8UpLift',Row].Style.Font = RegularFont
			
			If SRRuplift.IsChanged
				Grid8.Item['G8UpLift',Row].Style.ForeColor = Color.Red
			Else
				Grid8.Item['G8UpLift',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			UpLift = _Uplift
			Grid8.Item['G8UpLift',Row].Style.ForeColor = Color.Blue
			Grid8.Item['G8UpLift',Row].Style.Font      = BoldFont
		EndIf
		If Uplift <> *Zero
			Grid8.Item['G8UpLift',Row].Value = Uplift
		EndIf


		// Smoothing factor
		SRRsmooth.GetSmooth(Class, Market, Grade, Store)
		If SRRsmooth.IsFound
			Grid8.Item['G8Smooth',Row].Value      = SRRsmooth.Value
			Grid8.Item['G8Smooth',Row].Style.Font = RegularFont
			
			If SRRsmooth.IsChanged
				Grid8.Item['G8Smooth',Row].Style.ForeColor = Color.Red
			Else
				Grid8.Item['G8Smooth',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			Grid8.Item['G8Smooth',Row].Value           = _Smooth
			Grid8.Item['G8Smooth',Row].Style.ForeColor = Color.Blue
			Grid8.Item['G8Smooth',Row].Style.Font      = BoldFont
		EndIf

					
		// Cover Cut-Off factor
		SRRcutoff.GetCutOff(Class, Market, Grade, Store)
		If SRRcutoff.IsFound
			CutOff = SRRcutoff.Value
			Grid8.Item['G8CutOff',Row].Style.Font = RegularFont
			
			If SRRcutoff.IsChanged
				Grid8.Item['G8CutOff',Row].Style.ForeColor = Color.Red
			Else
				Grid8.Item['G8CutOff',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			CutOff = _CutOff
			Grid8.Item['G8CutOff',Row].Style.ForeColor = Color.Blue
			Grid8.Item['G8CutOff',Row].Style.Font      = BoldFont
		EndIf
		If CutOff <> *Zero
			Grid8.Rows[Row].Cells['G8CutOff'].Value = CutOff
		EndIf
				
				
		// Allocation flag
		SRRalloc.GetAlloc(Class, Market, Grade, Store)
		If SRRalloc.IsFound
			Alloc = SRRalloc.Value
			Grid8.Item['G8Alloc',Row].Style.Font = RegularFont
			
			If SRRalloc.IsChanged
				Grid8.Item['G8Alloc',Row].Style.ForeColor = Color.Red
			Else
				Grid8.Item['G8Alloc',Row].Style.ForeColor = Color.Black
			EndIf
		Else
			Alloc = _Alloc
			Grid8.Item['G8Alloc',Row].Style.ForeColor = Color.Blue
			Grid8.Item['G8Alloc',Row].Style.Font      = BoldFont
		EndIf
		If Alloc <> *Blank
			Grid8.Rows[Row].Cells['G8Alloc'].Value = Alloc
		EndIf
		
		LeaveSR Grid8						
	EndFunc
	
	BegSR CellValueChanged Access(*Public)
		DclSrParm sender Type(*Object)
		DclSrParm e      Type(System.Windows.Forms.DataGridViewCellEventArgs)
		DclSrParm Grid8  Type(System.Windows.Forms.DataGridView)
		DclSrParm Department Type(*Zoned) Len(3,0)

		DclFld BoldFont    Type(System.Drawing.Font) New(Grid8.Font, FontStyle.Bold)
		DclFld RegularFont Type(System.Drawing.Font) New(Grid8.Font, FontStyle.Regular)
				
		DclFld ColumnName Type( *String )
		DclFld CellValue  Type( *String )
		
		DclFld Column Type(*Integer4)
		DclFld Row    Type(*Integer4)

		DclFld Class  Type(*Zoned) Len(4,0)
		DclFld Market Type(*Char)  Len(2)
		DclFld Grade  Type(*Char)  Len(3)
		DclFld Store  Type(*Zoned) Len(3,0)
		DclFld Uplift Type(*Zoned) Len(5,2)
		DclFld Smooth Type(*Zoned) Len(5,2)
		DclFld CutOff Type(*Zoned) Len(5,2)
		DclFld Alloc  Type(*Char)  Len(1)

		Column = e.ColumnIndex
		Row    = e.RowIndex
		
		If Column >= *Zero and Row >= *Zero
			ColumnName = Grid8.Columns[Column].Name.ToUpper()
			Try
				CellValue = Grid8.Item[Column, Row].Value.ToString().Trim()
			Catch Err Exception
				CellValue = String.Empty
			EndTry
			
			// Get Market value from grid
			Class  = Convert.ToInt32(Grid8.Item['G8Class', Row].Value.ToString().Trim())
			Market = Grid8.Item['G8Market', Row].Value.ToString().Trim()
			Grade  = Grid8.Item['G8Grade', Row].Value.ToString().Trim()
			Store  = Convert.ToInt32(Grid8.Item['G8Store', Row].Value.ToString().Trim())

			Select
			When ColumnName = 'G8UPLIFT'
				If Grid8.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid8.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					// Inherit from level above
					Grid8.Item[Column, Row].Value           = SRRuplift.GetDftUplift(Class, Market, Grade, Store)
					Grid8.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid8.Item[Column, Row].Style.Font      = BoldFont
					
					// Flag record as deleted that was found at this level
					SRRuplift.DeleteUplift(Class, Market, Grade, Store)
				Else
					Try
						Uplift = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid8.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Uplift < 0.01 Or Uplift > 9.99
						Grid8.Item[Column,Row].ErrorText = 'Value must be between Zero and Ten'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid8.Item[Column,Row].Style.ForeColor = Color.Red
					Grid8.Item[Column,Row].Style.Font      = RegularFont
					
					SRRuplift.UpdateUplift(Class, Market, Grade, Store, UpLift)
					UpLift_Changed('Grid8')
				EndIf
				
				
			When ColumnName = 'G8SMOOTH'
				If Grid8.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					Grid8.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid8.Item[Column, Row].Value           = SRRsmooth.GetDftSmooth(Class, Market, Grade, Store)
					Grid8.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid8.Item[Column, Row].Style.Font      = BoldFont
					
					SRRsmooth.DeleteSmooth(Class, Market, Grade, Store)
				Else
					Try
						Smooth = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid8.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If Smooth > 1 Or Smooth < *Zero
						Grid8.Item[Column,Row].ErrorText = 'Value must be between 0 and 1'
						ErrorCount += 1
						LeaveSR
					EndIf
				
					Grid8.Item[Column,Row].Style.ForeColor = Color.Red
					Grid8.Item[Column,Row].Style.Font      = RegularFont
				
					SRRsmooth.UpdateSmooth(Class, Market, Grade, Store, Smooth)
					Smooth_Changed('Grid8')
				EndIf
				
				
			When ColumnName = 'G8CUTOFF'
				If Grid8.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					grid8.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid8.Item[Column, Row].Value           = SRRcutoff.GetDftCutOff(Class, Market, Grade, Store)
					Grid8.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid8.Item[Column, Row].Style.Font      = BoldFont
					
					SRRcutoff.DeleteCutOff(Class, Market, Grade, Store)
				Else
					Try
						CutOff = Convert.ToDecimal( CellValue )
					Catch Err Exception
						grid8.Item[Column,Row].ErrorText = 'Invalid Number'
						ErrorCount += 1
						LeaveSR
					EndTry
					
					If CutOff <= *Zero
						grid8.Item[Column,Row].ErrorText = 'Value must be greater than zero'
						ErrorCount += 1
						LeaveSR
					EndIf
					
					Grid8.Item[Column,Row].Style.ForeColor = Color.Red
					Grid8.Item[Column,Row].Style.Font      = RegularFont
					
					SRRcutoff.UpdateCutOff(Class, Market, Grade, Store, CutOff)
					CutOff_Changed('Grid8')
				EndIf
				
				
			When ColumnName = 'G8ALLOC'
				If Grid8.Item[Column,Row].ErrorText <> String.Empty
					ErrorCount -= 1
					grid8.Item[Column,Row].ErrorText = String.Empty
				EndIf
				
				If CellValue = String.Empty
					Grid8.Item[Column, Row].Value           = SRRalloc.GetDftAlloc(Class, Market, Grade, Store)
					Grid8.Item[Column, Row].Style.ForeColor = Color.Blue
					Grid8.Item[Column, Row].Style.Font      = BoldFont
					
					SRRalloc.DeleteAlloc(Class, Market, Grade, Store)
				Else
					Alloc = CellValue.ToUpper().Trim()
					If Alloc = 'Y' Or Alloc = 'N'
						Grid8.Item[Column, Row].Value = Alloc
						Grid8.Item[Column,Row].Style.ForeColor = Color.Red
						Grid8.Item[Column,Row].Style.Font      = RegularFont
					
						SRRalloc.UpdateAlloc(Class, Market, Grade, Store, Alloc)
						Alloc_Changed('Grid8')
					Else
						grid8.Item[Column,Row].ErrorText = 'Invalid Flag (Must be Y or N)'
						ErrorCount += 1
						LeaveSR
					EndIf
				EndIf
			EndSL
		EndIf
	EndSR
	
	BegSr RmvExceptions Access(*Public)
		DclSrParm Grid8 Type(System.Windows.Forms.DataGridView)

		DclFld Row    Type(*Integer2)
		DclFld Class  Type(*Zoned)  Len(4,0)
		DclFld Market Type(*Char)   Len(2)
		DclFld Grade  Type(*Char)   Len(3)
		DclFld Store  Type(*Zoned)  Len(3,0)

		Do FromVal(0) ToVal(Grid8.Rows.Count-1) Index(Row)
			Class  = Convert.ToInt32(Grid8.Item['G8Class', Row].Value)
			Market = Grid8.Item['G8Market', Row].Value.ToString().Trim()
			Grade  = Grid8.Item['G8Grade', Row].Value.ToString().Trim()
			Store  = Convert.ToInt32(Grid8.Item['G8Store', Row].Value)
			
			// Find Dept/Market/DeptGrade/Store level records and delete
			SRRuplift.DeleteUpLift(Class, Market, Grade, Store)
			SRRsmooth.DeleteSmooth(Class, Market, Grade, Store)
			SRRcutoff.DeleteCutOff(Class, Market, Grade, Store)
			SRRalloc.DeleteAlloc(Class, Market, Grade, Store)
			
			ErrorCount = *Zero
		EndDo
	EndSr
	
	// Load Class Array
	BegSr LoadClassArray
			
		If Not IPCLASSB.IsOpen
			Open IPCLASSB
		EndIf
		
		If Not DSCLASS.IsOpen
			Open DSCLASS
		EndIf
		
		NoOfClasses = -1
		SetRange IPCLASSB FirstKey(Department)
		DoUntil IPCLASSB.IsEof
			Read IPCLASSB
			If Not IPCLASSB.IsEof
				Chain DSCLASS Key(CCLS)
				If DSCLASS.IsFound And CCODE = 'Y'
					NoOfClasses += 1
					ClassArray(NoOfClasses) = CCLS
				EndIf
			EndIf
		EndDo
		
		Close IPCLASSB
		Close DSCLASS
	EndSr
	
	// Load array of Markets
	BegSr LoadMarketArray
			
		If Not DSCNTAP.IsOpen
			Open DSCNTAP
		EndIf
		
		NoOfMarkets = -1
		SetLL DSCNTAP Key(*Start)
		DoUntil DSCNTAP.IsEof
			Read DSCNTAP
			If Not DSCNTAP.IsEof
				If CSDGRP <> *Blank And CSBGRP <> *Blank
					NoOfMarkets += 1
					MarketArray(NoOfMarkets) = CSCODE
				EndIf
			EndIf
		EndDo
		
		Close DSCNTAP
	EndSr	
EndClass
