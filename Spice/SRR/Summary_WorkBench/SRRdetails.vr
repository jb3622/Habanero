Using System
Using System.Text

Using Disney.SRR

DclNameSpace Disney.SRR

BegClass SRRdetails Access(*Public)

	/Region Declare DataBase
	DclDB Name(SRR) DBName("TDST")
	
	DclDiskFile Name(DSSRSUM) Type(*Input) Org(*Arrival) +
		DB(SRR) File('*Libl/DSSRSUM') ImpOpen(*No)
		
	DclMemoryFile Name(Mem) DBdesc(SRR) Filedesc('*Libl/DSSRSUM') +
		RnmFmt(RDSSRSUM, MDSSRSUM) ImpOpen(*No)
	/EndRegion
	
	DclFld memRecords Type(*Integer4)
	DclFld MemberName Type(*Char) Len(10)
	
	DclFld Requirement Type(*Packed) Len(9,0)
	DclFld Ideal       Type(*Packed) Len(9,0)
	DclFld Proposed    Type(*Packed) Len(9,0)
	
	/Region Constructor & Destructor
	BegConstructor Access(*Public)
		DclSrParm SRR        Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm MemberName Type(*Char) Len(10)
		
		*this.SRR = SRR
		*this.MemberName = MemberName
		
		If Not Mem.IsOpen
			Open Mem
		EndIf
		
		Load_Memory_file()
	EndConstructor
	/EndRegion

	/Region Properties
	BegProp NoOfRecords Type(*Integer4) Access(*Public)
		BegGet
			LeaveSR memRecords
		EndGet
	EndProp
	
	BegProp StockReq Type(*Packed) Len(9,0) Access(*Public)
		BegGet
			LeaveSR Requirement
		EndGet
	EndProp
	
	BegProp IdealQty Type(*Packed) Len(9,0) Access(*Public)
		BegGet
			LeaveSR Ideal
		EndGet
	EndProp
	
	BegProp ProposedQty Type(*Packed) Len(9,0) Access(*Public)
		BegGet
			LeaveSR Proposed
		EndGet
	EndProp
	/EndRegion
	
	/Region Methods
	BegSr Load_Memory_File
	
		If DSSRSUM.IsOpen
			Close DSSRSUM
		EndIf
		
		DSSRSUM.MemberName = MemberName.Trim()
		Open DSSRSUM
		
		memRecords = *Zero
		SetLL DSSRSUM Key(*Start)
		DoUntil DSSRSUM.IsEof
			Read DSSRSUM
			If Not DSSRSUM.IsEof
				
				// Write record into Memory file
				memRecords += 1
				Write Mem
			EndIf
		EndDo
		
		Close DSSRSUM
	EndSr
	
	// Department level
	BegSR GetStkReq Access(*Public)
				
		Requirement = *Zero
		Ideal       = *Zero
		Proposed    = *Zero
		
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SRSTRQ > *Zero
				Requirement += SRSTRQ
			EndIf
			
			If SRRPQT > *Zero
				Ideal += SRRPQT
			EndIf
			
			If SRPRAQ > *Zero
				Proposed += SRPRAQ
			EndIf
		EndDo
	EndSR
	
	// Department Market level
	BegSR GetStkReq Access(*Public)
		DclSrParm Market Type(*Char) Len(2)
		
		Requirement = *Zero
		Ideal       = *Zero
		Proposed    = *Zero
		
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SRMKT = Market
				If SRSTRQ > *Zero
					Requirement += SRSTRQ
				EndIf
				
				If SRRPQT > *Zero
					Ideal += SRRPQT
				EndIf
				
				If SRPRAQ > *Zero
					Proposed += SRPRAQ
				EndIf
			EndIf
		EndDo
	EndSR
	
	// Store level
	BegSR GetStkReq Access(*Public)
		DclSrParm Store Type(*Zoned) Len(3,0)
		
		Requirement = *Zero
		Ideal       = *Zero
		Proposed    = *Zero
		
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SRSTR = Store
				If SRSTRQ > *Zero
					Requirement += SRSTRQ
				EndIf
				
				If SRRPQT > *Zero
					Ideal += SRRPQT
				EndIf
				
				If SRPRAQ > *Zero
					Proposed += SRPRAQ
				EndIf
			EndIf
		EndDo
	EndSR
	
	// Class Level
	BegSR GetClsReq Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		
		Requirement = *Zero
		Ideal       = *Zero
		Proposed    = *Zero
		
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SRCLS = Class
				If SRSTRQ > *Zero
					Requirement += SRSTRQ
				EndIf
				
				If SRRPQT > *Zero
					Ideal += SRRPQT
				EndIf
				
				If SRPRAQ > *Zero
					Proposed += SRPRAQ
				EndIf
			EndIf
		EndDo
	EndSR

	// Class Market level
	BegSR GetClsReq Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		DclSrParm Market Type(*Char) Len(2)
		
		Requirement = *Zero
		Ideal       = *Zero
		Proposed    = *Zero
		
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SRCLS = Class And SRMKT = Market
				If SRSTRQ > *Zero
					Requirement += SRSTRQ
				EndIf
				
				If SRRPQT > *Zero
					Ideal += SRRPQT
				EndIf
				
				If SRPRAQ > *Zero
					Proposed += SRPRAQ
				EndIf
			EndIf
		EndDo
	EndSR
	
	// Class Store level
	BegSR GetClsReq Access(*Public)
		DclSrParm Class Type(*Zoned) Len(4,0)
		DclSrParm Store Type(*Zoned) Len(3,0)
		
		Requirement = *Zero
		Ideal       = *Zero
		Proposed    = *Zero
		
		Do FromVal(1) ToVal(memRecords) Index(RRN) Type(*Integer4)
			Chain Mem Key(RRN)
			
			If SRCLS = Class And SRSTR = Store
				If SRSTRQ > *Zero
					Requirement += SRSTRQ
				EndIf
				
				If SRRPQT > *Zero
					Ideal += SRRPQT
				EndIf
				
				If SRPRAQ > *Zero
					Proposed += SRPRAQ
				EndIf
			EndIf
		EndDo
	EndSR
	/EndRegion
EndClass