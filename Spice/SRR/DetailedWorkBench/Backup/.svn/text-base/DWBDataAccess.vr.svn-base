Using System
Using System.Text

DclNameSpace Disney.SRR

BegClass DWBDataAccess Access(*Public)

/Region Declare Database Files

// Connection
Dcldb AS400 dbname("TDST")	

DclDiskFile  DSSRWBIS +
		Type( *Input  ) + 
		Org( *Indexed ) + 
		File( "*LIBL/DSSRWBIS" ) +
		DB( AS400 ) +
		ImpOpen( *No ) 
	
// Memory File
DclMemoryFile    Name( memCustomer )					+
				Impopen( *No )						+
				DBDesc( AS400 )					+
				FileDesc( "*LIBL/MEMALWRKB1" )  Access(*Public)		
  
/EndRegion

/Region Constructor
	BegConstructor Access(*Public)
		DclSrParm p_AS400	  Type(asna.VisualRPG.Runtime.Database)
		DclSrParm MemCustomer Type(asna.VisualRPG.Runtime.MemoryFile)
		
        *this.As400 = p_AS400
        
        *this.memCustomer = MemCustomer
		
	EndConstructor
/EndRegion

/Region Main


BegFunc  LoadMemFile  Type(*Boolean) Access(*Public)

  DclFld   x  Type(*integer4)
    
        // Open DB connection.
		If Not DSSRWBIS.IsOpen
		   Open DSSRWBIS
		Endif
        
        // Load Grid
		Do FromVal( 1 ) ToVal( 150 ) Index(x)
		    
			
			DoEvents
			Read DSSRWBIS
			If DSSRWBIS.IsEOF
			  
			   Leave
			EndIf
			
			// Populate the grid 
			
			M_ITEM   = ISCLS.toString('0000') +'-'+ ISVEN.toString('00000')+'-'+ ISSTY.toString('0000') +'-'+ ISCLR.toString('000')+'-'+ ISSIZ.toString('0000')  
			M_UPC     = ISUPC      
			M_DESC    = ISIDES 
			M_MARKET  = ISMKT
			M_GRADE   = ISGRD 
			M_STORE	  = ISSTR 		
			M_STRNAME = ISSNAM 
          
			M_MINDQTY =	ISMDQT
			M_SALLW	  = ISSLUL		
			M_SALWTD  = ISSLUT
			
			M_CURSROS = ISCSRS
		 	
			M_SOHSTR  = ISSSOH
			M_WOCSTR  = ISSWOC
			
			M_INTRAL  = ISINTA   
			M_INTRSH  = ISINTS   
           
			M_LSTPQTY = ISPKQT   
			M_OUTOFST = ISSTOU   
           
			M_SOHEDC  = ISESOH   
			M_WOCEDC  = ISEWOC 
			
			// Total Stock Required
		        M_TOTSTCKS = %EditC(WBCSSR, 'J')   
				M_TOTSTCKU = %EditC(WBCSSR, 'J')    
				M_TOTSTCKA = %EditC(WBCSSR, 'J')  
				M_TOTSTCKF = %EditC(WBCSSR, 'J')  
				
			 
			// Ideal Allocation Qty
		 		M_MDLREQTS = %EditC(ISNSRQ, 'J') 
				M_MDLREQTU = %EditC(ISNSRQ, 'J') 
				M_MDLREQTA = %EditC(ISNSRQ, 'J') 
				M_MDLREQTF = %EditC(ISNSRQ, 'J') 
						
		   // Proposed Allocation Qty
			
				M_PRALQTYS = %EditC(ISPRAQ, 'J') 
				M_PRALQTYU = %EditC(ISPRAQ, 'J') 
				M_PRALQTYA = %EditC(ISPRAQ, 'J') 
				M_PRALQTYF = %EditC(ISPRAQ, 'J') 
			
			// New ROS
			
				M_NEWSROSS = %EditC(ISSRSL, 'J') 
				M_NEWSROSU = %EditC(ISSRSL, 'J') 
				M_NEWSROSA = %EditC(ISSRSL, 'J') 
				M_NEWSROSF = %EditC(ISSRSL, 'J') 
			
			M_NORQTEDC= ISNOQT 
          
          	// Set Lever Values
	  		M_CURUPLFT = ISCFWF
			M_NEWUPLFT = ISCFWF.toString()
			M_OLDUPLFT = ISCFWF.toString()
           
			M_CURCOCUO = ISCCCO
			M_NEWCOCUO = ISCCCO.toString()
            M_OLDCOCUO = ISCCCO.toString()
            
            M_CURALCFL = ISCAFL.toUpper()
			M_NEWCALFL = ISCAFL.toUpper()
            M_OLDCALFL = ISCAFL.toUpper()
           
			M_CURSMFCT = ISSFCT
			M_NEWSMFCT = ISSFCT.toString()
			M_OLDSMFCT = ISSFCT.toString()
			
			// New Lever values
			If ISNCCO <> 0			
			  M_NEWCOCUO= ISNCCO.toString()  
			  M_OLDCOCUO= ISNCCO.toString()
			Endif
			
			If ISNFWF <> 0	
			  M_NEWUPLFT = ISNFWF.toString()  
			  M_OLDUPLFT = ISNFWF.toString()
			Endif 
			 	
			If ISNAFL <> *Blanks 	
			   M_NEWCALFL = ISNAFL
			   M_OLDCALFL = ISNAFL		
			Endif
			
			If ISNSMF <> 0	
			  M_NEWSMFCT = ISNSMF.toString()
			  M_OLDSMFCT = ISNSMF.toString()	
			Endif 
			
			// Current level
			M_CURALLVL = ISCATH 
			M_CURSMLVL = ISSFTH
			M_CURUPLVL = ISCFTL
			M_CURCCLVL = ISCCTL
		    
		    M_LOCKED = *Blanks
		    M_LCKUSER = *Blanks
		
			M_RCDINDX = x
		
			Write *this.memCustomer
			
		EndDo
			
	LeaveSR *True

EndFunc 


/EndRegion

EndClass
