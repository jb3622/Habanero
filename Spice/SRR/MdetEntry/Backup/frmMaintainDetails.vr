Using System
Using System.Collections
Using System.ComponentModel
Using System.Data
Using System.Drawing
Using System.Text
Using System.Windows.Forms

BegClass frmMaintainDetails Extends(System.Windows.Forms.Form) Access(*Public)
	/Region AVR component definitions
	DclFld txtSRSIZ System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld txtSRCLR System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld txtSRSTY System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld txtSRSTR System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld txtSRVEN System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld label2 System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld label1 System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld txtSRCLS System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld label3 System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld label4 System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld label5 System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld btnCancel System.Windows.Forms.Button Access(*Private) WithEvents(*Yes)
	DclFld btnApply System.Windows.Forms.Button Access(*Private) WithEvents(*Yes)
	DclFld lblStoreName System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld errorProvider1 System.Windows.Forms.ErrorProvider Access(*Private) WithEvents(*Yes)
	DclFld txtSROROS System.Windows.Forms.TextBox Access(*Public) WithEvents(*Yes)
	DclFld txtPatId System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld txtDistLot System.Windows.Forms.TextBox Access(*Private) WithEvents(*Yes)
	DclFld lblItemName System.Windows.Forms.Label Access(*Private) WithEvents(*Yes)
	DclFld btnRtvDtls System.Windows.Forms.Button Access(*Private) WithEvents(*Yes)
	DclFld components Type(System.ComponentModel.IContainer) Inz(*Nothing)
	
	DclFld ErrorCount  Type(*Packed) Len(1,0)
	Dclfld StoreKey    Type(*Zoned) Len(3,0)
	DclFld Position    Type(*Packed) Len(3,0)
	DclFld Action      Type(*Packed) Len(1,0)
	DclFLd RtvDetails  Type(*Boolean) Inz(*False)  
	Dclfld wSROROS     Like(SROROS)
	Dclfld wPatternID  Like(DPAID)
	Dclfld wMinDspQty  Like(DMDQT)
	DclFLd Rebuild     Type(*Boolean) Inz(*False) Access(*Public)
	
	/EndRegion
	
	/Region Program definition
	Dclfld Mode *char Len(6)
	DclFld P_SRCLS Like(SRCLS)
	DclFld P_SRVEN Like(SRVEN)
	DclFld P_SRSTY Like(SRSTY)
	DclFld P_SRCLR Like(SRCLR)
	DclFld P_SRSIZ Like(SRSIZ)
	DclFld P_SRSTR Like(SRSTR)
	DclFld P_SRDEPT Like(SRDEPT)

    DclConst Digits  Value('0123456789')
	DclConst Digits2 Value('0123456789.')
	DclFld @Pos Type(*Packed) Len(3,0)
	
	/EndRegion
	
	/Region DataBase Definition
	DclDB Name(SRR) DBName("TDS2") 
	
		
	DclDiskFile Name(StoreMaster) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/IPSTORE') ImpOpen(*No)	
			
	DclDiskFile Name(StoreDetail) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/DSSTORE') ImpOpen(*No)	
		
	DclDiskFile Name(ItemMaster) Type(*Update) Org(*Indexed) +
		DB(SRR) File('*Libl/DSSRDTL1') AddRec(*yes) ImpOpen(*No) 
		
	DclDiskFile Name(ItemDesc) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/IPITHDR') ImpOpen(*No)
		
	DclDiskFile Name(ItemHeader) Type(*Update) Org(*Indexed) +
		DB(SRR) File('*Libl/DSITHDR') ImpOpen(*No)
		
	DclDiskFile Name(DisneyConst) Type(*Input) Org(*Indexed) +
		DB(SRR) File('*Libl/DSCONSP') ImpOpen(*No) 
			
	/EndRegion
	
	BegConstructor Access(*Public)
		DclSrParm Mode *Char Len(6)
		DclSrParm SRCLS *Zoned Len(4,0)
		DclSrParm SRVEN *Zoned Len(5,0)
		DclSrParm SRSTY *Zoned Len(4,0)
		DclSrParm SRCLR *Zoned Len(3,0)
		DclSrParm SRSIZ *Zoned Len(4,0)
		DclSrParm SRSTR *Zoned Len(3,0)
		DclSrParm SRDept *Zoned Len(3,0)
		DclSrParm p_SRR   Type(asna.VisualRPG.Runtime.Database)
         
		InitializeComponent()

		*This.Mode    = Mode
		*This.P_SRCLS = SRCLS
		*This.P_SRVEN = SRVEN
		*This.P_SRSTY = SRSTY
		*This.P_SRCLR = SRCLR
		*This.P_SRSIZ = SRSIZ
		*This.P_SRSTR = SRSTR
		*This.P_SRDEPT = SRdept
		*This.SRR = p_SRR
				
		OpenDB()
	EndConstructor

	/region Windows Form Designer generated code
    
	// Required method for Designer support - do not modify
	// the contents of this method with the code editor.
	BegSr InitializeComponent
		*this.components = *new System.ComponentModel.Container()
		DclFld resources System.ComponentModel.ComponentResourceManager New(*typeof(frmMaintainDetails))
		*this.txtSRSIZ = *new System.Windows.Forms.TextBox()
		*this.txtSRCLR = *new System.Windows.Forms.TextBox()
		*this.txtSRSTY = *new System.Windows.Forms.TextBox()
		*this.txtSRSTR = *new System.Windows.Forms.TextBox()
		*this.txtSRVEN = *new System.Windows.Forms.TextBox()
		*this.label2 = *new System.Windows.Forms.Label()
		*this.label1 = *new System.Windows.Forms.Label()
		*this.txtSRCLS = *new System.Windows.Forms.TextBox()
		*this.txtSROROS = *new System.Windows.Forms.TextBox()
		*this.txtPatId = *new System.Windows.Forms.TextBox()
		*this.txtDistLot = *new System.Windows.Forms.TextBox()
		*this.label3 = *new System.Windows.Forms.Label()
		*this.label4 = *new System.Windows.Forms.Label()
		*this.label5 = *new System.Windows.Forms.Label()
		*this.btnApply = *new System.Windows.Forms.Button()
		*this.btnCancel = *new System.Windows.Forms.Button()
		*this.lblStoreName = *new System.Windows.Forms.Label()
		*this.errorProvider1 = *new System.Windows.Forms.ErrorProvider(*this.components)
		*this.lblItemName = *new System.Windows.Forms.Label()
		*this.btnRtvDtls = *new System.Windows.Forms.Button()
		(*this.errorProvider1 *As System.ComponentModel.ISupportInitialize).BeginInit()
		*this.SuspendLayout()
		//
		//txtSRSIZ
		//
		*this.txtSRSIZ.Location = *new System.Drawing.Point(374, 10)
		*this.txtSRSIZ.MaxLength = 4
		*this.txtSRSIZ.Name = "txtSRSIZ"
		*this.txtSRSIZ.Size = *new System.Drawing.Size(56, 20)
		*this.txtSRSIZ.TabIndex = 5
		//
		//txtSRCLR
		//
		*this.txtSRCLR.Location = *new System.Drawing.Point(333, 10)
		*this.txtSRCLR.MaxLength = 3
		*this.txtSRCLR.Name = "txtSRCLR"
		*this.txtSRCLR.Size = *new System.Drawing.Size(35, 20)
		*this.txtSRCLR.TabIndex = 4
		//
		//txtSRSTY
		//
		*this.txtSRSTY.Location = *new System.Drawing.Point(271, 10)
		*this.txtSRSTY.MaxLength = 4
		*this.txtSRSTY.Name = "txtSRSTY"
		*this.txtSRSTY.Size = *new System.Drawing.Size(56, 20)
		*this.txtSRSTY.TabIndex = 3
		//
		//txtSRSTR
		//
		*this.txtSRSTR.Location = *new System.Drawing.Point(147, 51)
		*this.txtSRSTR.MaxLength = 3
		*this.txtSRSTR.Name = "txtSRSTR"
		*this.txtSRSTR.Size = *new System.Drawing.Size(42, 20)
		*this.txtSRSTR.TabIndex = 6
		//
		//txtSRVEN
		//
		*this.txtSRVEN.Location = *new System.Drawing.Point(209, 10)
		*this.txtSRVEN.MaxLength = 5
		*this.txtSRVEN.Name = "txtSRVEN"
		*this.txtSRVEN.Size = *new System.Drawing.Size(56, 20)
		*this.txtSRVEN.TabIndex = 2
		//
		//label2
		//
		*this.label2.AutoSize = *True
		*this.label2.Location = *new System.Drawing.Point(12, 54)
		*this.label2.Name = "label2"
		*this.label2.Size = *new System.Drawing.Size(32, 13)
		*this.label2.TabIndex = 6
		*this.label2.Text = "Store"
		//
		//label1
		//
		*this.label1.AutoSize = *True
		*this.label1.Location = *new System.Drawing.Point(12, 13)
		*this.label1.Name = "label1"
		*this.label1.Size = *new System.Drawing.Size(27, 13)
		*this.label1.TabIndex = 0
		*this.label1.Text = "Item"
		//
		//txtSRCLS
		//
		*this.txtSRCLS.Location = *new System.Drawing.Point(147, 10)
		*this.txtSRCLS.MaxLength = 4
		*this.txtSRCLS.Name = "txtSRCLS"
		*this.txtSRCLS.Size = *new System.Drawing.Size(56, 20)
		*this.txtSRCLS.TabIndex = 1
		//
		//txtSROROS
		//
		*this.txtSROROS.Location = *new System.Drawing.Point(147, 92)
		*this.txtSROROS.MaxLength = 7
		*this.txtSROROS.Name = "txtSROROS"
		*this.txtSROROS.Size = *new System.Drawing.Size(76, 20)
		*this.txtSROROS.TabIndex = 7
		//
		//txtPatId
		//
		*this.txtPatId.Location = *new System.Drawing.Point(147, 133)
		*this.txtPatId.MaxLength = 3
		*this.txtPatId.Name = "txtPatId"
		*this.txtPatId.Size = *new System.Drawing.Size(56, 20)
		*this.txtPatId.TabIndex = 8
		//
		//txtDistLot
		//
		*this.txtDistLot.Location = *new System.Drawing.Point(147, 174)
		*this.txtDistLot.MaxLength = 3
		*this.txtDistLot.Name = "txtDistLot"
		*this.txtDistLot.Size = *new System.Drawing.Size(56, 20)
		*this.txtDistLot.TabIndex = 9
		//
		//label3
		//
		*this.label3.AutoSize = *True
		*this.label3.Location = *new System.Drawing.Point(12, 95)
		*this.label3.Name = "label3"
		*this.label3.Size = *new System.Drawing.Size(109, 13)
		*this.label3.TabIndex = 9
		*this.label3.Text = "Opening Rate of Sale"
		//
		//label4
		//
		*this.label4.AutoSize = *True
		*this.label4.Location = *new System.Drawing.Point(12, 136)
		*this.label4.Name = "label4"
		*this.label4.Size = *new System.Drawing.Size(53, 13)
		*this.label4.TabIndex = 11
		*this.label4.Text = "Pattern Id"
		//
		//label5
		//
		*this.label5.AutoSize = *True
		*this.label5.Location = *new System.Drawing.Point(12, 177)
		*this.label5.Name = "label5"
		*this.label5.Size = *new System.Drawing.Size(127, 13)
		*this.label5.TabIndex = 13
		*this.label5.Text = "Minimum Display Quantity"
		//
		//btnApply
		//
		*this.btnApply.Anchor = (((System.Windows.Forms.AnchorStyles.Bottom *BitOr System.Windows.Forms.AnchorStyles.Left) *BitOr System.Windows.Forms.AnchorStyles.Right) *As System.Windows.Forms.AnchorStyles)
		*this.btnApply.Location = *new System.Drawing.Point(324, 252)
		*this.btnApply.Name = "btnApply"
		*this.btnApply.Size = *new System.Drawing.Size(75, 25)
		*this.btnApply.TabIndex = 11
		*this.btnApply.Text = "&Apply"
		*this.btnApply.UseVisualStyleBackColor = *True
		//
		//btnCancel
		//
		*this.btnCancel.Anchor = (((System.Windows.Forms.AnchorStyles.Bottom *BitOr System.Windows.Forms.AnchorStyles.Left) *BitOr System.Windows.Forms.AnchorStyles.Right) *As System.Windows.Forms.AnchorStyles)
		*this.btnCancel.Location = *new System.Drawing.Point(430, 252)
		*this.btnCancel.Name = "btnCancel"
		*this.btnCancel.Size = *new System.Drawing.Size(75, 25)
		*this.btnCancel.TabIndex = 12
		*this.btnCancel.Text = "&Back"
		*this.btnCancel.UseVisualStyleBackColor = *True
		//
		//lblStoreName
		//
		*this.lblStoreName.AutoSize = *True
		*this.lblStoreName.Location = *new System.Drawing.Point(220, 54)
		*this.lblStoreName.Name = "lblStoreName"
		*this.lblStoreName.Size = *new System.Drawing.Size(63, 13)
		*this.lblStoreName.TabIndex = 8
		*this.lblStoreName.Text = "Store Name"
		//
		//errorProvider1
		//
		*this.errorProvider1.BlinkStyle = System.Windows.Forms.ErrorBlinkStyle.NeverBlink
		*this.errorProvider1.ContainerControl = *this
		//
		//lblItemName
		//
		*this.lblItemName.AutoSize = *True
		*this.lblItemName.Location = *new System.Drawing.Point(447, 13)
		*this.lblItemName.Name = "lblItemName"
		*this.lblItemName.Size = *new System.Drawing.Size(58, 13)
		*this.lblItemName.TabIndex = 17
		*this.lblItemName.Text = "Item Name"
		//
		//btnRtvDtls
		//
		*this.btnRtvDtls.Anchor = (((System.Windows.Forms.AnchorStyles.Bottom *BitOr System.Windows.Forms.AnchorStyles.Left) *BitOr System.Windows.Forms.AnchorStyles.Right) *As System.Windows.Forms.AnchorStyles)
		*this.btnRtvDtls.Location = *new System.Drawing.Point(223, 252)
		*this.btnRtvDtls.Name = "btnRtvDtls"
		*this.btnRtvDtls.Size = *new System.Drawing.Size(75, 25)
		*this.btnRtvDtls.TabIndex = 10
		*this.btnRtvDtls.Text = "&Retrieve "
		*this.btnRtvDtls.UseVisualStyleBackColor = *True
		//
		//frmMaintainDetails
		//
		*this.AutoScaleDimensions = *new System.Drawing.SizeF(6, 13)
		*this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
		*this.ClientSize = *new System.Drawing.Size(723, 322)
		*this.Controls.Add(*this.btnRtvDtls)
		*this.Controls.Add(*this.lblItemName)
		*this.Controls.Add(*this.lblStoreName)
		*this.Controls.Add(*this.btnCancel)
		*this.Controls.Add(*this.btnApply)
		*this.Controls.Add(*this.label5)
		*this.Controls.Add(*this.label4)
		*this.Controls.Add(*this.label3)
		*this.Controls.Add(*this.txtDistLot)
		*this.Controls.Add(*this.txtPatId)
		*this.Controls.Add(*this.txtSROROS)
		*this.Controls.Add(*this.txtSRSIZ)
		*this.Controls.Add(*this.txtSRCLR)
		*this.Controls.Add(*this.txtSRSTY)
		*this.Controls.Add(*this.txtSRSTR)
		*this.Controls.Add(*this.txtSRVEN)
		*this.Controls.Add(*this.label2)
		*this.Controls.Add(*this.label1)
		*this.Controls.Add(*this.txtSRCLS)
		*this.Icon = (resources.GetObject("$this.Icon") *As System.Drawing.Icon)
		*this.Name = "frmMaintainDetails"
		*this.ShowInTaskbar = *False
		*this.Text = "Maintain values"
		(*this.errorProvider1 *As System.ComponentModel.ISupportInitialize).EndInit()
		*this.ResumeLayout(*False)
		*this.PerformLayout()
	EndSr

	/endregion

	// Clean up any resources being used.
	// "disposing" is true if managed resources should be disposed; otherwise, false.
	BegSr Dispose Access(*Protected) Modifier(*Overrides)
		DclSrParm disposing Type(*Boolean)

		If (disposing *And (components *NE *Nothing))
			components.Dispose()
		EndIf
			
		*Base.Dispose(disposing)
	EndSr

	BegSr frmMaintainDetails_Load Access(*Private) Event(*this.Load)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		lblStoreName.Text = String.Empty
		lblItemName.Text  = String.Empty
		btnRtvDtls.Enabled = *True
        Rebuild = *False
		
		txtSRSTR.Text   = String.Empty
		txtSROROS.Text  = String.Empty
		txtDistLot.Text = String.Empty
		txtPatId.Text   = String.Empty
		
		//Clear errors
		ClearErrors()
		
		// If Mode is Change or Delete, Obtain record from details file
		If Mode = 'UPDATE' or Mode = 'DELETE'
		    
		    btnRtvDtls.Enabled = *False 
		    txtPatId.Enabled   = *False
		    txtDistLot.Enabled = *False
		    		    
		   // Get the PatternID and Min Display Qty
			getItemHeader()
			
			Chain ItemMaster Key(P_SRDept, P_SRCLS, P_SRVEN, P_SRSTY, P_SRCLR, P_SRSIZ, P_SRSTR) Access(*NoLock)
			If ItemMaster.IsFound
				
				Chain ItemDesc Key(P_SRCLS, P_SRVEN, P_SRSTY, P_SRCLR, P_SRSIZ)
				If ItemDesc.IsFound
					lblItemName.Text = IDES
				Else
					lblItemName.Text = "Item description not found"
				EndIf
		
				With txtSRCLS
					.Text = P_SRCLS.ToString('0000')
					.Enabled = *False
				EndWith
					
				With txtSRVEN
					.Text = P_SRVEN.ToString('00000')
					.Enabled = *False
				EndWith
				
				With txtSRSTY
					.Text = P_SRSTY.ToString('0000')
					.Enabled = *False
				EndWith
		
				With txtSRCLR
					.Text = P_SRCLR.ToString('000')
					.Enabled = *False
				EndWith
					
				With txtSRSIZ
					.Text = P_SRSIZ.ToString('0000')
					.Enabled = *False
				EndWith
				
				With txtSRSTR
					.Text = P_SRSTR.ToString('000')
					.Enabled = *False
				EndWith
				
				With txtSROROS
					.Text = SROROS.ToString('   0.00').trim()
					.Enabled = *True
				EndWith
				
				Chain StoreMaster Key(P_SRSTR)
				If StoreMaster.IsFound
					lblStoreName.Text = SNAM
				EndIf
				
				If Mode = 'UPDATE'
					*this.Text = 'Update Item Record'
					btnApply.Text = 'Update'
					txtSROROS.focus()
				Else
					txtSROROS.Enabled  = *False
					txtPATID.Enabled   = *False
					txtDISTLOT.Enabled = *False
					*this.Text = 'Delete Item Record'
					btnApply.Text = 'Delete'
				EndIf
			EndIf
		Else     // We are adding records here
			With txtSRCLS
				.Text = String.Empty
				.ReadOnly = *False
			EndWith
			
			With txtSRVEN
				.Text = String.Empty
				.ReadOnly = *False
			EndWith
			
			With txtSRSTY
				.Text = String.Empty
				.ReadOnly = *False
			EndWith
			
			With txtSRCLR
				.Text = String.Empty
				.ReadOnly = *False
			EndWith
			
			With txtSRSIZ
				.Text = String.Empty
				.ReadOnly = *False
			EndWith
			
			With txtSRSTR
				.Text = String.Empty
				.ReadOnly = *False
			EndWith
			
			*this.Text = 'Add a new Item Record'
			txtSRCLS.focus()
			btnApply.Text = 'Add'
		EndIf
		
		Close ItemMaster
		
	EndSr
	
// Get Data from DSITHDR	
	BegSR  getItemHeader  Access(*Private) 
	       
	       Chain ItemHeader Key(P_SRCLS, P_SRVEN, P_SRSTY, P_SRCLR, P_SRSIZ) Access(*NoLock) 
			If ItemHeader.IsFound
			   txtPATID.Text   = DPAID.toString() 
			   txtDISTLOT.Text = DMDQT.toString()
			 Else
			   txtPATID.Text   = String.Empty 
			   txtDISTLOT.Text = String.Empty
			EndIf  
	
	EndSR
	
	// set Data in DSITHDR	
	BegSR  setItemHeader  Access(*Private) 
	      
	       ErrorCount = 0
	      
	       If txtPATID.Text = *Blank *And txtDISTLOT.Text = *Blanks
	          LeaveSR
		   Endif	
		
		   Try
		      wPatternID = Convert.ToDecimal( txtPATID.Text.Trim() )
		      wMinDspQty = Convert.ToDecimal( txtDISTLOT.Text.Trim() )
			Catch Type(System.Exception)
			  ErrorProvider1.SetError(txtPATID, "PatternID NOT Updated")
			  ErrorProvider1.SetError(txtDISTLOT, "Min Qty NOT Updated")
			  ErrorCount += 1
			  wPatternID = 0
			  wMinDspQty = 0
			  LeaveSr
		   Endtry
		   
		   // Find IPITHDR record for various values required when adding records to DSSRDTL
			SRCLS  = Convert.ToInt32( txtSRCLS.Text )
			SRVEN  = Convert.ToInt32( txtSRVEN.Text )
			SRSTY  = Convert.ToInt32( txtSRSTY.Text )
			SRCLR  = Convert.ToInt32( txtSRCLR.Text )
			SRSIZ  = Convert.ToInt32( txtSRSIZ.Text )
				
			Chain ItemHeader Key(SRCLS, SRVEN, SRSTY, SRCLR, SRSIZ)
		    If ItemHeader.IsFound
		       If (DPAID = wPatternID *And DMDQT = wMinDspQty) 
		          Unlock DIHDR
		          LeaveSR
		       Endif
		       DPAID = wPatternID   
		       DMDQT = wMinDspQty
		       Update DIHDR
		     Else 
		       ErrorCount += 1
		       MsgBox 'PatternID & Minimum Qty Not Updated, Item cannot be found on DSITHDR.' Icon(*EXCLAMATION)
		    EndIf  
	
	EndSR
	
	
	BegSr btnCancel_Click Access(*Private) Event(*this.btnCancel.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		Close *All
	//	Disconnect SRR
		Unload *This
	EndSr
	
	BegSr btnApply_Click Access(*Private) Event(*this.btnApply.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		SetMousePtr *Hourglass
		
		RtvDetails = *False
		
		// Clear any previously registered errors.
        ClearErrors()
				
		If Not (StoreDetail.IsOpen)
		   Open StoreDetail
		Endif
		
		// Validate Long Item Fields..
        
        If  (Mode = 'ADD')
         If (Not ValidateForm() )

			LeaveSR
		 Endif
		Endif 
		
		If (Mode = 'UPDATE')
		
		   If txtSROROS.Text = String.Empty	
				errorProvider1.SetError(txtSROROS, "Please enter value")
				ErrorCount += 1
			  Else
				Position = %Check(Digits2, txtSROROS.Text.Trim())
				If Position <> *Zero
					ErrorProvider1.SetError(txtSROROS, "Only numbers are allowed")
					ErrorCount += 1
					LeaveSR
				  Else
				     wSROROS  = Convert.ToDecimal( txtSROROS.Text )	
				EndIf
			EndIf	
		
		Endif
		
		If Mode = 'ADD'
		 	
			// Find IPITHDR record for various values required when adding records to DSSRDTL
			SRCLS  = Convert.ToInt32( txtSRCLS.Text )
			SRVEN  = Convert.ToInt32( txtSRVEN.Text )
			SRSTY  = Convert.ToInt32( txtSRSTY.Text )
			SRCLR  = Convert.ToInt32( txtSRCLR.Text )
			SRSIZ  = Convert.ToInt32( txtSRSIZ.Text )
				
			Chain ItemDesc Key(SRCLS, SRVEN, SRSTY, SRCLR, SRSIZ)
			If Not ItemDesc.IsFound
			   	MsgBox 'Item Description record has not been found'
				LeaveSR
			EndIf
			
			StoreKey = txtSRSTR.text
		
			SRSTR  = StoreKey
		  
		EndIf
		
		// Open DSSRDTL (Main Member)
		ItemMaster.MemberName = "DSSRDTL"
		If Not ItemMaster.IsOpen()
		   Open ItemMaster
		Endif 
			
		// ------------------------------			
		If Mode = 'ADD'
		// ------------------------------    			
			// Update DSSRDTL1
			updDSITHDR()
			
			// WELOAD
			If ItemMaster.IsOpen()
			   Close ItemMaster
			Endif     
			ItemMaster.MemberName = "WELOAD"
			Open ItemMaster 
			
			// Update DSSRDTL1
		    updDSITHDR()
			   
			// DLOAD
			If ItemMaster.IsOpen()
			   Close ItemMaster
			Endif 
			ItemMaster.MemberName = "DLOAD"
			Open ItemMaster
			
			// Update DSSRDTL1
		    updDSITHDR()
			
			// Update DSITHDR if PatternID And/Or Minimum Qty Ordered has changed
			
			setItemHeader()
			
			MsgBox( "item Added" )
			
		// ------------------------------							
		ElseIf Mode = 'UPDATE'
		// ------------------------------
		    // Update DSSRDTL1
		    updDSITHDR()
			
			// WELOAD
			If ItemMaster.IsOpen()
			   Close ItemMaster
			Endif 
			ItemMaster.MemberName = "WELOAD"
			Open ItemMaster
			
			// Update DSSRDTL1
		    updDSITHDR()
			 
			// DLOAD
			If ItemMaster.IsOpen()
			   Close ItemMaster
			Endif 
			ItemMaster.MemberName = "DLOAD"
			Open ItemMaster
						
			// Update DSSRDTL1
		    updDSITHDR()
		    
		    MsgBox( "item Updated" )
			
			// Update DSITHDR if PatternID And/Or Minimum Qty Ordered has changed
			
		 //	setItemHeader()
		// ------------------------------	
		ElseIf Mode = 'DELETE'
		// ------------------------------
			MsgBox 'Are you sure you want to delete this record' RtnCode(Action) Icon(*EXCLAMATION) Buttons( *OKCANCEL )
			If Action <> 1
			   Close ItemMaster	
			   LeaveSR
			Endif
			Delete RDSSRDTL Key(P_SRDept, P_SRCLS, P_SRVEN, P_SRSTY, P_SRCLR, P_SRSIZ, P_SRSTR)
			Rebuild = *True
				// WELOAD
			If ItemMaster.IsOpen()
			   Close ItemMaster
			Endif 
			ItemMaster.MemberName = "WELOAD"
			Open ItemMaster 
			Chain ItemMaster Key(P_SRDept, P_SRCLS, P_SRVEN, P_SRSTY, P_SRCLR, P_SRSIZ, P_SRSTR)
			If ItemMaster.IsFound
			 Delete RDSSRDTL
			Endif
			 
			// DLOAD
			If ItemMaster.IsOpen()
			   Close ItemMaster
			Endif 
			ItemMaster.MemberName = "DLOAD"
			Open ItemMaster
			Chain ItemMaster Key(P_SRDept, P_SRCLS, P_SRVEN, P_SRSTY, P_SRCLR, P_SRSIZ, P_SRSTR)
			If ItemMaster.IsFound
			 Delete RDSSRDTL
			Endif
			MsgBox( "item deleted" ) 
		
		EndIf
	
		Close ItemMaster	
	
		If ErrorCount = 0
		  // MsgBox( "item deleted" )
		   Unload *This
		Endif
		
   EndSR
	
//------------------------------------------------------------
// Update records to DSSRDTL1
//------------------------------------------------------------
    BegSr updDSITHDR
        
        // Find IPITHDR record for various values required when adding records to DSSRDTL1
         
		  SRCLS  = Convert.ToInt32( txtSRCLS.Text )
		  SRVEN  = Convert.ToInt32( txtSRVEN.Text )
		  SRSTY  = Convert.ToInt32( txtSRSTY.Text )
		  SRCLR  = Convert.ToInt32( txtSRCLR.Text )
		  SRSIZ  = Convert.ToInt32( txtSRSIZ.Text )
		  SRDEPT = IDPT
		  StoreKey = txtSRSTR.text
		  SRSTR  = StoreKey	
		  Chain ItemMaster Key(SRDEPT, SRCLS, SRVEN, SRSTY, SRCLR, SRSIZ, SRSTR)
		  If Not ItemMaster.IsFound
		  
		    // Find department code for record being added
			Chain StoreDetail Key(SRSTR)
			If StoreDetail.IsFound
			   SRMKT = DCTR
			Endif
			
			SROROS = wSROROS 
			SRSRST = wSROROS 	
			SRSRSL = wSROROS 							
			SRFRDT = DateTime.MinValue
			SRDEPT = IDPT
			SRUPC  = IUPD
			SRSFCT = *Zero
			SRFFCT = *Zero
			SRCCO  = *Zero
			SRAFLG = *Blank
			SRSTOU = *Zero
			SRSTRQ = *Zero
			SRRPQT = *Zero
			SRWFLG = *Blank        
          
		     Write RDSSRDTL
		     Rebuild = *True
		   Else
		     SROROS = wSROROS
		     SRSRST = wSROROS 
		     SRSRSL = wSROROS  
		     Update RDSSRDTL
		     Rebuild = *True
		  Endif
        
	EndSr  
	
	
	/Region Enter Item code and Store code
	BegSr moveToSRVEN Access(*Private) Event(*this.txtSRCLS.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		If txtSRCLS.TextLength = 4
			errorProvider1.SetError(txtSRCLS, String.Empty)
			txtSRVEN.Select()
		EndIf
	EndSr
	
	BegSr moveToSRSTY Access(*Private) Event(*this.txtSRVEN.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		If txtSRVEN.TextLength = 5
			errorProvider1.SetError(txtSRVEN, String.Empty)
			txtSRSTY.Select()
		EndIf
	EndSr
	
	BegSr moveToSRCLR Access(*Private) Event(*this.txtSRSTY.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		If txtSRSTY.TextLength = 4
			errorProvider1.SetError(txtSRSTY, String.Empty)
			txtSRCLR.Select()
		EndIf
	EndSr
	
	BegSr moveToSRSIZ Access(*Private) Event(*this.txtSRCLR.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		If txtSRCLR.TextLength = 3
			errorProvider1.SetError(txtSRCLR, String.Empty)
			txtSRSIZ.Select()
		EndIf
	EndSr
	
	BegSr moveToSRSTR Access(*Private) Event(*this.txtSRSIZ.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		If txtSRSIZ.TextLength = 4
			errorProvider1.SetError(txtSRSIZ, String.Empty)
			txtSRSTR.Select()
		EndIf
	EndSr
	
	BegSr StoreCodeChanged Access(*Private) Event(*this.txtSRSTR.TextChanged)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		Dclfld StoreKey Type(*Zoned) Len(3,0)
		
		If txtSRSTR.Text = String.Empty
			errorProvider1.SetError(txtSRSTR, "Please enter a store code")
			LeaveSR
		EndIf
		
		
		@Pos = %Check(Digits, txtSRSTR.Text)
		If @Pos <> *Zero
			ErrorProvider1.SetError(txtSRSTR, "Only numbers are allowed")
			LeaveSR
		EndIf
		
		If txtSRSTR.TextLength = 3
			errorProvider1.SetError(txtSRSTR, String.Empty)
			Storekey = txtSRSTR.text
			Chain StoreMaster Key(StoreKey)
			If StoreMaster.IsFound
				errorProvider1.SetError(txtSRSTR, String.Empty)
				lblStoreName.Text = SNAM
			Else
				lblStoreName.Text = String.Empty
				errorProvider1.SetError(txtSRSTR, "Store not found")
			EndIf
		EndIf
	EndSr
	/EndRegion
	
	BegSr OpenDB
		Connect SRR
		
		Open StoreMaster
		
		ItemMaster.MemberName = "DSSRDTL"
		Open ItemMaster
		
		Open ItemDesc
		Open ItemHeader
		Open DisneyConst
		
	EndSr	
			
	BegSr btnRtvDtls_Click Access(*Private) Event(*this.btnRtvDtls.Click)
		DclSrParm sender *Object
		DclSrParm e System.EventArgs
		
		SetMousePtr *Hourglass
		
		txtDistLot.Enabled = *True
		txtPatId.Enabled = *True
		RtvDetails = *True
		
		// If form data validates clean...
        If ( ValidateItem() )
			
		// Find DSITHDR record for various values required 
			p_SRCLS  = Convert.ToInt32( txtSRCLS.Text )
			p_SRVEN  = Convert.ToInt32( txtSRVEN.Text )
			p_SRSTY  = Convert.ToInt32( txtSRSTY.Text )
			p_SRCLR  = Convert.ToInt32( txtSRCLR.Text )
			p_SRSIZ  = Convert.ToInt32( txtSRSIZ.Text )	 
		
		// get Pattern ID and Minimum Display Qty
		
		    getItemHeader()
		    
		    If txtDistLot.Text > 0  
		       txtDistLot.Enabled = *False
		    Endif
		    
		    If txtPatId.Text > 0
		       txtPatId.Enabled = *False
		    Endif
			   
		Endif	
		
		RtvDetails = *False	
	EndSr
	
//------------------------------------------------------------
// Validate the data on the form.
//------------------------------------------------------------
	BegFunc ValidateForm Type( *Boolean )

        // Clear any previously registered errors.
             ClearErrors()
        
            If txtSRCLS.Text = String.Empty	
				errorProvider1.SetError(txtSRCLS, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRCLS.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRCLS, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRVEN.Text = String.Empty	
				errorProvider1.SetError(txtSRVEN, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRVEN.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRVEN, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRSTY.Text = String.Empty	
				errorProvider1.SetError(txtSRSTY, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRSTY.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRSTY, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRCLR.Text = String.Empty	
				errorProvider1.SetError(txtSRCLR, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRCLR.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRCLR, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRSIZ.Text = String.Empty
				errorProvider1.SetError(txtSRSIZ, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRSIZ.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRSIZ, "Only numbers are allowed")
					ErrorCount += 1
				EndIf			
			EndIf
			
			If txtSRSTR.Text = String.Empty	
				errorProvider1.SetError(txtSRSTR, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRSTR.Text.Trim())
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRSTR, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
						
			If txtPatID.Text = String.Empty	
				errorProvider1.SetError(txtPatID, "Please enter value")
				ErrorCount += 1
			  Else
				Position = %Check(Digits, txtPatID.Text.Trim())
				If Position <> *Zero
					ErrorProvider1.SetError(txtPAtID, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			If txtDistLot.Text = String.Empty	
				errorProvider1.SetError(txtDistLot, "Please enter value")
				ErrorCount += 1
			  Else
				Position = %Check(Digits, txtDistLot.Text.Trim())
				If Position <> *Zero
					ErrorProvider1.SetError(txtDistLot, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			If txtSROROS.Text = String.Empty	
				errorProvider1.SetError(txtSROROS, "Please enter value")
				ErrorCount += 1
			  Else
				Position = %Check(Digits2, txtSROROS.Text.Trim())
				If Position <> *Zero
					ErrorProvider1.SetError(txtSROROS, "Only numbers are allowed")
					ErrorCount += 1
				  Else
				     wSROROS  = Convert.ToDecimal( txtSROROS.Text )	
				EndIf
			EndIf	
			
			Storekey = txtSRSTR.text
			Chain StoreMaster Key(StoreKey)
			If StoreMaster.IsFound
				errorProvider1.SetError(txtSRSTR, String.Empty)
				lblStoreName.Text = SNAM
			   Else
				lblStoreName.Text = String.Empty
				errorProvider1.SetError(txtSRSTR, "Store not found")
				ErrorCount += 1
			EndIf
 	    	
			// Leave now if errors occur 
			If ErrorCount > 0
			   LeaveSr ( ErrorCount = 0 )
			Endif
			
			// Validate PatternId and Minimum Qty Fields
			
			wPatternID = Convert.ToDecimal( txtPATID.Text.Trim() )
		    wMinDspQty = Convert.ToDecimal( txtDISTLOT.Text.Trim() )
			    
			Chain DisneyConst  key("PATTERN_DESCRIPTION",txtPATID.Text.Trim()) 
			If Not DisneyConst.IsFound
		       ErrorProvider1.SetError(txtPATID, "PatternID not Found")
			   ErrorCount += 1
			Endif 
			
		  // Find DSITHDR record for various values required  
          
          If Mode = 'ADD'
          
		     SRCLS  = Convert.ToInt32( txtSRCLS.Text )
		     SRVEN  = Convert.ToInt32( txtSRVEN.Text )
		     SRSTY  = Convert.ToInt32( txtSRSTY.Text )
		     SRCLR  = Convert.ToInt32( txtSRCLR.Text )
		     SRSIZ  = Convert.ToInt32( txtSRSIZ.Text )
		  	
		     Chain ItemHeader Key( SRCLS, SRVEN, SRSTY, SRCLR, SRSIZ ) Access(*NoLock)
		     If ItemHeader.IsFound
		       If wMinDspQty <> DMDQT *And wMinDspQty > 0
		           ErrorProvider1.SetError(txtDISTLOT, "Invalid Qty Item set as:" + DMDQT.toString())
			       ErrorCount += 1
		       Endif
		     Endif 
		  Endif
		 
		 				
		// Leave true if ErrorCount = 0, otherwise false.
        LeaveSr ( ErrorCount = 0 )
    EndFunc 
//------------------------------------------------------------
// Validate the item Number on the form.
//------------------------------------------------------------
	BegFunc ValidateItem Type( *Boolean )

        // Clear any previously registered errors.
             ClearErrors()
        
            If txtSRCLS.Text = String.Empty	
				errorProvider1.SetError(txtSRCLS, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRCLS.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRCLS, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRVEN.Text = String.Empty	
				errorProvider1.SetError(txtSRVEN, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRVEN.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRVEN, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRSTY.Text = String.Empty	
				errorProvider1.SetError(txtSRSTY, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRSTY.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRSTY, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRCLR.Text = String.Empty	
				errorProvider1.SetError(txtSRCLR, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRCLR.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRCLR, "Only numbers are allowed")
					ErrorCount += 1
				EndIf
			EndIf
			
			
			If txtSRSIZ.Text = String.Empty
				errorProvider1.SetError(txtSRSIZ, "Please enter value")
				ErrorCount += 1
			Else
				Position = %Check(Digits, txtSRSIZ.Text)
				If Position <> *Zero
					ErrorProvider1.SetError(txtSRSIZ, "Only numbers are allowed")
					ErrorCount += 1
				EndIf			
			EndIf
						
		// Leave true if ErrorCount = 0, otherwise false.
        LeaveSr ( ErrorCount = 0 )
    EndFunc 				
//------------------------------------------------------------
// Clear Error
//------------------------------------------------------------
    BegSr ClearErrors
        // Clear all errors.
		ErrorCount = 0
		ErrorProvider1.Clear()
	EndSr  
	
//------------------------------------------------------------
// Form Closing Events 
//------------------------------------------------------------	
	
	BegSr Form_FormClosing Access(*Private) Event(*this.FormClosing)
		DclSrParm sender Type(*Object)
		DclSrParm e Type(System.Windows.Forms.FormClosingEventArgs)
		
		Close *All
	EndSr
	
	
EndClass