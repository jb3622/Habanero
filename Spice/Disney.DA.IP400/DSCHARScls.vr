Using System
Using System.Text
Using System.Data
Using System.IO

BegClass DSCHARScls Access(*Public)
		
	DclDB Name(PgmDB) DbName("TDST")
	DclDiskFile Name(DSCHARS) Type(*Update) Org(*Indexed) ImpOpen(*No) DB(PgmDB) AddRec(*Yes) RnmFmt(Chars:R_Chars)
	DclDiskFile Name(DSCHARS_Read) Type(*Input) Org(*Indexed) ImpOpen(*No) DB(PgmDB) File("DSCHARS") netBlockFactor(400)
	
	DclFld CharsTbl         Type(DataTable)
	DclFld pCharCode        Type(String)
	DclFld pCharDescription Type(String)
	DclFld pFamilyCode      Type(String)
	DclFld pXMLpath         Type(String)
			
	BegConstructor Access(*Public)
		DclSrParm PgmDB       Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm Environment Type(Disney.Menu.Environments)
	
		*this.PgmDB = PgmDB
		
		pXMLpath = Path.Combine(Environment.PathToApplicationXML,"DSchars.xml")
		LoadDataTableFromXML()
	EndConstructor
	
	BegProp CharacterCode Type(*Char) Len(3) Access(*Public)
		BegGet
			LeaveSR CHCODE
		EndGet
	EndProp
	
	BegProp CharacterDescription Type(*Char) Len(25) Access(*Public)
		BegGet
			LeaveSR CHDESC
		EndGet
		
		BegSet
			CHDESC = *PropVal
		EndSet
	EndProp
	
	BegProp Active_Status Type(*Char) Len(1) Access(*Public)
		BegGet
			LeaveSR CHSTS
		EndGet
		
		BegSet
			CHSTS = *PropVal
		EndSet
	EndProp
	
	BegProp FamilyCode Type(*Char) Len(3) Access(*Public)
		BegGet
			LeaveSR CHFAM
		EndGet
		
		BegSet
			CHFAM = *PropVal
		EndSet
	EndProp
		
	BegSR LoadDataTableFromXML Access(*Private)
			
		If CharsTbl = *Nothing
			CreateTbl()
			If Not File.Exists(pXMLpath)
				CreateCharsXML()
			Else
				CharsTbl.ReadXml(pXMLpath)
			EndIf
		EndIf
	EndSR
	
	BegSr CreateTbl Access(*Private)
	
		DclArray Keys Type(DataColumn) Rank(1)
		
		CharsTbl = *New DataTable("Chars")

		CharsTbl.Columns.Add(*New DataColumn("CharCode", *TypeOf(String)))
		CharsTbl.Columns["CharCode"].ReadOnly = *True

		CharsTbl.Columns.Add(*New DataColumn("CharDescription", *TypeOf(String)))
		CharsTbl.Columns["CharDescription"].ReadOnly = *True

		CharsTbl.Columns.Add(*New DataColumn("CharCodeDescription", *TypeOf(String)))
		CharsTbl.Columns["CharCodeDescription"].Expression = "CharDescription + ' - ' + CharCode"
		CharsTbl.Columns["CharCodeDescription"].ReadOnly = *True
		
		CharsTbl.Columns.Add(*New DataColumn("FamilyCode", *TypeOf(String)))
		CharsTbl.Columns["FamilyCode"].ReadOnly = *True
		
		Keys = *New DataColumn[] {CharsTbl.Columns("CharCode")}
		CharsTbl.PrimaryKey = Keys
	EndSr
	
	BegSr CreateCharsXML Access(*Private)
	
		DclFld dr Type(DataRow)
		
		If Not DSCHARS_Read.IsOpen
			Open DSCHARS_Read
		EndIf
		
		DoUntil DSCHARS_Read.IsEof
			Read DSCHARS_Read
			If Not DSCHARS_Read.IsEof
				dr = CharsTbl.NewRow()
				dr.Item["CharCode"]        = CHCODE
				dr.Item["CharDescription"] = CHDESC.Trim()
				dr.Item("FamilyCode")      = CHFAM.Trim()
				CharsTbl.Rows.Add(dr)
			EndIf
		EndDo
		
		CharsTbl.WriteXml(pXMLpath)
		
		Close DSChars
	EndSr
			
	BegFunc GetCharsTbl Type(DataTable) Access(*Public)
		
		LeaveSR CharsTbl
	EndFunc
	
	BegFunc GetCharacterCode Type(*Boolean) Access(*Public)
		DclSrParm CharacterCode Type(String)
		
		DclFld dr Type(DataRow)
		
		dr = CharsTbl.Rows.Find(CharacterCode)
		If dr <> *Nothing
			pCharCode        = dr.Item("CharCode")        *As String
			pCharDescription = dr.Item("CharDescription") *As String
			pFamilyCode      = dr.Item("FamilyCode")      *As String

			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	
//	BegFunc GetCharacterCode Type(*Boolean) Access(*Public)
//		DclSrParm CharacterCode Type(*Char) len(3)
//		DclSrParm FamilyCode Type(*Char) len(3)
//		
//		If Not DSCHARS.IsOpen
//			Open DSCHARS
//		EndIf
//		
//		Chain From(DSCHARS) Key(CharacterCode,FamilyCode) Access(*NoLock)
//		If %Found
//			LeaveSR *Off
//		Else
//			LeaveSR *On
//		EndIf
//	EndFunc
	
	/Region CRUD
	BegFunc GetCharCodeForUpdate Type(*Boolean) Access(*Public)
		DclSrParm CharacterCode Type(*Char) len(3)
		
		If Not DSCHARS.IsOpen
			Open DSCHARS
		EndIf
		
		Chain From(DSCHARS) Key(CharacterCode) Access(*DFT) Err(*Extended)
		If not %Found
			LeaveSR *On
		EndIf
		
		If %Error = *On
			Throw *New System.Exception('Failed to get record for update (DSCHARS)')
			LeaveSR *On
		EndIf
		
		LeaveSR *Off
	EndFunc
	
	BegFunc GetCharCodeForUpdate Type(*Boolean) Access(*Public)
		DclSrParm CharacterCode Type(*Char) len(3)
		DclSrParm FamilyCode Type(*Char) len(3)
		
		If Not DSCHARS.IsOpen
			Open DSCHARS
		EndIf
		
		Chain From(DSCHARS) Key(CharacterCode,FamilyCode) Access(*DFT) Err(*Extended)
		If not %Found
			LeaveSR *On
		EndIf
		
		If %Error = *On
			Throw *New System.Exception('Failed to get record for update (DSCHARS)')
			LeaveSR *On
		EndIf
		
		LeaveSR *Off
	EndFunc
		
	BegSR WriteCharCode Access(*Public)
		DclSrParm CharacterCode Type(*Char) Len(3)
	
		If Not DSCHARS.IsOpen
			Open DSCHARS
		EndIf
		
		CHCODE = CharacterCode
		
		Write R_Chars Err(*Extended)
		If %Error = *On
			Throw *New System.Exception('Failed to write record (DSCHARS)')
		EndIf
		
		LeaveSR
	EndSR
	
	BegFunc UpdateCharCode Type(*Boolean) Access(*Public) 
		DclSrParm CharacterCode Type(*Char) len(3)
		
		Update R_Chars Err(*Extended)
		If %Error = *On
			Throw *New System.Exception('Failed to update record (DSCHARS)')
			LeaveSR *True
		EndIf
		
		LeaveSR *Off
	EndFunc
	
	BegFunc DeleteCharCode Type(*Boolean) Access(*Public)
		DclSrParm CharacterCode Type(*Char) len(3)
		
		If Not DSCHARS.IsOpen
			Open DSCHARS
		EndIf
		
		Delete From(R_Chars) Key(CharacterCode) Err(*Extended)
		If %Error = *On
			LeaveSR *True
		EndIf
		
		LeaveSR *False
	EndFunc
	
	BegFunc DeleteCharCode Type(*Boolean) Access(*Public)
		DclSrParm CharacterCode Type(*Char) len(3)
		DclSrParm FamilyCode Type(*Char) len(3)
		
		If Not DSCHARS.IsOpen
			Open DSCHARS
		EndIf
		
		Delete From(R_Chars) Key(CharacterCode,FamilyCode) Err(*Extended)
		If %Error = *On
			LeaveSR *True
		EndIf
		
		LeaveSR *False
	EndFunc
	/EndRegion
EndClass