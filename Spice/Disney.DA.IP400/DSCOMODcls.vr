Using System
Using System.Text
Using System.Data
Using System.IO

BegClass DSCOMODcls Access(*Public)
		
	DclDB Name(PgmDB) DbName("TDST")
	DclDiskFile Name(DSCOMOD) Type(*Input) Org(*Indexed) ImpOpen(*No) DB(PgmDB)
	
	DclFld CommodityTbl Type(DataTable)  Access(*Private)
	DclArray Keys       Type(DataColumn) Access(*Private) Rank(1)
	DclFld   dr         Type(DataRow)    Access(*Private)
	DclFld   pXMLpath   Type(String)     Access(*Private)
			
	BegConstructor Access(*Public)
		DclSrParm PgmDB       Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm Environment Type(Disney.Menu.Environments)
		
		*this.PgmDB = PgmDB
		
		pXMLpath = Path.Combine(Environment.PathToApplicationXML,"Commodity.xml")
		LoadDataTableFromXML()
	EndConstructor
		
	/Region Properties
	DclFld pCode Type(String) Access(*Private)
	BegProp CommodityCode Type(*Char) Len(2) Access(*Public)
		BegGet
			LeaveSR pCode
		EndGet
	EndProp
	
	DclFld pCustomsCode Type(String) Access(*Private)
	BegProp CustomsCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCustomsCode
		EndGet
	EndProp
	
	DclFld pDescription Type(String) Access(*Private)
	BegProp CommodityDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pDescription
		EndGet
	EndProp
	
	DclFld pDutyFactor Type(String) Access(*Private)
	BegProp DutyFactor Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pDutyFactor
		EndGet
	EndProp
	
	DclFld pStatus Type(Boolean) Access(*Private)
	BegProp Status Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pStatus
		EndGet
	EndProp
	/EndRegion

	BegSr LoadDataTableFromXML Access(*Private)
			
		If CommodityTbl = *Nothing
			CreateTbl()
			If Not File.Exists(pXMLpath)
				CreateCommodityXML()
			Else
				CommodityTbl.ReadXml(pXMLpath)
			EndIf
		EndIf
	EndSr
	
	BegSr CreateTbl Access(*Private)
		
		CommodityTbl = *New DataTable("Commodity")

		CommodityTbl.Columns.Add(*New DataColumn("Code", *TypeOf(String)))
		CommodityTbl.Columns["Code"].ReadOnly = *True

		CommodityTbl.Columns.Add(*New DataColumn("CustomsCode", *TypeOf(String)))
		CommodityTbl.Columns["CustomsCode"].ReadOnly = *True
		
		CommodityTbl.Columns.Add(*New DataColumn("Description", *TypeOf(String)))
		CommodityTbl.Columns["Description"].ReadOnly = *True
		
		CommodityTbl.Columns.Add(*New DataColumn("DutyFactor", *TypeOf(Decimal)))
		CommodityTbl.Columns["DutyFactor"].ReadOnly = *True
		
		CommodityTbl.Columns.Add(*New DataColumn("Status", *TypeOf(Boolean)))
		CommodityTbl.Columns["Status"].ReadOnly = *True
		
		Keys = *New DataColumn[] {CommodityTbl.Columns("Code")}
		CommodityTbl.PrimaryKey = Keys
	EndSr
	
	BegSr CreateCommodityXML Access(*Private)
	
		If Not DSCOMOD.IsOpen
			Open DSCOMOD
		EndIf
		
		DoUntil DSCOMOD.IsEof
			Read DSCOMOD
			If Not DSCOMOD.IsEof
				dr = CommodityTbl.NewRow()
				
				dr.Item["Code"]        = CDICDE
				dr.Item["CustomsCode"] = CDCCDE.Trim()
				dr.Item["Description"] = CDDESC.Trim()
				dr.Item["DutyFactor"]  = CDDUTY
				
				If CDSTS = "Y"
					dr.Item["Status"] = *True
				Else
					dr.Item["Status"] = *False
				EndIf
				
				CommodityTbl.Rows.Add(dr)
			EndIf
		EndDo
		
		CommodityTbl.WriteXml(pXMLpath)
		
		Close DSCOMOD
	EndSr
		
	BegFunc GetCommodityCode Type(*Boolean) Access(*Public)
		DclSrParm Commodity Type(String)
		
		If CommodityTbl = *Nothing
			LoadDataTableFromXML()
		EndIf
		
		dr = CommodityTbl.Rows.Find(Commodity)
		If dr <> *Nothing
			pCode        = dr.Item("Code")        *As String
			pCustomsCode = dr.Item["CustomsCode"] *As String
			pDescription = dr.Item["Description"] *As String
			pDutyFactor  = dr.Item["DutyFactor"]  *As String
			pStatus      = dr.Item["Status"]      *As Boolean
			
			LeaveSR *True
		Else
			LeaveSR *False
		EndIf
	EndFunc
	
	BegFunc GetCommodityTbl Type(DataTable) Access(*Public)
		
		LeaveSR CommodityTbl
	EndFunc
EndClass