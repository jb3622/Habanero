// ===============================================
// Joseph Urbina
// 16th November 2009
// SpiceAPPItem
// Data Access Layer - APP Master and Components
//------------------------------------------------
// Modification
//================================================

Using System
Using System.Text
Using System.Data
Using System.Collections
Using System.Windows.Forms
Using Disney.Spice.DAL
Using IBM.Data.DB2.iSeries
Using Disney.Menu

BegClass SpiceAPPItem Access(*Public)
		
/Region Declare Files and DB
	DclDB Name(PgmDB) DbName('TDST')
	
	DclDiskFile Name(DSSPAMIL1) Type(*Update) Org(*Indexed) ImpOpen(*No) DB(PgmDB) AddRec(*Yes)
	DclDiskFile Name(DSSPACML1) Type(*Update) Org(*Indexed) ImpOpen(*No) DB(PgmDB) AddRec(*Yes) 
	DclDiskFile Name(IPPNDSTA)  Type(*Input)  Org(*Indexed) ImpOpen(*No) DB(PgmDB)
	DclDiskFile Name(DSSETDTL)  Type(*Input)  Org(*Indexed) ImpOpen(*No) DB(PgmDB) 
	DclDiskFile Name(DSSPPOIL2) Type(*Input)  Org(*Indexed) ImpOpen(*No) DB(PgmDB)
	DclDiskFile Name(DSSPPOHL1) Type(*Input)  Org(*Indexed) ImpOpen(*No) DB(PgmDB)
/EndRegion

/Region DTAQueue Declares
	DclPlist  Name( DS400PARMS )
		DclParm DTAQname Type(*Char) Len(10)  DBDirection( *Input )		// Only to iSeries
		DclParm DTAQlib  Type(*Char) Len(10)  DBDirection( *Input )		// Only to iSeries
		DclParm DTAQdta  Type(*Char) Len(100) DBDirection( *Input )		// Only to iSeries
		
	DclDS Name( DtaQDtaDS )
		DclDSfld Name(Buffer) Type(*Char) Len(100)
		DclDSfld Name(DSfld1)   Type(*Char) Len(10) Overlay(Buffer,  1)
		DclDSfld Name(DSfld2)   Type(*Char) Len( 4) Overlay(Buffer, 11)
		DclDSfld Name(DSfld3)   Type(*Char) Len(10) Overlay(Buffer, 15)
		DclDSfld Name(DSfld4)   Type(*Char) Len(25) Overlay(Buffer, 25)
		DclDSfld Name(DSfld5)   Type(*Char) Len(30) Overlay(Buffer, 50)
		DclDSfld Name(DSfld6)   Type(*Char) Len(26) Overlay(Buffer, 75)
/EndRegion
		
/Region Constructor
	BegConstructor Access(*Public)
		DclSrParm Pgmdb Type(ASNA.VisualRPG.Runtime.Database)
		DclSrParm User  Type(Disney.Menu.Users)
		
		*This.PgmDB = PgmDB
		*This.User  = User
				
	EndConstructor
/EndRegion

/Region Declares 
	DclFld User			      Type(Disney.Menu.Users)
	DclFld DateFormat         Type(String) Inz(String.Empty)
	DclFld ComponentsTbl      Type(DataTable) New()
	DclFld ComponentsDV		  Type(DataView)	
	DclFld ComponentsClm      Type(DataColumn) 
	DclFld ComponentsRow      Type(DataRow)
	DclFld LongItemString     Type(StringBuilder)
	
	DclFld	pDivision         Type(Int16)   Access(*Private) Inz(0)
	DclFld	pDepartment       Type(Int16)   Access(*Private) Inz(0)
	DclFld	pClass            Type(Int16)   Access(*Private) Inz(0)
	DclFld	pVendor           Type(Int32)   Access(*Private) Inz(0)
	DclFld	pStyle            Type(Int16)   Access(*Private) Inz(0)
	DclFld	pColour           Type(Int16)   Access(*Private) Inz(0)
	DclFld	pSize             Type(Int16)   Access(*Private) Inz(0)
	DclFld	pAPPType          Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pPrefix           Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pSubClass         Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pLongDescription  Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pLocalDescription  Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pShortDescription Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pVendorStyle      Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pDevelopedBy      Type(String)  Access(*Private) Inz(String.Empty)	
	DclFld	pCommodityCode    Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pCompositionCode  Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pCountryOfOrigin  Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pCharacterCode    Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pSeasonCode       Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pCasePackType     Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pCaseQty          Type(Int32)   Access(*Private) Inz(0)
	DclFld	pDistroQty        Type(Int32)   Access(*Private) Inz(0)
	DclFld	pCartonWeight     Type(Decimal) Access(*Private) Inz(0)
	DclFld	pCartonHeight     Type(Decimal) Access(*Private) Inz(0)
	DclFld	pCartonLength     Type(Decimal) Access(*Private) Inz(0)
	DclFld	pCartonWidth      Type(Decimal) Access(*Private) Inz(0)
	DclFld	pCostPrice        Type(Decimal) Access(*Private) Inz(0)
	DclFld	pRetailPrice      Type(Decimal) Access(*Private) Inz(0)
	DclFld	pComponentCount   Type(Int16)   Access(*Private) Inz(0)
	DclFld	pPendingChar      Type(String)  Access(*Private) Inz(String.Empty)
	DclFld  pVendorUPC		  Type(Int64)   Access(*Private) Inz(0)
	DclFld	pDisneyUPC        Type(Int64)   Access(*Private) Inz(0)
	DclFld  pCaseDtlLck		  Type(String)  Access(*Private) Inz(String.Empty)
	DclFld  pEASRqs			  Type(Int64)   Access(*Private) Inz(0)
	DclFld	pComponentClass   Type(Int16)   Access(*Private) Inz(0)
	DclFld	pComponentVendor  Type(Int32)   Access(*Private) Inz(0)
	DclFld	pComponentStyle   Type(Int16)   Access(*Private) Inz(0)
	DclFld	pComponentColour  Type(Int16)   Access(*Private) Inz(0)
	DclFld	pComponentSize    Type(Int16)   Access(*Private) Inz(0)
	DclFld	pComponentQty     Type(Int32)   Access(*Private) Inz(0)
	DclFld	pSequence         Type(Int16)   Access(*Private) Inz(0)
	DclFld	pCreationdate     Type(Int32)   Access(*Private) Inz(0)
	DclFld	pCreationTime     Type(Int32)   Access(*Private) Inz(0)
	DclFld	pCreationUser     Type(String)  Access(*Private) Inz(String.Empty)
	DclFld	pChangeDate       Type(Int32)   Access(*Private) Inz(0)
	DclFld	pChangeTime       Type(Int32)   Access(*Private) Inz(0)
	DclFld	pChangeUser       Type(String)  Access(*Private) Inz(String.Empty)
/EndRegion
			
/Region DSSPAMI and DSSPACM Properties
	//Division
	BegProp Division Type(Int16) Access(*Public)
		BegGet
			LeaveSR pDivision
		EndGet
		
		BegSet
			pDivision = *PropVal
		EndSet
	EndProp
	
	//Department
	BegProp Department Type(Int16) Access(*Public)
		BegGet
			LeaveSR pDepartment
		EndGet
		
		BegSet
			pDepartment = *PropVal
		EndSet
	EndProp
	
	//Class
	BegProp Class Type(Int16) Access(*Public)
		BegGet
			LeaveSR pClass
		EndGet
		
		BegSet
			pClass = *PropVal
		EndSet
	EndProp
	
	//Vendor
	BegProp Vendor Type(Int32) Access(*Public)
		BegGet
			LeaveSR pVendor
		EndGet
		
		BegSet
			pVendor = *PropVal
		EndSet
	EndProp
	
	//Style
	BegProp Style Type(Int16) Access(*Public)
		BegGet
			LeaveSR pStyle
		EndGet
		
		BegSet
			pStyle = *PropVal
		EndSet
	EndProp
	
	//Colour
	BegProp Colour Type(Int16) Access(*Public)
		BegGet
			LeaveSR pColour
		EndGet
		
		BegSet
			pColour = *PropVal
		EndSet
	EndProp
	
	//Size
	BegProp Size Type(Int16) Access(*Public)
		BegGet
			LeaveSR pSize
		EndGet
		
		BegSet
			pSize = *PropVal
		EndSet
	EndProp
	
	//APP Type
	BegProp APPType Type(String) Access(*Public)
		BegGet
			If(pAPPType = *Nothing)
				pAPPType = String.Empty
			EndIf		
			LeaveSR pAPPType
		EndGet
		
		BegSet
			pAPPType = *PropVal
		EndSet
	EndProp
	
	//Prefix
	BegProp Prefix Type(String) Access(*Public)
		BegGet
			LeaveSR pPrefix
		EndGet
		
		BegSet
			pPrefix = *PropVal
		EndSet
	EndProp
	
	//SubClass
	BegProp SubClass Type(String) Access(*Public)
		BegGet
			LeaveSR pSubClass
		EndGet
		
		BegSet
			pSubClass = *PropVal
		EndSet
	EndProp
	
	//Long Description
	BegProp LongDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pLongDescription
		EndGet
		
		BegSet
			pLongDescription = *PropVal
		EndSet
	EndProp
	
	BegProp LocalDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pLocalDescription
		EndGet
		
		BegSet
			pLocalDescription = *PropVal
		EndSet
	EndProp
	
	//Short Description
	BegProp ShortDescription Type(String) Access(*Public)
		BegGet
			LeaveSR pShortDescription
		EndGet
		
		BegSet
			pShortDescription = *PropVal
		EndSet
	EndProp
	
	//Vendor Style
	BegProp VendorStyle Type(String) Access(*Public)
		BegGet
			LeaveSR pVendorStyle
		EndGet
		
		BegSet
			pVendorStyle = *PropVal
		EndSet
	EndProp
	
	//Developed By 
	BegProp DevelopedBy Type(String) Access(*Public)
		BegGet
			LeaveSR pDevelopedBy
		EndGet
		
		BegSet
			pDevelopedBy = *PropVal
		EndSet
	EndProp
	
	//Commodity Code
	BegProp CommodityCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCommodityCode
		EndGet
		
		BegSet
			pCommodityCode = *PropVal
		EndSet
	EndProp
	
	DclFld pSellingChannel Type(String) Access(*Private) Inz(String.Empty)
	BegProp SellingChannel Type(String) Access(*Public)
		BegGet
			LeaveSR pSellingChannel
		EndGet
		BegSet
			pSellingChannel = *PropVal
		EndSet
	EndProp
	
	DclFld pForOnlineEcommerce Type(String) Access(*Private) Inz(String.Empty)
	BegProp ForOnlineEcommerce Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pForOnlineEcommerce
		EndGet
		BegSet
			pForOnlineEcommerce = *PropVal
		EndSet
	EndProp
	
	DclFld pOfferEffectiveDate Type(Int32) Access(*Private) Inz(0)
	BegProp OfferEffectiveDate Type(Int32) Access(*Public)
		BegGet
			LeaveSR pOfferEffectiveDate
		EndGet
		BegSet
			pOfferEffectiveDate = *PropVal
		EndSet
	EndProp
	
	DclFld pDropShip Type(String) Access(*Private) Inz(String.Empty)
	BegProp DropShip Type(String) Access(*Public)
		BegGet
			LeaveSR pDropShip
		EndGet
		BegSet
			pDropShip = *PropVal
		EndSet
	EndProp
	
	DclFld pItemShipAlone Type(String) Access(*Private) Inz(String.Empty)
	BegProp ItemShipAlone Type(String) Access(*Public)
		BegGet
			LeaveSR pItemShipAlone
		EndGet
		BegSet
			pItemShipAlone = *PropVal
		EndSet
	EndProp
	
	DclFld pSpecialHandling Type(String) Access(*Private) Inz(String.Empty)
	BegProp SpecialHandling Type(String) Access(*Public)
		BegGet
			LeaveSR pSpecialHandling
		EndGet
		BegSet
			pSpecialHandling = *PropVal
		EndSet
	EndProp
	
	DclFld pSpecialHandlingCode Type(String) Access(*Private) Inz(String.Empty)
	BegProp SpecialHandlingCode Type(String) Access(*Public)
		BegGet
			LeaveSR pSpecialHandlingCode
		EndGet
		BegSet
			pSpecialHandlingCode = *PropVal
		EndSet
	EndProp
	
	DclFld pSellOutControl Type(String) Access(*Private) Inz(String.Empty)
	BegProp SellOutControl Type(String) Access(*Public)
		BegGet
			LeaveSR pSellOutControl
		EndGet
		BegSet
			pSellOutControl = *PropVal
		EndSet
	EndProp

	DclFld pSuppressBackOrderCard Type(Boolean) Access(*Private)
	BegProp SuppressBackOrderCard Type(Boolean) Access(*Public)
		BegGet
			LeaveSR pSuppressBackOrderCard
		EndGet
		BegSet
			pSuppressBackOrderCard = *PropVal
		EndSet
	EndProp
		
	DclFld pThirdPartySeller Type(Decimal) Access(*Private) Inz(0)
	BegProp ThirdPartySeller Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pThirdPartySeller
		EndGet
		BegSet
			pThirdPartySeller = *PropVal
		EndSet
	EndProp
	
	DclFld pUserField1 Type(String) Access(*Private) Inz(String.Empty)
	BegProp UserField1 Type(String) Access(*Public)
		BegGet
			LeaveSR pUserField1
		EndGet
		BegSet
			pUserField1 = *PropVal
		EndSet
	EndProp
	
	DclFld pUserField2 Type(String) Access(*Private) Inz(String.Empty)
	BegProp UserField2 Type(String) Access(*Public)
		BegGet
			LeaveSR pUserField2
		EndGet
		BegSet
			pUserField2 = *PropVal
		EndSet
	EndProp
	
	DclFld pDCNotes Type(String) Access(*Private) Inz(String.Empty)
	BegProp DCNotes Type(String) Access(*Public)
		BegGet
			LeaveSR pDCNotes
		EndGet
		BegSet
			pDCNotes = *PropVal
		EndSet
	EndProp
	
	//Composition Code
	BegProp CompositionCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCompositionCode
		EndGet
		
		BegSet
			pCompositionCode = *PropVal
		EndSet
	EndProp
	
	//Country of Origin
	BegProp CountryOfOrigin Type(String) Access(*Public)
		BegGet
			LeaveSR pCountryOfOrigin
		EndGet
		
		BegSet
			pCountryOfOrigin = *PropVal
		EndSet
	EndProp
	
	//Character Code
	BegProp CharacterCode Type(String) Access(*Public)
		BegGet
			LeaveSR pCharacterCode
		EndGet
		
		BegSet
			pCharacterCode = *PropVal
		EndSet
	EndProp
	
	//Season Code
	BegProp SeasonCode Type(String) Access(*Public)
		BegGet
			LeaveSR pSeasonCode
		EndGet
		
		BegSet
			pSeasonCode = *PropVal
		EndSet
	EndProp
	
	//Case Pack Type
	BegProp CasePackType Type(String) Access(*Public)
		BegGet
			LeaveSR pCasePackType
		EndGet
		
		BegSet
			pCasePackType = *PropVal
		EndSet
	EndProp
	
	//Case Qty
	BegProp CaseQty Type(Int32) Access(*Public)
		BegGet
			LeaveSR pCaseQty
		EndGet
		
		BegSet
			pCaseQty = *PropVal
		EndSet
	EndProp
	
	//Distro/Inner Qty
	BegProp DistroQty Type(Int32) Access(*Public)
		BegGet
			LeaveSR pDistroQty
		EndGet
		
		BegSet
			pDistroQty = *PropVal
		EndSet
	EndProp
	
	//Carton Weight
	BegProp CartonWeight Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pCartonWeight
		EndGet
		
		BegSet
			pCartonWeight = *PropVal
		EndSet
	EndProp
	
	//Carton Height
	BegProp CartonHeight Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pCartonHeight
		EndGet
		
		BegSet
			pCartonHeight = *PropVal
		EndSet
	EndProp
	
	//Carton Length
	BegProp CartonLength Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pCartonLength
		EndGet
		
		BegSet
			pCartonLength = *PropVal
		EndSet
	EndProp
	
	//Carton Width
	BegProp CartonWidth Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pCartonWidth
		EndGet
		
		BegSet
			pCartonWidth = *PropVal
		EndSet
	EndProp
	
	//Cost Price
	BegProp CostPrice Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pCostPrice
		EndGet
		
		BegSet
			pCostPrice = *PropVal
		EndSet
	EndProp
	
	//Retail Price
	BegProp RetailPrice Type(Decimal) Access(*Public)
		BegGet
			LeaveSR pRetailPrice
		EndGet
		
		BegSet
			pRetailPrice = *PropVal
		EndSet
	EndProp
	
	//Component Count
	BegProp ComponentCount Type(Int16) Access(*Public)
		BegGet
			LeaveSR pComponentCount
		EndGet
		
		BegSet
			pComponentCount = *PropVal
		EndSet
	EndProp	
	
	//Pending Character Code Change
	BegProp PendingChar Type(String) Access(*Public)
		BegGet
			LeaveSR pPendingChar
		EndGet
		
		BegSet
			pPendingChar = *PropVal
		EndSet
	EndProp
	
	//Vendor UPC
	BegProp VendorUPC Type(Int64) Access(*Public)
		BegGet
			LeaveSR pVendorUPC
		EndGet
		
		BegSet
			pVendorUPC = *PropVal
		EndSet
	EndProp
	
	//Disney UPC
	BegProp DisneyUPC Type(Int64) Access(*Public)
		BegGet
			LeaveSR pDisneyUPC
		EndGet
		
		BegSet
			pDisneyUPC = *PropVal
		EndSet
	EndProp
	
	//Case Details Locked Y/N
	BegProp CaseDtlLck Type(String) Access(*Public)
		BegGet
			LeaveSR pCaseDtlLck
		EndGet
		
		BegSet
			pCaseDtlLck = *PropVal
		EndSet
	EndProp
	
	//EAS Request
	BegProp EASRqs Type(Int64) Access(*Public)
		BegGet
			LeaveSR pEASRqs
		EndGet
		
		BegSet
			pEASRqs = *PropVal
		EndSet
	EndProp
			
	//Component Class
	BegProp ComponentClass Type(Int16) Access(*Public)
		BegGet
			LeaveSR pComponentClass
		EndGet
		
		BegSet
			pComponentClass = *PropVal
		EndSet
	EndProp
	
	//Component Vendor
	BegProp ComponentVendor Type(Int32) Access(*Public)
		BegGet
			LeaveSR pComponentVendor
		EndGet
		
		BegSet
			pComponentVendor = *PropVal
		EndSet
	EndProp
	
	//ComponentStyle
	BegProp ComponentStyle Type(Int16) Access(*Public)
		BegGet
			LeaveSR pComponentStyle
		EndGet
		
		BegSet
			pComponentStyle = *PropVal
		EndSet
	EndProp
	
	//Component Colour
	BegProp ComponentColour Type(Int16) Access(*Public)
		BegGet
			LeaveSR pComponentColour
		EndGet
		
		BegSet
			pComponentColour = *PropVal
		EndSet
	EndProp
	
	//Component Size
	BegProp ComponentSize Type(Int16) Access(*Public)
		BegGet
			LeaveSR pComponentSize
		EndGet
		
		BegSet
			pComponentSize = *PropVal
		EndSet
	EndProp
	
	//Component Qty
	BegProp ComponentQty Type(Int32) Access(*Public)
		BegGet
			LeaveSR pComponentQty
		EndGet
		
		BegSet
			pComponentQty = *PropVal
		EndSet
	EndProp
	
	//Sequence
	BegProp Sequence Type(Int16) Access(*Public)
		BegGet
			LeaveSR pSequence
		EndGet
		
		BegSet
			pSequence = *PropVal
		EndSet
	EndProp
	
	//Creation Date
	BegProp Creationdate Type(Int32) Access(*Public)
		BegGet
			LeaveSR pCreationDate
		EndGet
	EndProp
	
	//Creation Time
	BegProp CreationTime Type(Int32) Access(*Public)
		BegGet
			LeaveSR pCreationTime
		EndGet
	EndProp
	
	//Creation User
	BegProp CreationUser Type(String) Access(*Public)
		BegGet
			LeaveSR pCreationUser
		EndGet
	EndProp
	
	//Change Date
	BegProp ChangeDate Type(Int32) Access(*Public)
		BegGet
			LeaveSR pChangeDate
		EndGet
	EndProp
	
	//Change Time
	BegProp ChangeTime Type(Int32) Access(*Public)
		BegGet
			LeaveSR pChangeTime
		EndGet
	EndProp
	
	//Change User
	BegProp ChangeUser Type(String) Access(*Public)
		BegGet
			LeaveSR pChangeUser
		EndGet
	EndProp
/EndRegion	
			
/Region Methods
	//ChkAPPMaster for Existence
	BegFunc ChkAPPMaster Type(*Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
		
		If Not DSSPAMIL1.IsOpen
			Open DSSPAMIL1
		EndIf
		
		Chain From(DSSPAMIL1) Key(Class, Vendor, Style, Colour, Size) Access(*NoLock)
		If %Found
			LeaveSR *On
		Else
			LeaveSR *Off
		EndIf
	EndFunc

	//GetAPPMaster for read 
	BegFunc GetAPPMasterRead Type(*Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
		
		If Not DSSPAMIL1.IsOpen
			Open DSSPAMIL1
		EndIf
		
		Chain From(DSSPAMIL1) Key(Class, Vendor, Style, Colour, Size) Access(*NoLock)
		If %Found
			PopulateAMIProperties()
			LeaveSR *On
		Else
			LeaveSR *Off
		EndIf
	EndFunc
	
	//GetAPPMaster for Update 
	BegFunc GetAPPMasterUpdate Type(*Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
		
		If Not DSSPAMIL1.IsOpen
			Open DSSPAMIL1
		EndIf
		
		Chain From(DSSPAMIL1) Key(Class, Vendor, Style, Colour, Size) 
		If %Found
			LeaveSR *On
		Else
			LeaveSR *Off
		EndIf
	EndFunc		
	
	//Write new Master record.		
	BegSR WriteAPPMaster Access(*Public)
								
		If Not DSSPAMIL1.IsOpen
			Open DSSPAMIL1
		EndIf
				
		//Set new record data		
		SetAMIWriteData() 
				
		//Write the record
		Try
			Write RDSSPAMI Err(*Extended)
		Catch Name(exc) Type(Exception)
			Throw exc
			//Throw *New System.Exception('Failed to write record (DSSPAMIL1)')
		EndTry		
//		If %Error = *On
//			Throw *New System.Exception('Failed to write record (DSSPAMIL1)')
//		EndIf
		
		LongItemString = *New StringBuilder()
			LongItemString.Append(AMIDIV.ToString('00'))
			LongItemString.Append(AMIDPT.ToString('000'))
			LongItemString.Append(AMICLS.ToString('0000'))
			LongItemString.Append(AMIVEN.ToString('00000'))
			LongItemString.Append(AMISTY.ToString('0000'))
			LongItemString.Append(AMICLR.ToString('000'))
			LongItemString.Append(AMISIZ.ToString('0000'))
						
		LeaveSR 
	EndSR
	
	//Write new Component record.		
	BegSR WriteAPPComponent Access(*Public)
		DclSrParm ComponentsGrid  Type(DataGridView)
		
		If Not DSSPACML1.IsOpen
			Open DSSPACML1
		EndIf
		
		//Read the Components DataGridView and Populate the file
		ForEach dgvRow Collection(ComponentsGrid.Rows) Type(DataGridViewRow)
			If dgvRow.IsNewRow   = *False 				
				Try
					pComponentClass  = Int16.Parse(dgvRow.Cells["clmClass"].Value.ToString()) 
					pComponentVendor = Int32.Parse(dgvRow.Cells["clmVendor"].Value.ToString()) 
					pComponentStyle  = Int16.Parse(dgvRow.Cells["clmStyle"].Value.ToString()) 
					pComponentColour = Int16.Parse(dgvRow.Cells["clmColour"].Value.ToString()) 
					pComponentSize   = Int16.Parse(dgvRow.Cells["clmSize"].Value.ToString()) 
					pComponentQty    = Int16.Parse(dgvRow.Cells["clmQty"].Value.ToString()) 
					pSequence       += 1
					SetACMWriteData()				
				
					Write RDSSPACM Err(*Extended)
				Catch Name(exc) Type(Exception)
					Throw exc
				EndTry
//				If %Error = *On
//					Throw *New System.Exception('Failed to write record (DSSPACML1)')
//				EndIf
			Endif
		Endfor	
	EndSR
	
	//App Dtaq Write
	BegSr WriteToDtaq Access(*Public)
		DTAQname = *Blank
		DTAQlib  = *Blank
		DSfld1   = 'REQCRTAPP'
		DSfld2   = User.IPinitials.ToUpper()
		DSfld3   = PgmDB.User.ToUpper()
		DSfld4   = LongItemString.ToString()
		DSfld5   = *Blank
		
		DateFormat = "yyyy-MM-dd-HH.mm.ss.000000"
		DSfld6     = DateTime.Now.ToString(DateFormat)
		DTAQdta    = DtaQDtaDS
			
		Call Pgm('DS400HC') DB(PgmDB) ParmList(DS400PARMS)
		
		LeaveSr
	EndSr
	
	//Update APP Master
	BegSr UpdateAPPMaster Access(*Public)
			DclSrParm Class  Type(Int16) 
			DclSrParm Vendor Type(Int32) 
			DclSrParm Style  Type(Int16) 
			DclSrParm Colour Type(Int16) 
			DclSrParm Size   Type(Int16) 
							
		If Not DSSPAMIL1.IsOpen
			Open DSSPAMIL1
		EndIf
				
		//Set Changed record data		
		SetAMIChangeData() 
				
		//Update the record
		Update RDSSPAMI Err(*Extended)
			If %Error = *On
				Throw *New System.Exception('Failed to update record for (DSSPAMIL1)')
			EndIf
				
		LongItemString = *New StringBuilder()
		LongItemString.Append(AMIDIV.ToString('00'))
		LongItemString.Append(AMIDPT.ToString('000'))
		LongItemString.Append(AMICLS.ToString('0000'))
		LongItemString.Append(AMIVEN.ToString('00000'))
		LongItemString.Append(AMISTY.ToString('0000'))
		LongItemString.Append(AMICLR.ToString('000'))
		LongItemString.Append(AMISIZ.ToString('0000'))
						
		LeaveSR 
	EndSr
	
	//Update Component Records.		
	BegSR UpdateAPPComponent Access(*Public)
		DclSrParm ComponentsGrid  Type(DataGridView)
		
		If Not DSSPACML1.IsOpen
			Open DSSPACML1
		EndIf
		
		CreateComponentsTbl()
		
		//Read the Components DataGridView and Populate the Table
		ForEach dgvRow Collection(ComponentsGrid.Rows) Type(DataGridViewRow)
			If dgvRow.IsNewRow   = *False 
				pComponentClass  = Int16.Parse(dgvRow.Cells["clmClass"].Value.ToString()) 
				pComponentVendor = Int32.Parse(dgvRow.Cells["clmVendor"].Value.ToString()) 
				pComponentStyle  = Int16.Parse(dgvRow.Cells["clmStyle"].Value.ToString()) 
				pComponentColour = Int16.Parse(dgvRow.Cells["clmColour"].Value.ToString()) 
				pComponentSize   = Int16.Parse(dgvRow.Cells["clmSize"].Value.ToString()) 
				pComponentQty    = Int16.Parse(dgvRow.Cells["clmQty"].Value.ToString()) 
				
				//Create Temporary holding Table
				ComponentsRow = ComponentsTbl.NewRow()
				
				//Determine if the Component already existed								
				Chain From(DSSPACML1) Key(Class, Vendor, Style, Colour, Size, + 
										  pComponentClass, pComponentVendor,  +
										  pComponentStyle, pComponentColour,  +
										  pComponentSize) Access(*NoLock)
				If %Found 
					ComponentsRow.Item["CompCreateDate"] = ACMCRD
					ComponentsRow.Item["CompCreateTime"] = ACMCRT
					ComponentsRow.Item["CompCreateUser"] = ACMCRU
										
					//Determine if a change needs to be recorded
					If pComponentQty <> ACMQTY
						ComponentsRow.Item["CompChangeFlag"] = 'Y'
					Endif
				Endif
					
				ComponentsRow.Item["CompClass"]    = pComponentClass
				ComponentsRow.Item["CompVendor"]   = pComponentVendor
				ComponentsRow.Item["CompStyle"]    = pComponentStyle
				ComponentsRow.Item["CompColour"]   = pComponentColour
				ComponentsRow.Item["CompSize"]     = pComponentSize
				ComponentsRow.Item["CompQuantity"] = pComponentQty
				
				ComponentsTbl.Rows.Add(ComponentsRow)
							
			Endif
		Endfor	
		
		
		//Delete all components for this APP Master
		Setll DSSPACML1 Key(Class, Vendor, Style, Colour, Size)
		DoUntil DSSPACML1.IsEof
			ReadE DSSPACML1 Key(Class, Vendor, Style, Colour, Size) 
			If not DSSPACML1.IsEof
				Delete From(RDSSPACM)
			Endif 
		Enddo
		
		//Read through the DataTable(ComponentsTbl) and write records to DSSPACM
		ComponentsDV = *New DataView(ComponentsTbl)
		Clear RDSSPACM
						
		ForEach CompRow Collection(ComponentsDV) Type(DataRowView)
			ACMDIV = pDivision       
			ACMDPT = pDepartment     
			ACMCLS = pClass          
			ACMVEN = pVendor         
			ACMSTY = pStyle          
			ACMCLR = pColour         
			ACMSIZ = pSize           
			ACMCCL = Convert.ToInt16(CompRow.Item["CompClass"])
			ACMCVN = Convert.ToInt32(CompRow.Item["CompVendor"])
			ACMCST = Convert.ToInt16(CompRow.Item["CompStyle"]) 
			ACMCCR = Convert.ToInt16(CompRow.Item["CompColour"])
			ACMCSZ = Convert.ToInt16(CompRow.Item["CompSize"])  
			ACMQTY = Convert.ToInt32(CompRow.Item["CompQuantity"])   
			ACMSEQ += 1
			
			//If Component Already existed write original creation audit fields
			If CompRow.Item["CompCreateDate"].ToString() <> String.Empty      
				ACMCRD = Convert.ToInt32(CompRow.Item["CompCreateDate"])   
				ACMCRT = Convert.ToInt32(CompRow.Item["CompCreateTime"])   
				ACMCRU = CompRow("CompCreateUser").ToString()
			Else
				ACMCRD = %Date   
				ACMCRT = %Time   
				ACMCRU = Pgmdb.User().toUpper()
			Endif
			
			//Record Change Audit fields if component was changed
			If CompRow.Item["CompChangeFlag"].ToString() = 'Y'
				ACMLCD = %Date  
				ACMLCT = %Time   
				ACMLCU = Pgmdb.User().toUpper()
			Endif 
			
			Write RDSSPACM Err(*Extended)
				If %Error = *On
					Throw *New System.Exception('Failed to write record (DSSPACML1)')
				EndIf
		EndFor
	EndSR
	
	//APP Dtaq Update
	BegSr UpdateToDtaq Access(*Public)
	
		DTAQname = *Blank
		DTAQlib  = *Blank
		DSfld1   = 'REQCHGAPP'
		DSfld2   = User.IPinitials.ToUpper()
		DSfld3   = PgmDB.User.ToUpper()
		DSfld4   = LongItemString.ToString()
		DSfld5   = *Blank
		
		DateFormat = "yyyy-MM-dd-HH.mm.ss.000000"
		DSfld6     = DateTime.Now.ToString(DateFormat)
		DTAQdta    = DtaQDtaDS
			
		Call Pgm('DS400HC') DB(PgmDB) ParmList(DS400PARMS)
		
		LeaveSR
	Endsr
	
	//Delete APP Master & Components
	BegFunc DeleteAPP Type(*Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16)
		
		If Not DSSPAMIL1.IsOpen
			Open DSSPAMIL1
		EndIf
		
//		If Not DSSPACML1.IsOpen
//			Open DSSPACML1
//		EndIf
		
		Chain From(DSSPAMIL1) Key(Class, Vendor, Style, Colour, Size) Access(*NoLock)
			If %Found
				LongItemString = *New StringBuilder()
				LongItemString.Append(AMIDIV.ToString('00'))
				LongItemString.Append(AMIDPT.ToString('000'))
				LongItemString.Append(AMICLS.ToString('0000'))
				LongItemString.Append(AMIVEN.ToString('00000'))
				LongItemString.Append(AMISTY.ToString('0000'))
				LongItemString.Append(AMICLR.ToString('000'))
				LongItemString.Append(AMISIZ.ToString('0000'))
				
				//Delete From(RDSSPAMI)
				
				// Write to DTAQ on iSeries
				DTAQname = *Blank
				DTAQlib  = *Blank
				DSfld1   = 'REQDLTAPP'
				DSfld2   = User.IPinitials.ToUpper()
				DSfld3   = PgmDB.User.ToUpper()
				DSfld4   = LongItemString.ToString()
				DSfld5   = *Blank
			
				DateFormat = "yyyy-MM-dd-HH.mm.ss.000000"
				DSfld6     = DateTime.Now.ToString(DateFormat)
				DTAQdta    = DtaQDtaDS
				
				Call Pgm('DS400HC') DB(PgmDB) ParmList(DS400PARMS)
				
		
				//Delete all components for this APP Master  ---- This was removed as Bart already deletes the components within the rpg.
//				Setll DSSPACML1 Key(Class, Vendor, Style, Colour, Size)
//				DoUntil DSSPACML1.IsEof
//					ReadE DSSPACML1 Key(Class, Vendor, Style, Colour, Size) 
//					If not DSSPACML1.IsEof
//						Delete From(RDSSPACM)
//					Endif 
//				Enddo
			Endif
		LeaveSR *True
	EndFunc
	
	//Returns DSSPACM Records as a DataTable
	BegFunc GetComponentsDatable Type(DataTable) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
		
		DclFld dtComponents Type( DataTable ) New()
		DclFld dcComponents Type( DataColumn ) 
		DclFld drComponents Type( DataRow )
										
		If Not DSSPACML1.IsOpen
			Open DSSPACML1
		EndIf
		
		//Create Component Class Column
		dcComponents = *New DataColumn('CompClass')
		dcComponents.DataType = System.Type.GetType("System.Int16")
		dcComponents.ColumnName = "CompClass"
		dtComponents.Columns.Add(dcComponents)
		
		//Create Component Vendor Column
		dcComponents = *New DataColumn('CompVendor')
		dcComponents.DataType = System.Type.GetType("System.Int32")
		dcComponents.ColumnName = "CompVendor"
		dtComponents.Columns.Add(dcComponents)
		
		//Create Component Syle Column
		dcComponents = *New DataColumn('CompStyle')
		dcComponents.DataType = System.Type.GetType("System.Int16")
		dcComponents.ColumnName = "CompStyle"
		dtComponents.Columns.Add(dcComponents)
		
		//Create Component Colour Column
		dcComponents = *New DataColumn('CompColour')
		dcComponents.DataType = System.Type.GetType("System.Int16")
		dcComponents.ColumnName = "CompColour"
		dtComponents.Columns.Add(dcComponents)
		
		//Create Component Size Column
		dcComponents = *New DataColumn('CompSize')
		dcComponents.DataType = System.Type.GetType("System.Int16")
		dcComponents.ColumnName = "CompSize"
		dtComponents.Columns.Add(dcComponents)
		
		//Create Component Quantity Column
		dcComponents = *New DataColumn('CompQuantity')
		dcComponents.DataType = System.Type.GetType("System.Int16")
		dcComponents.ColumnName = "CompQuantity"
		dtComponents.Columns.Add(dcComponents)
		
		//Create Component Sequence Column
		dcComponents = *New DataColumn('CompSequence')
		dcComponents.DataType = System.Type.GetType("System.Int16")
		dcComponents.ColumnName = "CompSequence"
		dtComponents.Columns.Add(dcComponents)
				
		//Read file and create rows in DataTable				
		Setll DSSPACML1 Key(Class, Vendor, Style, Colour, Size)
		DoUntil DSSPACML1.IsEof
			ReadE DSSPACML1 Key(Class, Vendor, Style, Colour, Size) Access(*NoLock)
			If not DSSPACML1.IsEof
				drComponents = dtComponents.NewRow()
				drComponents.Item["CompClass"]    = ACMCCL
				drComponents.Item["CompVendor"]   = ACMCVN
				drComponents.Item["CompStyle"]    = ACMCST
				drComponents.Item["CompColour"]   = ACMCCR
				drComponents.Item["CompSize"]     = ACMCSZ
				drComponents.Item["CompQuantity"] = ACMQTY
				drComponents.Item["CompSequence"] = ACMSEQ
				dtComponents.Rows.Add(drComponents)
			Endif
		Enddo
			LeaveSR dtComponents
	EndFunc
	
	//Check Pending Distributions for Existence
	BegFunc ChkPendingDist Type(*Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
		
		If Not IPPNDSTA.IsOpen
			Open IPPNDSTA
		EndIf
		
		Chain From(IPPNDSTA) Key(Class, Vendor, Style, Colour, Size) Access(*NoLock)
		If %Found
			LeaveSR *On
		Else
			LeaveSR *Off
		EndIf
	EndFunc
	
	//Check APP Quantity and if on Order
	BegFunc ChkAPPQtyOnOrder Type(*Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
		
		If Not DSSETDTL.IsOpen
			Open DSSETDTL
		EndIf
		
		Chain From(DSSETDTL) Key(Class, Vendor, Style, Colour, Size) Access(*NoLock)
		If %Found 
			If SDQTY > 0 Or SDPOE = 'Y' 
				LeaveSR *On
			Else
				LeaveSr *Off
			Endif
		Else
			LeaveSR *Off
		EndIf
	EndFunc
	
	//Check APP Quantity and if on Order...........This could be used to check any item on order. At the moment it's being called from
	//the APP change form.
	BegFunc ChkSpiceAPPOnOrder Type(*Boolean) Access(*Public)
		DclSrParm Class  Type(Int16) 
		DclSrParm Vendor Type(Int32) 
		DclSrParm Style  Type(Int16) 
		DclSrParm Colour Type(Int16) 
		DclSrParm Size   Type(Int16) 
						
		If Not DSSPPOHL1.IsOpen
			Open DSSPPOHL1
		EndIf
		
		If Not DSSPPOIL2.IsOpen
			Open DSSPPOIL2
		EndIf
		
		//Read all occurences of this item
		Setll DSSPPOIL2 Key(Class, Vendor, Style, Colour, Size)
		DoUntil DSSPPOIL2.IsEof
			ReadE DSSPPOIL2 Key(Class, Vendor, Style, Colour, Size) 
			If not DSSPPOIL2.IsEof
				
				//Only read active records and check the status
				//If status is not = to "OP, OC, RC, OR" then no maintenance is allowed. 
				Chain From(DSSPPOHL1) Key(POISPO, POIVER) Access(*NoLock)
				If %Found
					If POHSTS  <> 'OP' and POHSTS <> 'RP' and POHSTS <> 'OC' and POHSTS <> 'RC' and POHSTS <> 'OR' and POHSTS <> 'RR' and POHSTS <> 'IC'
						LeaveSr *on
					Endif
				Endif 
							
			Endif 
		Enddo
							
		LeaveSR *Off
		
	EndFunc
		
	BegSr PopulateAMIProperties Access(*Public)
		Try
			pDivision         = AMIDIV
			pDepartment       = AMIDPT
			pClass            = AMICLS
			pVendor           = AMIVEN
			pStyle            = AMISTY
			pColour           = AMICLR
			pSize             = AMISIZ
			pAPPType          = AMITYP
			pPrefix           = AMIPFX
			pSubClass         = AMISCL
			pLongDescription  = AMIDES
			pShortDescription = AMISDS
			LocalDescription = GetLocalStyleDescription(AMICLS,AMIVEN,AMISTY,AMICLR)
			pVendorStyle      = AMIVST
			pDevelopedBy      = AMILIC
			pCommodityCode    = AMICMD
			pCompositionCode  = AMICMP
			pCountryOfOrigin  = AMICTR
			pCharacterCode    = AMICHR
			pSeasonCode       = AMICGP
			pCasePackType     = AMICPT
			pCaseQty          = AMIMIN
			pDistroQty        = AMIMLT
			pCartonWeight     = AMICWG
			pCartonHeight     = AMICHT
			pCartonLength     = AMICLN
			pCartonWidth      = AMICWI
			pCostPrice        = AMICST
			pRetailPrice      = AMIRET
			pComponentCount   = AMI#CM
			pPendingChar      = AMIPCH
			pVendorUPC		  = AMIVUP	
			pDisneyUPC        = AMIDUP
			pCaseDtlLck		  = AMICLK
			// Added by JB 21/04/2011
			pSellingChannel   = AMISLC
			/* If(AMIOLE = "Y")
				pForOnlineEcommerce = *True
			Else
				pForOnlineEcommerce = *False
			EndIf */
			pOfferEffectiveDate = AMIOFE
			pDropShip         = AMIDSH
			pItemShipAlone    = AMIISA
			pSpecialHandling  = AMISPH
			pSpecialHandlingCode = AMIPZT
			pSellOutControl   = AMISOC
			pSuppressBackOrderCard = AMISBO
			pThirdPartySeller = AMITPS
			pUserField1       = AMIUF1
			pUserField2       = AMIUF2
			pDCNotes          = AMIDCN
					
			pEASRqs			  = AMIEID	
			PCreationdate     = AMICRD
			pCreationTime     = AMICRT
			pCreationUser     = AMICRU
			pChangeDate       = AMILCD
			pChangeTime       = AMILCT 
			pChangeUser       = AMILCU		
		Catch Name(exc) Type(Exception)
			//
		EndTry
	EndSr 
	
	BegSR SaveLocalStyleDescription Access(*Private)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Description Type(String)
		
		DclFld localLang Type(LocalLanguage)
		DclFld DB2Connection Type(iDB2Connection)
		
		If(DataCache.LocalLanguage <> 'English')
			Try
				DB2Connection = *New iDB2Connection(DataCache.DBConnectionString)
				DB2Connection.Open()
				localLang = *New LocalLanguage(DB2Connection)

				localLang.SaveItemStyleDescription(Class,Vendor,Style,Colour,DataCache.LocalLanguage,Description)
			Catch Name(exc) Type(Exception)
				Throw exc
			Finally
				DB2Connection.Close()
				DB2Connection = *Nothing
			EndTry	
		EndIf

	EndSR
	
	BegFunc GetLocalStyleDescription Type(*String) Access(*Private)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)

		DclFld localLang Type(LocalLanguage)
		DclFld localLangDesc Type(String)
		DclFld DB2Connection Type(iDB2Connection)
		DclFld recordFound Type(Boolean) Inz(*False)
		DclFld result Type(*String) Inz(String.Empty)
		
		Try
			DB2Connection = *New iDB2Connection(DataCache.DBConnectionString)
			DB2Connection.Open()
			localLang = *New LocalLanguage(DB2Connection)
			
			localLangDesc = localLang.GetItemStyleDescription(Class,Vendor,Style,Colour,DataCache.LocalLanguage,*ByRef recordFound) //e.g. 'Chinese'
			If (recordFound = *True)
				result = localLangDesc
			EndIf				
		Catch Name(exc) Type(Exception)
			Throw exc
		Finally
			DB2Connection.Close()
			DB2Connection = *Nothing
		EndTry
			
		LeaveSR result
	EndFunc
	
	BegSR SaveLocalSizeDescription Access(*Private)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		DclSrParm Description Type(String)
		
		DclFld localLang Type(LocalLanguage)
		DclFld DB2Connection Type(iDB2Connection)
		
		If(DataCache.LocalLanguage <> 'English')
			Try
				DB2Connection = *New iDB2Connection(DataCache.DBConnectionString)
				DB2Connection.Open()
				localLang = *New LocalLanguage(DB2Connection)
				
				localLang.SaveItemSizeDescription(Class,Vendor,Style,Colour,Size,DataCache.LocalLanguage,Description)	
			Catch Name(exc) Type(Exception)
				Throw exc
			Finally
				DB2Connection.Close()
				DB2Connection = *Nothing
			EndTry
		EndIf

	EndSR
	
	BegFunc GetLocalSizeDescription Type(*String) Access(*Private)
		DclSrParm Class  Type(Int16)
		DclSrParm Vendor Type(Int32)
		DclSrParm Style  Type(Int16)
		DclSrParm Colour Type(Int16)
		DclSrParm Size   Type(Int16)
		
		DclFld localLang Type(LocalLanguage)
		DclFld localLangDesc Type(String)
		DclFld DB2Connection Type(iDB2Connection)
		DclFld recordFound Type(Boolean) Inz(*False)
		DclFld result Type(*String) Inz(String.Empty)
		
		DB2Connection = *New iDB2Connection(DataCache.DBConnectionString)	
		Try
			DB2Connection.Open()
			localLang = *New LocalLanguage(DB2Connection)		
			localLangDesc = localLang.GetItemSizeDescription(Class,Vendor,Style,Colour,Size,DataCache.LocalLanguage,*ByRef recordFound) //e.g. 'Chinese'
			If (recordFound = *True)
				result = localLangDesc
			EndIf
		Catch Name(exc) Type(Exception)	
		Finally
			DB2Connection.Close()
			DB2Connection = *Nothing
		EndTry
			
		LeaveSR result
	EndFunc
	
	BegSr SetAMIWriteData Access(*Public)
		Try
			AMIDIV = pDivision       
			AMIDPT = pDepartment 
			AMICLS = pClass 
			AMIVEN = pVendor
			AMISTY = pStyle
			AMICLR = pColour 
			AMISIZ = pSize 
			AMITYP = pAPPType 
			AMIPFX = pPrefix  
			AMISCL = pSubClass
			AMIDES = pLongDescription
			AMISDS = pShortDescription
			AMIVST = pVendorStyle
			AMILIC = pDevelopedBy 
			AMICMD = pCommodityCode
			AMICMP = pCompositionCode
			AMICTR = pCountryOfOrigin
			AMICHR = pCharacterCode
			AMICGP = pSeasonCode 
			AMICPT = pCasePackType 
			AMIMIN = pCaseQty 
			AMIMLT = pDistroQty
			AMICWG = pCartonWeight
			AMICHT = pCartonHeight 
			AMICLN = pCartonLength
			AMICWI = pCartonWidth
			AMICST = pCostPrice 
			AMIRET = pRetailPrice
			AMI#CM = pComponentCount
			AMIPCH = pPendingChar
			AMIVUP = pVendorUPC
			AMIDUP = pDisneyUPC 
			AMICLK = pCaseDtlLck
			// Added by JB 21/04/2011
			AMISLC = pSellingChannel
			/* If(pForOnlineEcommerce = *True)
				AMIOLE = "Y"
			Else
				AMIOLE = "N"
			EndIf */
			AMIOFE = pOfferEffectiveDate
			AMIDSH = pDropShip
			AMIISA = pItemShipAlone
			AMISPH = pSpecialHandling
			AMIPZT = pSpecialHandlingCode
			AMISOC = pSellOutControl
			AMISBO = pSuppressBackOrderCard
			AMITPS = pThirdPartySeller
			AMIUF1 = pUserField1
			AMIUF2 = pUserField2
			AMIDCN = pDCNotes
				
			AMIEID = pEASRqs	
			AMICRD = %Date
			AMICRT = %Time
			AMICRU = Pgmdb.User().toUpper()
			AMILCD = String.Empty
			AMILCT = String.Empty
			AMILCU = String.Empty		
		Catch Name(exc) Type(Exception)
			//
		EndTry
	EndSr 
	
	BegSr SetAMIChangeData Access(*Public)
		Try
			AMIDES = pLongDescription
			AMISDS = pShortDescription
			AMIVST = pVendorStyle
			AMICMD = pCommodityCode
			AMICMP = pCompositionCode
			AMICTR = pCountryOfOrigin
			AMICGP = pSeasonCode 
			AMICPT = pCasePackType 
			AMIMIN = pCaseQty 
			AMIMLT = pDistroQty
			AMICWG = pCartonWeight
			AMICHT = pCartonHeight 
			AMICLN = pCartonLength
			AMICWI = pCartonWidth
			AMICST = pCostPrice 
			AMIRET = pRetailPrice
			AMI#CM = pComponentCount
			AMIPCH = pPendingChar
			// Added by JB 21/04/2011
			AMISLC = pSellingChannel
			/* If(pForOnlineEcommerce = *True)
				AMIOLE = "Y"
			Else
				AMIOLE = "N"
			EndIf */
			AMIOFE = pOfferEffectiveDate
			AMIDSH = pDropShip
			AMIISA = pItemShipAlone
			AMISPH = pSpecialHandling
			AMIPZT = pSpecialHandlingCode
			AMISOC = pSellOutControl
			AMISBO = pSuppressBackOrderCard
			AMITPS = pThirdPartySeller
			AMIUF1 = pUserField1
			AMIUF2 = pUserField2
			AMIDCN = pDCNotes
			
			AMILCD = %Date
			AMILCT = %Time
			AMILCU = Pgmdb.User().toUpper()
		Catch Name(exc) Type(Exception)
			//
		EndTry
	EndSr 	
	
	BegSr PopulateACMProperties Access(*Public)
		pDivision         = ACMDIV
		pDepartment       = ACMDPT
		pClass            = ACMCLS
		pVendor           = ACMVEN
		pStyle            = ACMSTY
		pColour           = ACMCLR
		pSize             = ACMSIZ
		pComponentClass   = ACMCCL
		pComponentVendor  = ACMCVN
		pComponentStyle   = ACMCST
		pComponentColour  = ACMCCR
		pComponentSize    = ACMCSZ
		pComponentQty     = ACMQTY
		pSequence         = ACMSEQ
		PCreationdate     = ACMCRD
		pCreationTime     = ACMCRT
		pCreationUser     = ACMCRU
		pChangeDate       = ACMLCD
		pChangeTime       = ACMLCT 
		pChangeUser       = ACMLCU
	EndSr 
	
	BegSr SetACMWriteData Access(*Public)
		ACMDIV = pDivision       
		ACMDPT = pDepartment     
		ACMCLS = pClass          
		ACMVEN = pVendor         
		ACMSTY = pStyle          
		ACMCLR = pColour         
		ACMSIZ = pSize           
		ACMCCL = pComponentClass 
		ACMCVN = pComponentVendor
		ACMCST = pComponentStyle 
		ACMCCR = pComponentColour
		ACMCSZ = pComponentSize  
		ACMQTY = pComponentQty   
		ACMSEQ = pSequence       
		ACMCRD = %Date   
		ACMCRT = %Time   
		ACMCRU = Pgmdb.User().toUpper()   
		ACMLCD = String.Empty   
		ACMLCT = String.Empty   
		ACMLCU = String.Empty   
	EndSr 
	
	//This Table holds a combination of Grid and existing file data.
	BegSr CreateComponentsTbl Access(*Private)
								
		//Create Component Class Column
		ComponentsClm = *New DataColumn('CompClass')
		ComponentsClm.DataType = System.Type.GetType("System.Int16")
		ComponentsClm.ColumnName = "CompClass"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Vendor Column
		ComponentsClm = *New DataColumn('CompVendor')
		ComponentsClm.DataType = System.Type.GetType("System.Int32")
		ComponentsClm.ColumnName = "CompVendor"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Syle Column
		ComponentsClm = *New DataColumn('CompStyle')
		ComponentsClm.DataType = System.Type.GetType("System.Int16")
		ComponentsClm.ColumnName = "CompStyle"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Colour Column
		ComponentsClm = *New DataColumn('CompColour')
		ComponentsClm.DataType = System.Type.GetType("System.Int16")
		ComponentsClm.ColumnName = "CompColour"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Size Column
		ComponentsClm = *New DataColumn('CompSize')
		ComponentsClm.DataType = System.Type.GetType("System.Int16")
		ComponentsClm.ColumnName = "CompSize"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Quantity Column
		ComponentsClm = *New DataColumn('CompQuantity')
		ComponentsClm.DataType = System.Type.GetType("System.Int16")
		ComponentsClm.ColumnName = "CompQuantity"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Sequence Column
		ComponentsClm = *New DataColumn('CompSequence')
		ComponentsClm.DataType = System.Type.GetType("System.Int16")
		ComponentsClm.ColumnName = "CompSequence"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Creation Date Column
		ComponentsClm = *New DataColumn('CompCreateDate')
		ComponentsClm.DataType = System.Type.GetType("System.Int32")
		ComponentsClm.ColumnName = "CompCreateDate"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Creation Time Column
		ComponentsClm = *New DataColumn('CompCreateTime')
		ComponentsClm.DataType = System.Type.GetType("System.Int32")
		ComponentsClm.ColumnName = "CompCreateTime"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Creation User Column
		ComponentsClm = *New DataColumn('CompCreateUser')
		ComponentsClm.DataType = System.Type.GetType("System.String")
		ComponentsClm.ColumnName = "CompCreateUser"
		ComponentsTbl.Columns.Add(ComponentsClm)
		
		//Create Component Change Flag Column
		ComponentsClm = *New DataColumn('CompChangeFlag')
		ComponentsClm.DataType = System.Type.GetType("System.String")
		ComponentsClm.ColumnName = "CompChangeFlag"
		ComponentsTbl.Columns.Add(ComponentsClm)
			
	EndSr
	
/EndRegion	

EndClass
